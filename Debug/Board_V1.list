
Board_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6c8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  0800a850  0800a850  0000b850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa78  0800aa78  0000c098  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa78  0800aa78  0000ba78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa80  0800aa80  0000c098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa80  0800aa80  0000ba80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa84  0800aa84  0000ba84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800aa88  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c098  2**0
                  CONTENTS
 10 .bss          00000574  20000098  20000098  0000c098  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000060c  2000060c  0000c098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013129  00000000  00000000  0000c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ac8  00000000  00000000  0001f1f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001200  00000000  00000000  00021cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e08  00000000  00000000  00022ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b14  00000000  00000000  00023cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000156e8  00000000  00000000  000467dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf5e0  00000000  00000000  0005bec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012b4a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054ac  00000000  00000000  0012b4e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000042  00000000  00000000  00130994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a838 	.word	0x0800a838

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	0800a838 	.word	0x0800a838

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b96a 	b.w	8000e7c <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	460c      	mov	r4, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14e      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bcc:	4694      	mov	ip, r2
 8000bce:	458c      	cmp	ip, r1
 8000bd0:	4686      	mov	lr, r0
 8000bd2:	fab2 f282 	clz	r2, r2
 8000bd6:	d962      	bls.n	8000c9e <__udivmoddi4+0xde>
 8000bd8:	b14a      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bda:	f1c2 0320 	rsb	r3, r2, #32
 8000bde:	4091      	lsls	r1, r2
 8000be0:	fa20 f303 	lsr.w	r3, r0, r3
 8000be4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be8:	4319      	orrs	r1, r3
 8000bea:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f f68c 	uxth.w	r6, ip
 8000bf6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bfa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bfe:	fb07 1114 	mls	r1, r7, r4, r1
 8000c02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c06:	fb04 f106 	mul.w	r1, r4, r6
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c16:	f080 8112 	bcs.w	8000e3e <__udivmoddi4+0x27e>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 810f 	bls.w	8000e3e <__udivmoddi4+0x27e>
 8000c20:	3c02      	subs	r4, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a59      	subs	r1, r3, r1
 8000c26:	fa1f f38e 	uxth.w	r3, lr
 8000c2a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c2e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c36:	fb00 f606 	mul.w	r6, r0, r6
 8000c3a:	429e      	cmp	r6, r3
 8000c3c:	d90a      	bls.n	8000c54 <__udivmoddi4+0x94>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c46:	f080 80fc 	bcs.w	8000e42 <__udivmoddi4+0x282>
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	f240 80f9 	bls.w	8000e42 <__udivmoddi4+0x282>
 8000c50:	4463      	add	r3, ip
 8000c52:	3802      	subs	r0, #2
 8000c54:	1b9b      	subs	r3, r3, r6
 8000c56:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	b11d      	cbz	r5, 8000c66 <__udivmoddi4+0xa6>
 8000c5e:	40d3      	lsrs	r3, r2
 8000c60:	2200      	movs	r2, #0
 8000c62:	e9c5 3200 	strd	r3, r2, [r5]
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d905      	bls.n	8000c7a <__udivmoddi4+0xba>
 8000c6e:	b10d      	cbz	r5, 8000c74 <__udivmoddi4+0xb4>
 8000c70:	e9c5 0100 	strd	r0, r1, [r5]
 8000c74:	2100      	movs	r1, #0
 8000c76:	4608      	mov	r0, r1
 8000c78:	e7f5      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c7a:	fab3 f183 	clz	r1, r3
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	d146      	bne.n	8000d10 <__udivmoddi4+0x150>
 8000c82:	42a3      	cmp	r3, r4
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xcc>
 8000c86:	4290      	cmp	r0, r2
 8000c88:	f0c0 80f0 	bcc.w	8000e6c <__udivmoddi4+0x2ac>
 8000c8c:	1a86      	subs	r6, r0, r2
 8000c8e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	2d00      	cmp	r5, #0
 8000c96:	d0e6      	beq.n	8000c66 <__udivmoddi4+0xa6>
 8000c98:	e9c5 6300 	strd	r6, r3, [r5]
 8000c9c:	e7e3      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	f040 8090 	bne.w	8000dc4 <__udivmoddi4+0x204>
 8000ca4:	eba1 040c 	sub.w	r4, r1, ip
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cba:	fb08 4416 	mls	r4, r8, r6, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb07 f006 	mul.w	r0, r7, r6
 8000cc6:	4298      	cmp	r0, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x11c>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x11a>
 8000cd4:	4298      	cmp	r0, r3
 8000cd6:	f200 80cd 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000cda:	4626      	mov	r6, r4
 8000cdc:	1a1c      	subs	r4, r3, r0
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb00 f707 	mul.w	r7, r0, r7
 8000cf2:	429f      	cmp	r7, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x148>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x146>
 8000d00:	429f      	cmp	r7, r3
 8000d02:	f200 80b0 	bhi.w	8000e66 <__udivmoddi4+0x2a6>
 8000d06:	4620      	mov	r0, r4
 8000d08:	1bdb      	subs	r3, r3, r7
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	e7a5      	b.n	8000c5c <__udivmoddi4+0x9c>
 8000d10:	f1c1 0620 	rsb	r6, r1, #32
 8000d14:	408b      	lsls	r3, r1
 8000d16:	fa22 f706 	lsr.w	r7, r2, r6
 8000d1a:	431f      	orrs	r7, r3
 8000d1c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d20:	fa04 f301 	lsl.w	r3, r4, r1
 8000d24:	ea43 030c 	orr.w	r3, r3, ip
 8000d28:	40f4      	lsrs	r4, r6
 8000d2a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2e:	0c38      	lsrs	r0, r7, #16
 8000d30:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d34:	fbb4 fef0 	udiv	lr, r4, r0
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d40:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d44:	fb0e f90c 	mul.w	r9, lr, ip
 8000d48:	45a1      	cmp	r9, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x1a6>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d56:	f080 8084 	bcs.w	8000e62 <__udivmoddi4+0x2a2>
 8000d5a:	45a1      	cmp	r9, r4
 8000d5c:	f240 8081 	bls.w	8000e62 <__udivmoddi4+0x2a2>
 8000d60:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	eba4 0409 	sub.w	r4, r4, r9
 8000d6a:	fa1f f983 	uxth.w	r9, r3
 8000d6e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d72:	fb00 4413 	mls	r4, r0, r3, r4
 8000d76:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d7e:	45a4      	cmp	ip, r4
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x1d2>
 8000d82:	193c      	adds	r4, r7, r4
 8000d84:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d88:	d267      	bcs.n	8000e5a <__udivmoddi4+0x29a>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	d965      	bls.n	8000e5a <__udivmoddi4+0x29a>
 8000d8e:	3b02      	subs	r3, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d96:	fba0 9302 	umull	r9, r3, r0, r2
 8000d9a:	eba4 040c 	sub.w	r4, r4, ip
 8000d9e:	429c      	cmp	r4, r3
 8000da0:	46ce      	mov	lr, r9
 8000da2:	469c      	mov	ip, r3
 8000da4:	d351      	bcc.n	8000e4a <__udivmoddi4+0x28a>
 8000da6:	d04e      	beq.n	8000e46 <__udivmoddi4+0x286>
 8000da8:	b155      	cbz	r5, 8000dc0 <__udivmoddi4+0x200>
 8000daa:	ebb8 030e 	subs.w	r3, r8, lr
 8000dae:	eb64 040c 	sbc.w	r4, r4, ip
 8000db2:	fa04 f606 	lsl.w	r6, r4, r6
 8000db6:	40cb      	lsrs	r3, r1
 8000db8:	431e      	orrs	r6, r3
 8000dba:	40cc      	lsrs	r4, r1
 8000dbc:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	e750      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000dc4:	f1c2 0320 	rsb	r3, r2, #32
 8000dc8:	fa20 f103 	lsr.w	r1, r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa24 f303 	lsr.w	r3, r4, r3
 8000dd4:	4094      	lsls	r4, r2
 8000dd6:	430c      	orrs	r4, r1
 8000dd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ddc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000de0:	fa1f f78c 	uxth.w	r7, ip
 8000de4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dec:	0c23      	lsrs	r3, r4, #16
 8000dee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df2:	fb00 f107 	mul.w	r1, r0, r7
 8000df6:	4299      	cmp	r1, r3
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x24c>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e02:	d22c      	bcs.n	8000e5e <__udivmoddi4+0x29e>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	d92a      	bls.n	8000e5e <__udivmoddi4+0x29e>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1a5b      	subs	r3, r3, r1
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e14:	fb08 3311 	mls	r3, r8, r1, r3
 8000e18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e1c:	fb01 f307 	mul.w	r3, r1, r7
 8000e20:	42a3      	cmp	r3, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x276>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e2c:	d213      	bcs.n	8000e56 <__udivmoddi4+0x296>
 8000e2e:	42a3      	cmp	r3, r4
 8000e30:	d911      	bls.n	8000e56 <__udivmoddi4+0x296>
 8000e32:	3902      	subs	r1, #2
 8000e34:	4464      	add	r4, ip
 8000e36:	1ae4      	subs	r4, r4, r3
 8000e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e3c:	e739      	b.n	8000cb2 <__udivmoddi4+0xf2>
 8000e3e:	4604      	mov	r4, r0
 8000e40:	e6f0      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e42:	4608      	mov	r0, r1
 8000e44:	e706      	b.n	8000c54 <__udivmoddi4+0x94>
 8000e46:	45c8      	cmp	r8, r9
 8000e48:	d2ae      	bcs.n	8000da8 <__udivmoddi4+0x1e8>
 8000e4a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e4e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e52:	3801      	subs	r0, #1
 8000e54:	e7a8      	b.n	8000da8 <__udivmoddi4+0x1e8>
 8000e56:	4631      	mov	r1, r6
 8000e58:	e7ed      	b.n	8000e36 <__udivmoddi4+0x276>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	e799      	b.n	8000d92 <__udivmoddi4+0x1d2>
 8000e5e:	4630      	mov	r0, r6
 8000e60:	e7d4      	b.n	8000e0c <__udivmoddi4+0x24c>
 8000e62:	46d6      	mov	lr, sl
 8000e64:	e77f      	b.n	8000d66 <__udivmoddi4+0x1a6>
 8000e66:	4463      	add	r3, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e74d      	b.n	8000d08 <__udivmoddi4+0x148>
 8000e6c:	4606      	mov	r6, r0
 8000e6e:	4623      	mov	r3, r4
 8000e70:	4608      	mov	r0, r1
 8000e72:	e70f      	b.n	8000c94 <__udivmoddi4+0xd4>
 8000e74:	3e02      	subs	r6, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	e730      	b.n	8000cdc <__udivmoddi4+0x11c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	@ 0x28
 8000e84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	4b50      	ldr	r3, [pc, #320]	@ (8000fdc <MX_GPIO_Init+0x15c>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	4a4f      	ldr	r2, [pc, #316]	@ (8000fdc <MX_GPIO_Init+0x15c>)
 8000ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea6:	4b4d      	ldr	r3, [pc, #308]	@ (8000fdc <MX_GPIO_Init+0x15c>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b49      	ldr	r3, [pc, #292]	@ (8000fdc <MX_GPIO_Init+0x15c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a48      	ldr	r2, [pc, #288]	@ (8000fdc <MX_GPIO_Init+0x15c>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b46      	ldr	r3, [pc, #280]	@ (8000fdc <MX_GPIO_Init+0x15c>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	4b42      	ldr	r3, [pc, #264]	@ (8000fdc <MX_GPIO_Init+0x15c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a41      	ldr	r2, [pc, #260]	@ (8000fdc <MX_GPIO_Init+0x15c>)
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b3f      	ldr	r3, [pc, #252]	@ (8000fdc <MX_GPIO_Init+0x15c>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	4b3b      	ldr	r3, [pc, #236]	@ (8000fdc <MX_GPIO_Init+0x15c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a3a      	ldr	r2, [pc, #232]	@ (8000fdc <MX_GPIO_Init+0x15c>)
 8000ef4:	f043 0308 	orr.w	r3, r3, #8
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b38      	ldr	r3, [pc, #224]	@ (8000fdc <MX_GPIO_Init+0x15c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0308 	and.w	r3, r3, #8
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	4b34      	ldr	r3, [pc, #208]	@ (8000fdc <MX_GPIO_Init+0x15c>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	4a33      	ldr	r2, [pc, #204]	@ (8000fdc <MX_GPIO_Init+0x15c>)
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f16:	4b31      	ldr	r3, [pc, #196]	@ (8000fdc <MX_GPIO_Init+0x15c>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000f22:	2200      	movs	r2, #0
 8000f24:	f24f 01c0 	movw	r1, #61632	@ 0xf0c0
 8000f28:	482d      	ldr	r0, [pc, #180]	@ (8000fe0 <MX_GPIO_Init+0x160>)
 8000f2a:	f004 f89f 	bl	800506c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f34:	482b      	ldr	r0, [pc, #172]	@ (8000fe4 <MX_GPIO_Init+0x164>)
 8000f36:	f004 f899 	bl	800506c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000f3a:	f24f 03c0 	movw	r3, #61632	@ 0xf0c0
 8000f3e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	4823      	ldr	r0, [pc, #140]	@ (8000fe0 <MX_GPIO_Init+0x160>)
 8000f54:	f003 fed6 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	481e      	ldr	r0, [pc, #120]	@ (8000fe8 <MX_GPIO_Init+0x168>)
 8000f6e:	f003 fec9 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f72:	2320      	movs	r3, #32
 8000f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f76:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	4816      	ldr	r0, [pc, #88]	@ (8000fe0 <MX_GPIO_Init+0x160>)
 8000f88:	f003 febc 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f8c:	2380      	movs	r3, #128	@ 0x80
 8000f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4811      	ldr	r0, [pc, #68]	@ (8000fe4 <MX_GPIO_Init+0x164>)
 8000fa0:	f003 feb0 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fa4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4809      	ldr	r0, [pc, #36]	@ (8000fe4 <MX_GPIO_Init+0x164>)
 8000fbe:	f003 fea1 	bl	8004d04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2017      	movs	r0, #23
 8000fc8:	f003 fe65 	bl	8004c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fcc:	2017      	movs	r0, #23
 8000fce:	f003 fe7e 	bl	8004cce <HAL_NVIC_EnableIRQ>

}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	@ 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020c00 	.word	0x40020c00
 8000fe4:	40020400 	.word	0x40020400
 8000fe8:	40020800 	.word	0x40020800

08000fec <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <MX_I2C2_Init+0x50>)
 8000ff2:	4a13      	ldr	r2, [pc, #76]	@ (8001040 <MX_I2C2_Init+0x54>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	@ (800103c <MX_I2C2_Init+0x50>)
 8000ff8:	4a12      	ldr	r2, [pc, #72]	@ (8001044 <MX_I2C2_Init+0x58>)
 8000ffa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <MX_I2C2_Init+0x50>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001002:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <MX_I2C2_Init+0x50>)
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001008:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <MX_I2C2_Init+0x50>)
 800100a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800100e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001010:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <MX_I2C2_Init+0x50>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001016:	4b09      	ldr	r3, [pc, #36]	@ (800103c <MX_I2C2_Init+0x50>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800101c:	4b07      	ldr	r3, [pc, #28]	@ (800103c <MX_I2C2_Init+0x50>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <MX_I2C2_Init+0x50>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001028:	4804      	ldr	r0, [pc, #16]	@ (800103c <MX_I2C2_Init+0x50>)
 800102a:	f004 f86b 	bl	8005104 <HAL_I2C_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001034:	f001 f8dc 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200000b4 	.word	0x200000b4
 8001040:	40005800 	.word	0x40005800
 8001044:	000186a0 	.word	0x000186a0

08001048 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a19      	ldr	r2, [pc, #100]	@ (80010cc <HAL_I2C_MspInit+0x84>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d12c      	bne.n	80010c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	4b18      	ldr	r3, [pc, #96]	@ (80010d0 <HAL_I2C_MspInit+0x88>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a17      	ldr	r2, [pc, #92]	@ (80010d0 <HAL_I2C_MspInit+0x88>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <HAL_I2C_MspInit+0x88>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001086:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800108a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800108c:	2312      	movs	r3, #18
 800108e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001098:	2304      	movs	r3, #4
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4619      	mov	r1, r3
 80010a2:	480c      	ldr	r0, [pc, #48]	@ (80010d4 <HAL_I2C_MspInit+0x8c>)
 80010a4:	f003 fe2e 	bl	8004d04 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <HAL_I2C_MspInit+0x88>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b0:	4a07      	ldr	r2, [pc, #28]	@ (80010d0 <HAL_I2C_MspInit+0x88>)
 80010b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010b8:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <HAL_I2C_MspInit+0x88>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	@ 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40005800 	.word	0x40005800
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020400 	.word	0x40020400

080010d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010da:	b087      	sub	sp, #28
 80010dc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010de:	f003 fc69 	bl	80049b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e2:	f000 f92f 	bl	8001344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e6:	f7ff fecb 	bl	8000e80 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010ea:	f001 f97f 	bl	80023ec <MX_TIM2_Init>
  MX_TIM3_Init();
 80010ee:	f001 f9c9 	bl	8002484 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010f2:	f001 fa1b 	bl	800252c <MX_TIM4_Init>
  MX_TIM8_Init();
 80010f6:	f001 facd 	bl	8002694 <MX_TIM8_Init>
  MX_TIM5_Init();
 80010fa:	f001 fa71 	bl	80025e0 <MX_TIM5_Init>
  MX_SPI1_Init();
 80010fe:	f001 f87d 	bl	80021fc <MX_SPI1_Init>
  MX_I2C2_Init();
 8001102:	f7ff ff73 	bl	8000fec <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  	esc_init();												//khởi tạo esc
 8001106:	f003 f933 	bl	8004370 <esc_init>
	HAL_Delay(100);
 800110a:	2064      	movs	r0, #100	@ 0x64
 800110c:	f003 fcc4 	bl	8004a98 <HAL_Delay>

	calib_esc();											//calib esc
 8001110:	f003 f93e 	bl	8004390 <calib_esc>
	HAL_Delay(1000);
 8001114:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001118:	f003 fcbe 	bl	8004a98 <HAL_Delay>

	BNO_init();												// kết nối cảm biến
 800111c:	f001 f804 	bl	8002128 <BNO_init>
	HAL_Delay(100);
 8001120:	2064      	movs	r0, #100	@ 0x64
 8001122:	f003 fcb9 	bl	8004a98 <HAL_Delay>

	sensor.euler(&sensor, &eul_raw);						// lấy giá trị góc euler
 8001126:	4b6c      	ldr	r3, [pc, #432]	@ (80012d8 <main+0x200>)
 8001128:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800112c:	496b      	ldr	r1, [pc, #428]	@ (80012dc <main+0x204>)
 800112e:	486a      	ldr	r0, [pc, #424]	@ (80012d8 <main+0x200>)
 8001130:	4798      	blx	r3
	euler_get_value_offset(&eul_data_offset, eul_raw);		// offset euler
 8001132:	4b6a      	ldr	r3, [pc, #424]	@ (80012dc <main+0x204>)
 8001134:	edd3 6a00 	vldr	s13, [r3]
 8001138:	ed93 7a01 	vldr	s14, [r3, #4]
 800113c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001140:	eeb0 0a66 	vmov.f32	s0, s13
 8001144:	eef0 0a47 	vmov.f32	s1, s14
 8001148:	eeb0 1a67 	vmov.f32	s2, s15
 800114c:	4864      	ldr	r0, [pc, #400]	@ (80012e0 <main+0x208>)
 800114e:	f000 ffcf 	bl	80020f0 <euler_get_value_offset>

	sensor.acc(&sensor, &acc_raw);							// lấy giá trị gia tốc
 8001152:	4b61      	ldr	r3, [pc, #388]	@ (80012d8 <main+0x200>)
 8001154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001156:	4963      	ldr	r1, [pc, #396]	@ (80012e4 <main+0x20c>)
 8001158:	485f      	ldr	r0, [pc, #380]	@ (80012d8 <main+0x200>)
 800115a:	4798      	blx	r3
	acc_get_value_offset(&acc_data_offset,  acc_raw);		// offset acc
 800115c:	4b61      	ldr	r3, [pc, #388]	@ (80012e4 <main+0x20c>)
 800115e:	edd3 6a00 	vldr	s13, [r3]
 8001162:	ed93 7a01 	vldr	s14, [r3, #4]
 8001166:	edd3 7a02 	vldr	s15, [r3, #8]
 800116a:	eeb0 0a66 	vmov.f32	s0, s13
 800116e:	eef0 0a47 	vmov.f32	s1, s14
 8001172:	eeb0 1a67 	vmov.f32	s2, s15
 8001176:	485c      	ldr	r0, [pc, #368]	@ (80012e8 <main+0x210>)
 8001178:	f000 ff29 	bl	8001fce <acc_get_value_offset>

	sensor.gyro(&sensor, &gyr_raw);							// lấy giá trị gia tốc
 800117c:	4b56      	ldr	r3, [pc, #344]	@ (80012d8 <main+0x200>)
 800117e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001180:	495a      	ldr	r1, [pc, #360]	@ (80012ec <main+0x214>)
 8001182:	4855      	ldr	r0, [pc, #340]	@ (80012d8 <main+0x200>)
 8001184:	4798      	blx	r3
	gyr_get_value_offset(&gyr_data_offset,  gyr_raw);		// offset acc
 8001186:	4b59      	ldr	r3, [pc, #356]	@ (80012ec <main+0x214>)
 8001188:	edd3 6a00 	vldr	s13, [r3]
 800118c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001190:	edd3 7a02 	vldr	s15, [r3, #8]
 8001194:	eeb0 0a66 	vmov.f32	s0, s13
 8001198:	eef0 0a47 	vmov.f32	s1, s14
 800119c:	eeb0 1a67 	vmov.f32	s2, s15
 80011a0:	4853      	ldr	r0, [pc, #332]	@ (80012f0 <main+0x218>)
 80011a2:	f000 ff58 	bl	8002056 <gyr_get_value_offset>

	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_1); 		// khởi tạo encoder timer3 kenh 1
 80011a6:	2100      	movs	r1, #0
 80011a8:	4852      	ldr	r0, [pc, #328]	@ (80012f4 <main+0x21c>)
 80011aa:	f006 fe57 	bl	8007e5c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_2); 		// khoi tao encoder timer3 kenh 2
 80011ae:	2104      	movs	r1, #4
 80011b0:	4850      	ldr	r0, [pc, #320]	@ (80012f4 <main+0x21c>)
 80011b2:	f006 fe53 	bl	8007e5c <HAL_TIM_Encoder_Start_IT>

	HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_1); 		// khởi tạo encoder timer8 kenh 1
 80011b6:	2100      	movs	r1, #0
 80011b8:	484f      	ldr	r0, [pc, #316]	@ (80012f8 <main+0x220>)
 80011ba:	f006 fe4f 	bl	8007e5c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_2); 		// khoi tao encoder timer8 kenh 2
 80011be:	2104      	movs	r1, #4
 80011c0:	484d      	ldr	r0, [pc, #308]	@ (80012f8 <main+0x220>)
 80011c2:	f006 fe4b 	bl	8007e5c <HAL_TIM_Encoder_Start_IT>

	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4);			// khởi tạo pwm timer4 kênh 4
 80011c6:	210c      	movs	r1, #12
 80011c8:	484c      	ldr	r0, [pc, #304]	@ (80012fc <main+0x224>)
 80011ca:	f006 fc8b 	bl	8007ae4 <HAL_TIM_PWM_Start_IT>

	HAL_TIM_Base_Start_IT(&htim2);						  	// khởi tạo timer2 cho viec ngat timer
 80011ce:	484c      	ldr	r0, [pc, #304]	@ (8001300 <main+0x228>)
 80011d0:	f006 fbc8 	bl	8007964 <HAL_TIM_Base_Start_IT>

	Fcut = 1 - exp(-0.01*2.0f*M_PI*CutOffFrequency);
 80011d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001304 <main+0x22c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f959 	bl	8000490 <__aeabi_f2d>
 80011de:	a33c      	add	r3, pc, #240	@ (adr r3, 80012d0 <main+0x1f8>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff f9ac 	bl	8000540 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	ec43 2b17 	vmov	d7, r2, r3
 80011f0:	eeb0 0a47 	vmov.f32	s0, s14
 80011f4:	eef0 0a67 	vmov.f32	s1, s15
 80011f8:	f007 fda2 	bl	8008d40 <exp>
 80011fc:	ec53 2b10 	vmov	r2, r3, d0
 8001200:	f04f 0000 	mov.w	r0, #0
 8001204:	4940      	ldr	r1, [pc, #256]	@ (8001308 <main+0x230>)
 8001206:	f7fe ffe3 	bl	80001d0 <__aeabi_dsub>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f7ff fc6d 	bl	8000af0 <__aeabi_d2f>
 8001216:	4603      	mov	r3, r0
 8001218:	4a3c      	ldr	r2, [pc, #240]	@ (800130c <main+0x234>)
 800121a:	6013      	str	r3, [r2, #0]

#ifdef RECEIVER
	nrf24l01p_rx_init(2500, _1Mbps);
#endif
#ifdef TRANSMITTER							//gửi dữ liệu RF
	nrf24l01p_tx_init(2500, _1Mbps);
 800121c:	2100      	movs	r1, #0
 800121e:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001222:	f003 f987 	bl	8004534 <nrf24l01p_tx_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1)
 8001226:	2180      	movs	r1, #128	@ 0x80
 8001228:	4839      	ldr	r0, [pc, #228]	@ (8001310 <main+0x238>)
 800122a:	f003 ff07 	bl	800503c <HAL_GPIO_ReadPin>
 800122e:	4603      	mov	r3, r0
 8001230:	2b01      	cmp	r3, #1
 8001232:	d10b      	bne.n	800124c <main+0x174>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800123a:	4836      	ldr	r0, [pc, #216]	@ (8001314 <main+0x23c>)
 800123c:	f003 ff16 	bl	800506c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 1200);
 8001240:	4b35      	ldr	r3, [pc, #212]	@ (8001318 <main+0x240>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8001248:	641a      	str	r2, [r3, #64]	@ 0x40
 800124a:	e009      	b.n	8001260 <main+0x188>
	  }
	  else
	  {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001252:	4830      	ldr	r0, [pc, #192]	@ (8001314 <main+0x23c>)
 8001254:	f003 ff0a 	bl	800506c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 0);
 8001258:	4b2f      	ldr	r3, [pc, #188]	@ (8001318 <main+0x240>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2200      	movs	r2, #0
 800125e:	641a      	str	r2, [r3, #64]	@ 0x40
	#ifdef RECEIVER
	  // Nothing to do
	#endif

	#ifdef TRANSMITTER
	 data_out.eul_roll_deg		= eul_roll_deg;
 8001260:	4b2e      	ldr	r3, [pc, #184]	@ (800131c <main+0x244>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a2e      	ldr	r2, [pc, #184]	@ (8001320 <main+0x248>)
 8001266:	6053      	str	r3, [r2, #4]
	 data_out.eul_pitch_deg 	= eul_pitch_deg;
 8001268:	4b2e      	ldr	r3, [pc, #184]	@ (8001324 <main+0x24c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a2c      	ldr	r2, [pc, #176]	@ (8001320 <main+0x248>)
 800126e:	6093      	str	r3, [r2, #8]
	 data_out.acc_x_filter 		= acc_x_filter;
 8001270:	4b2d      	ldr	r3, [pc, #180]	@ (8001328 <main+0x250>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a2a      	ldr	r2, [pc, #168]	@ (8001320 <main+0x248>)
 8001276:	60d3      	str	r3, [r2, #12]
	 data_out.omega_filter		= omega_filter;
 8001278:	4b2c      	ldr	r3, [pc, #176]	@ (800132c <main+0x254>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a28      	ldr	r2, [pc, #160]	@ (8001320 <main+0x248>)
 800127e:	6113      	str	r3, [r2, #16]
	 data_out.angle 			= angle;
 8001280:	4b2b      	ldr	r3, [pc, #172]	@ (8001330 <main+0x258>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a26      	ldr	r2, [pc, #152]	@ (8001320 <main+0x248>)
 8001286:	6153      	str	r3, [r2, #20]
	 data_out.angle_pendulum 	= angle_pendulum;
 8001288:	4b2a      	ldr	r3, [pc, #168]	@ (8001334 <main+0x25c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a24      	ldr	r2, [pc, #144]	@ (8001320 <main+0x248>)
 800128e:	6193      	str	r3, [r2, #24]
	 data_out.SP_angle 			= SP_angle;
 8001290:	4b29      	ldr	r3, [pc, #164]	@ (8001338 <main+0x260>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a22      	ldr	r2, [pc, #136]	@ (8001320 <main+0x248>)
 8001296:	61d3      	str	r3, [r2, #28]
	 data_out.gyr_y_deg 		= gyr_y_deg;
 8001298:	4b28      	ldr	r3, [pc, #160]	@ (800133c <main+0x264>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a20      	ldr	r2, [pc, #128]	@ (8001320 <main+0x248>)
 800129e:	6213      	str	r3, [r2, #32]
	 _pack_data(tx_data, data_out);
 80012a0:	4e1f      	ldr	r6, [pc, #124]	@ (8001320 <main+0x248>)
 80012a2:	466d      	mov	r5, sp
 80012a4:	f106 040c 	add.w	r4, r6, #12
 80012a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80012b4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80012b8:	4821      	ldr	r0, [pc, #132]	@ (8001340 <main+0x268>)
 80012ba:	f003 f81a 	bl	80042f2 <_pack_data>
	 nrf24l01p_tx_transmit(tx_data);
 80012be:	4820      	ldr	r0, [pc, #128]	@ (8001340 <main+0x268>)
 80012c0:	f003 f963 	bl	800458a <nrf24l01p_tx_transmit>
	 HAL_Delay(50);
 80012c4:	2032      	movs	r0, #50	@ 0x32
 80012c6:	f003 fbe7 	bl	8004a98 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1)
 80012ca:	e7ac      	b.n	8001226 <main+0x14e>
 80012cc:	f3af 8000 	nop.w
 80012d0:	9217271a 	.word	0x9217271a
 80012d4:	bfb015bf 	.word	0xbfb015bf
 80012d8:	20000108 	.word	0x20000108
 80012dc:	200001b8 	.word	0x200001b8
 80012e0:	200001d0 	.word	0x200001d0
 80012e4:	200001dc 	.word	0x200001dc
 80012e8:	200001f4 	.word	0x200001f4
 80012ec:	20000200 	.word	0x20000200
 80012f0:	20000218 	.word	0x20000218
 80012f4:	200003b0 	.word	0x200003b0
 80012f8:	20000488 	.word	0x20000488
 80012fc:	200003f8 	.word	0x200003f8
 8001300:	20000368 	.word	0x20000368
 8001304:	20000024 	.word	0x20000024
 8001308:	3ff00000 	.word	0x3ff00000
 800130c:	200002c8 	.word	0x200002c8
 8001310:	40020400 	.word	0x40020400
 8001314:	40020c00 	.word	0x40020c00
 8001318:	20000440 	.word	0x20000440
 800131c:	20000238 	.word	0x20000238
 8001320:	200002ec 	.word	0x200002ec
 8001324:	2000023c 	.word	0x2000023c
 8001328:	20000224 	.word	0x20000224
 800132c:	20000284 	.word	0x20000284
 8001330:	20000288 	.word	0x20000288
 8001334:	2000028c 	.word	0x2000028c
 8001338:	200002a4 	.word	0x200002a4
 800133c:	20000228 	.word	0x20000228
 8001340:	200002cc 	.word	0x200002cc

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b094      	sub	sp, #80	@ 0x50
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	2230      	movs	r2, #48	@ 0x30
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f007 fc7e 	bl	8008c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	4b28      	ldr	r3, [pc, #160]	@ (8001410 <SystemClock_Config+0xcc>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001370:	4a27      	ldr	r2, [pc, #156]	@ (8001410 <SystemClock_Config+0xcc>)
 8001372:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001376:	6413      	str	r3, [r2, #64]	@ 0x40
 8001378:	4b25      	ldr	r3, [pc, #148]	@ (8001410 <SystemClock_Config+0xcc>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	4b22      	ldr	r3, [pc, #136]	@ (8001414 <SystemClock_Config+0xd0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a21      	ldr	r2, [pc, #132]	@ (8001414 <SystemClock_Config+0xd0>)
 800138e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b1f      	ldr	r3, [pc, #124]	@ (8001414 <SystemClock_Config+0xd0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013a0:	2301      	movs	r3, #1
 80013a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013aa:	2302      	movs	r3, #2
 80013ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013b4:	2304      	movs	r3, #4
 80013b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013b8:	23a8      	movs	r3, #168	@ 0xa8
 80013ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013bc:	2302      	movs	r3, #2
 80013be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013c0:	2304      	movs	r3, #4
 80013c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c4:	f107 0320 	add.w	r3, r7, #32
 80013c8:	4618      	mov	r0, r3
 80013ca:	f005 f825 	bl	8006418 <HAL_RCC_OscConfig>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013d4:	f000 ff0c 	bl	80021f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d8:	230f      	movs	r3, #15
 80013da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013dc:	2302      	movs	r3, #2
 80013de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	2105      	movs	r1, #5
 80013f6:	4618      	mov	r0, r3
 80013f8:	f005 fa86 	bl	8006908 <HAL_RCC_ClockConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001402:	f000 fef5 	bl	80021f0 <Error_Handler>
  }
}
 8001406:	bf00      	nop
 8001408:	3750      	adds	r7, #80	@ 0x50
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800
 8001414:	40007000 	.word	0x40007000

08001418 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)	// hàm ngắt timer 2
{
 8001418:	b5b0      	push	{r4, r5, r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) // 1[ms]		// kiểm tra vào đúng ngắt không
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001428:	f040 82d3 	bne.w	80019d2 <HAL_TIM_PeriodElapsedCallback+0x5ba>
	{
		Wave_BNO++;								// cộng bộ đếm tràn 10ms
 800142c:	4bb0      	ldr	r3, [pc, #704]	@ (80016f0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800142e:	edd3 7a00 	vldr	s15, [r3]
 8001432:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001436:	ee77 7a87 	vadd.f32	s15, s15, s14
 800143a:	4bad      	ldr	r3, [pc, #692]	@ (80016f0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800143c:	edc3 7a00 	vstr	s15, [r3]

		encoder_omega = __HAL_TIM_GET_COUNTER(&htim3);  // lay gia tri encoder o time3
 8001440:	4bac      	ldr	r3, [pc, #688]	@ (80016f4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001446:	b21a      	sxth	r2, r3
 8001448:	4bab      	ldr	r3, [pc, #684]	@ (80016f8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800144a:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim3, 0);				// reset htim3
 800144c:	4ba9      	ldr	r3, [pc, #676]	@ (80016f4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2200      	movs	r2, #0
 8001452:	625a      	str	r2, [r3, #36]	@ 0x24
		encoder_angle = __HAL_TIM_GET_COUNTER(&htim8);  // lay gia tri encoder o time8
 8001454:	4ba9      	ldr	r3, [pc, #676]	@ (80016fc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145a:	b21a      	sxth	r2, r3
 800145c:	4ba8      	ldr	r3, [pc, #672]	@ (8001700 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800145e:	801a      	strh	r2, [r3, #0]
		dt = 0.001f;									// thời gian lấy mẫu dt
 8001460:	4ba8      	ldr	r3, [pc, #672]	@ (8001704 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001462:	4aa9      	ldr	r2, [pc, #676]	@ (8001708 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001464:	601a      	str	r2, [r3, #0]
		//chong tran xung htim3 (OMEGA)
		err_pulse_omega = encoder_omega - encoder_pre_omega;		// sai số xung omega
 8001466:	4ba4      	ldr	r3, [pc, #656]	@ (80016f8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146c:	461a      	mov	r2, r3
 800146e:	4ba7      	ldr	r3, [pc, #668]	@ (800170c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f7fe fff8 	bl	800046c <__aeabi_i2d>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	49a3      	ldr	r1, [pc, #652]	@ (8001710 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001482:	e9c1 2300 	strd	r2, r3, [r1]
		if(err_pulse_omega < -32000)
 8001486:	4ba2      	ldr	r3, [pc, #648]	@ (8001710 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001488:	e9d3 0100 	ldrd	r0, r1, [r3]
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	4ba0      	ldr	r3, [pc, #640]	@ (8001714 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001492:	f7ff fac7 	bl	8000a24 <__aeabi_dcmplt>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00c      	beq.n	80014b6 <HAL_TIM_PeriodElapsedCallback+0x9e>
		{
			Wave_pulse_omega = Wave_pulse_omega +1;
 800149c:	4b9e      	ldr	r3, [pc, #632]	@ (8001718 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800149e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	4b9d      	ldr	r3, [pc, #628]	@ (800171c <HAL_TIM_PeriodElapsedCallback+0x304>)
 80014a8:	f7fe fe94 	bl	80001d4 <__adddf3>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4999      	ldr	r1, [pc, #612]	@ (8001718 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80014b2:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(err_pulse_omega > 32000)
 80014b6:	4b96      	ldr	r3, [pc, #600]	@ (8001710 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80014b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	4b97      	ldr	r3, [pc, #604]	@ (8001720 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80014c2:	f7ff facd 	bl	8000a60 <__aeabi_dcmpgt>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00c      	beq.n	80014e6 <HAL_TIM_PeriodElapsedCallback+0xce>
		{
			Wave_pulse_omega = Wave_pulse_omega -1;
 80014cc:	4b92      	ldr	r3, [pc, #584]	@ (8001718 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80014ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	4b91      	ldr	r3, [pc, #580]	@ (800171c <HAL_TIM_PeriodElapsedCallback+0x304>)
 80014d8:	f7fe fe7a 	bl	80001d0 <__aeabi_dsub>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	498d      	ldr	r1, [pc, #564]	@ (8001718 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80014e2:	e9c1 2300 	strd	r2, r3, [r1]
		}
		pulse_omega = encoder_omega + (Wave_pulse_omega * 65535.0f );
 80014e6:	4b84      	ldr	r3, [pc, #528]	@ (80016f8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80014e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe ffbd 	bl	800046c <__aeabi_i2d>
 80014f2:	4604      	mov	r4, r0
 80014f4:	460d      	mov	r5, r1
 80014f6:	4b88      	ldr	r3, [pc, #544]	@ (8001718 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80014f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014fc:	a37a      	add	r3, pc, #488	@ (adr r3, 80016e8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	f7ff f81d 	bl	8000540 <__aeabi_dmul>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4620      	mov	r0, r4
 800150c:	4629      	mov	r1, r5
 800150e:	f7fe fe61 	bl	80001d4 <__adddf3>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4983      	ldr	r1, [pc, #524]	@ (8001724 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001518:	e9c1 2300 	strd	r2, r3, [r1]
		encoder_pre_omega = encoder_omega;
 800151c:	4b76      	ldr	r3, [pc, #472]	@ (80016f8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800151e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001522:	4b7a      	ldr	r3, [pc, #488]	@ (800170c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001524:	801a      	strh	r2, [r3, #0]
		Wave_pulse_omega = 0;
 8001526:	497c      	ldr	r1, [pc, #496]	@ (8001718 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	e9c1 2300 	strd	r2, r3, [r1]

		//chong tran xung htim8 (ANGLE)
		err_pulse_angle = encoder_angle - encoder_pre_angle;
 8001534:	4b72      	ldr	r3, [pc, #456]	@ (8001700 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153a:	461a      	mov	r2, r3
 800153c:	4b7a      	ldr	r3, [pc, #488]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800153e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe ff91 	bl	800046c <__aeabi_i2d>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4977      	ldr	r1, [pc, #476]	@ (800172c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001550:	e9c1 2300 	strd	r2, r3, [r1]
		if (err_pulse_angle < -32000)
 8001554:	4b75      	ldr	r3, [pc, #468]	@ (800172c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001556:	e9d3 0100 	ldrd	r0, r1, [r3]
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	4b6d      	ldr	r3, [pc, #436]	@ (8001714 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001560:	f7ff fa60 	bl	8000a24 <__aeabi_dcmplt>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00d      	beq.n	8001586 <HAL_TIM_PeriodElapsedCallback+0x16e>
		{
			Wave_pulse_angle = Wave_pulse_angle +1;
 800156a:	4b71      	ldr	r3, [pc, #452]	@ (8001730 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800156c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	4b69      	ldr	r3, [pc, #420]	@ (800171c <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001576:	f7fe fe2d 	bl	80001d4 <__adddf3>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	496c      	ldr	r1, [pc, #432]	@ (8001730 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001580:	e9c1 2300 	strd	r2, r3, [r1]
 8001584:	e017      	b.n	80015b6 <HAL_TIM_PeriodElapsedCallback+0x19e>
		}
		else if(err_pulse_angle > 32000)
 8001586:	4b69      	ldr	r3, [pc, #420]	@ (800172c <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001588:	e9d3 0100 	ldrd	r0, r1, [r3]
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	4b63      	ldr	r3, [pc, #396]	@ (8001720 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001592:	f7ff fa65 	bl	8000a60 <__aeabi_dcmpgt>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00c      	beq.n	80015b6 <HAL_TIM_PeriodElapsedCallback+0x19e>
		{
			Wave_pulse_angle = Wave_pulse_angle -1;
 800159c:	4b64      	ldr	r3, [pc, #400]	@ (8001730 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800159e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	4b5d      	ldr	r3, [pc, #372]	@ (800171c <HAL_TIM_PeriodElapsedCallback+0x304>)
 80015a8:	f7fe fe12 	bl	80001d0 <__aeabi_dsub>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	495f      	ldr	r1, [pc, #380]	@ (8001730 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80015b2:	e9c1 2300 	strd	r2, r3, [r1]
		}
		pulse_angle = encoder_angle + (Wave_pulse_angle * 65535.0f);
 80015b6:	4b52      	ldr	r3, [pc, #328]	@ (8001700 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80015b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ff55 	bl	800046c <__aeabi_i2d>
 80015c2:	4604      	mov	r4, r0
 80015c4:	460d      	mov	r5, r1
 80015c6:	4b5a      	ldr	r3, [pc, #360]	@ (8001730 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80015c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015cc:	a346      	add	r3, pc, #280	@ (adr r3, 80016e8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7fe ffb5 	bl	8000540 <__aeabi_dmul>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4620      	mov	r0, r4
 80015dc:	4629      	mov	r1, r5
 80015de:	f7fe fdf9 	bl	80001d4 <__adddf3>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4953      	ldr	r1, [pc, #332]	@ (8001734 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80015e8:	e9c1 2300 	strd	r2, r3, [r1]
		encoder_pre_angle = encoder_angle;
 80015ec:	4b44      	ldr	r3, [pc, #272]	@ (8001700 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80015ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80015f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001728 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80015f4:	801a      	strh	r2, [r3, #0]
		Wave_pulse_angle = 0;
 80015f6:	494e      	ldr	r1, [pc, #312]	@ (8001730 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	f04f 0300 	mov.w	r3, #0
 8001600:	e9c1 2300 	strd	r2, r3, [r1]

		//Cal ANGlE & OMEGA
		angle     		= pulse_angle * 360.0f / 2400.0f;			    // tính vị trí động cơ
 8001604:	4b4b      	ldr	r3, [pc, #300]	@ (8001734 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001606:	e9d3 0100 	ldrd	r0, r1, [r3]
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	4b4a      	ldr	r3, [pc, #296]	@ (8001738 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001610:	f7fe ff96 	bl	8000540 <__aeabi_dmul>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	4b46      	ldr	r3, [pc, #280]	@ (800173c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001622:	f7ff f8b7 	bl	8000794 <__aeabi_ddiv>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	f7ff fa5f 	bl	8000af0 <__aeabi_d2f>
 8001632:	4603      	mov	r3, r0
 8001634:	4a42      	ldr	r2, [pc, #264]	@ (8001740 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001636:	6013      	str	r3, [r2, #0]
		angle_pendulum  = angle / 4;									// từ góc dco qua góc con lắc
 8001638:	4b41      	ldr	r3, [pc, #260]	@ (8001740 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800163a:	ed93 7a00 	vldr	s14, [r3]
 800163e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001642:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001646:	4b3f      	ldr	r3, [pc, #252]	@ (8001744 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001648:	edc3 7a00 	vstr	s15, [r3]

		omega_raw 		= (pulse_omega * 60.0f) / (dt*2400.0f);   		// tính tốc độ động cơ (thô)
 800164c:	4b35      	ldr	r3, [pc, #212]	@ (8001724 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800164e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	4b3c      	ldr	r3, [pc, #240]	@ (8001748 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001658:	f7fe ff72 	bl	8000540 <__aeabi_dmul>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4614      	mov	r4, r2
 8001662:	461d      	mov	r5, r3
 8001664:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800174c <HAL_TIM_PeriodElapsedCallback+0x334>
 800166e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001672:	ee17 0a90 	vmov	r0, s15
 8001676:	f7fe ff0b 	bl	8000490 <__aeabi_f2d>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4620      	mov	r0, r4
 8001680:	4629      	mov	r1, r5
 8001682:	f7ff f887 	bl	8000794 <__aeabi_ddiv>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	f7ff fa2f 	bl	8000af0 <__aeabi_d2f>
 8001692:	4603      	mov	r3, r0
 8001694:	4a2e      	ldr	r2, [pc, #184]	@ (8001750 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001696:	6013      	str	r3, [r2, #0]
		omega_filter 	= __low_pass_filter(omega_raw, omega_filter , 0.4f );  // lọc omega
 8001698:	4b2d      	ldr	r3, [pc, #180]	@ (8001750 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	4b2d      	ldr	r3, [pc, #180]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80016a0:	ed93 7a00 	vldr	s14, [r3]
 80016a4:	ed9f 1a2c 	vldr	s2, [pc, #176]	@ 8001758 <HAL_TIM_PeriodElapsedCallback+0x340>
 80016a8:	eef0 0a47 	vmov.f32	s1, s14
 80016ac:	eeb0 0a67 	vmov.f32	s0, s15
 80016b0:	f000 fd7c 	bl	80021ac <__low_pass_filter>
 80016b4:	eef0 7a40 	vmov.f32	s15, s0
 80016b8:	4b26      	ldr	r3, [pc, #152]	@ (8001754 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80016ba:	edc3 7a00 	vstr	s15, [r3]

		// PID controller
		PID_calculator();							//tính toán giá trị đầu vào và đưa ra giá trị pid
 80016be:	f000 fbaf 	bl	8001e20 <PID_calculator>
		MotorDriver(Output_PID);					// hàm điều khiển động cơ servo
 80016c2:	4b26      	ldr	r3, [pc, #152]	@ (800175c <HAL_TIM_PeriodElapsedCallback+0x344>)
 80016c4:	edd3 7a00 	vldr	s15, [r3]
 80016c8:	eeb0 0a67 	vmov.f32	s0, s15
 80016cc:	f002 fe78 	bl	80043c0 <MotorDriver>

		if (Wave_BNO > 9)    // 10 [ms]
 80016d0:	4b07      	ldr	r3, [pc, #28]	@ (80016f0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80016d2:	edd3 7a00 	vldr	s15, [r3]
 80016d6:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 80016da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e2:	dc3d      	bgt.n	8001760 <HAL_TIM_PeriodElapsedCallback+0x348>
			}

			CALCULATOR(0.01f);										//hàm con tính toán SP omega và angle
		}
	}
}
 80016e4:	e175      	b.n	80019d2 <HAL_TIM_PeriodElapsedCallback+0x5ba>
 80016e6:	bf00      	nop
 80016e8:	00000000 	.word	0x00000000
 80016ec:	40efffe0 	.word	0x40efffe0
 80016f0:	20000240 	.word	0x20000240
 80016f4:	200003b0 	.word	0x200003b0
 80016f8:	20000278 	.word	0x20000278
 80016fc:	20000488 	.word	0x20000488
 8001700:	2000027c 	.word	0x2000027c
 8001704:	20000244 	.word	0x20000244
 8001708:	3a83126f 	.word	0x3a83126f
 800170c:	2000027a 	.word	0x2000027a
 8001710:	20000260 	.word	0x20000260
 8001714:	c0df4000 	.word	0xc0df4000
 8001718:	20000248 	.word	0x20000248
 800171c:	3ff00000 	.word	0x3ff00000
 8001720:	40df4000 	.word	0x40df4000
 8001724:	20000258 	.word	0x20000258
 8001728:	2000027e 	.word	0x2000027e
 800172c:	20000270 	.word	0x20000270
 8001730:	20000250 	.word	0x20000250
 8001734:	20000268 	.word	0x20000268
 8001738:	40768000 	.word	0x40768000
 800173c:	40a2c000 	.word	0x40a2c000
 8001740:	20000288 	.word	0x20000288
 8001744:	2000028c 	.word	0x2000028c
 8001748:	404e0000 	.word	0x404e0000
 800174c:	45160000 	.word	0x45160000
 8001750:	20000280 	.word	0x20000280
 8001754:	20000284 	.word	0x20000284
 8001758:	3ecccccd 	.word	0x3ecccccd
 800175c:	2000029c 	.word	0x2000029c
			Wave_BNO = 0;							// biến đếm tràn
 8001760:	4ba1      	ldr	r3, [pc, #644]	@ (80019e8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
			sensor.euler(&sensor, &eul_raw);  		// read value eul for sensor
 8001768:	4ba0      	ldr	r3, [pc, #640]	@ (80019ec <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800176a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800176e:	49a0      	ldr	r1, [pc, #640]	@ (80019f0 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001770:	489e      	ldr	r0, [pc, #632]	@ (80019ec <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8001772:	4798      	blx	r3
			sensor.acc  (&sensor, &acc_raw);		// read value acc for sensor
 8001774:	4b9d      	ldr	r3, [pc, #628]	@ (80019ec <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8001776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001778:	499e      	ldr	r1, [pc, #632]	@ (80019f4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800177a:	489c      	ldr	r0, [pc, #624]	@ (80019ec <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800177c:	4798      	blx	r3
			sensor.gyro (&sensor, &gyr_raw);		// read value gyr for sensor
 800177e:	4b9b      	ldr	r3, [pc, #620]	@ (80019ec <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8001780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001782:	499d      	ldr	r1, [pc, #628]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001784:	4899      	ldr	r0, [pc, #612]	@ (80019ec <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8001786:	4798      	blx	r3
			eul_roll_filter  = eul_roll_filter + (eul_caculate.roll - eul_roll_filter) * Fcut;  	// lọc LPF
 8001788:	4b9c      	ldr	r3, [pc, #624]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800178a:	ed93 7a00 	vldr	s14, [r3]
 800178e:	4b9c      	ldr	r3, [pc, #624]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001798:	4b9a      	ldr	r3, [pc, #616]	@ (8001a04 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800179a:	edd3 7a00 	vldr	s15, [r3]
 800179e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017a2:	4b97      	ldr	r3, [pc, #604]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80017a4:	edd3 7a00 	vldr	s15, [r3]
 80017a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ac:	4b94      	ldr	r3, [pc, #592]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80017ae:	edc3 7a00 	vstr	s15, [r3]
			eul_roll_deg     = eul_roll_filter * (180 / M_PI);		// rad -> deg
 80017b2:	4b93      	ldr	r3, [pc, #588]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fe6a 	bl	8000490 <__aeabi_f2d>
 80017bc:	a388      	add	r3, pc, #544	@ (adr r3, 80019e0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	f7fe febd 	bl	8000540 <__aeabi_dmul>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	f7ff f98f 	bl	8000af0 <__aeabi_d2f>
 80017d2:	4603      	mov	r3, r0
 80017d4:	4a8c      	ldr	r2, [pc, #560]	@ (8001a08 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 80017d6:	6013      	str	r3, [r2, #0]
			eul_pitch_filter = eul_pitch_filter + (eul_caculate.pitch - eul_pitch_filter) * Fcut;	// lọc LPF
 80017d8:	4b88      	ldr	r3, [pc, #544]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80017da:	ed93 7a01 	vldr	s14, [r3, #4]
 80017de:	4b8b      	ldr	r3, [pc, #556]	@ (8001a0c <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80017e0:	edd3 7a00 	vldr	s15, [r3]
 80017e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017e8:	4b86      	ldr	r3, [pc, #536]	@ (8001a04 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 80017ea:	edd3 7a00 	vldr	s15, [r3]
 80017ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f2:	4b86      	ldr	r3, [pc, #536]	@ (8001a0c <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017fc:	4b83      	ldr	r3, [pc, #524]	@ (8001a0c <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80017fe:	edc3 7a00 	vstr	s15, [r3]
			eul_pitch_deg    = eul_pitch_filter * (180 / M_PI);		// rad -> deg
 8001802:	4b82      	ldr	r3, [pc, #520]	@ (8001a0c <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fe42 	bl	8000490 <__aeabi_f2d>
 800180c:	a374      	add	r3, pc, #464	@ (adr r3, 80019e0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001812:	f7fe fe95 	bl	8000540 <__aeabi_dmul>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	f7ff f967 	bl	8000af0 <__aeabi_d2f>
 8001822:	4603      	mov	r3, r0
 8001824:	4a7a      	ldr	r2, [pc, #488]	@ (8001a10 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001826:	6013      	str	r3, [r2, #0]
			gyr_y_filter	 = gyr_y_filter + (gyr_caculate.y - gyr_y_filter) * Fcut;				// lọc LPF
 8001828:	4b7a      	ldr	r3, [pc, #488]	@ (8001a14 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800182a:	ed93 7a01 	vldr	s14, [r3, #4]
 800182e:	4b7a      	ldr	r3, [pc, #488]	@ (8001a18 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001838:	4b72      	ldr	r3, [pc, #456]	@ (8001a04 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800183a:	edd3 7a00 	vldr	s15, [r3]
 800183e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001842:	4b75      	ldr	r3, [pc, #468]	@ (8001a18 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001844:	edd3 7a00 	vldr	s15, [r3]
 8001848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800184c:	4b72      	ldr	r3, [pc, #456]	@ (8001a18 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800184e:	edc3 7a00 	vstr	s15, [r3]
			gyr_y_deg  	  	 =  -(gyr_y_filter * (180 / M_PI));
 8001852:	4b71      	ldr	r3, [pc, #452]	@ (8001a18 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe1a 	bl	8000490 <__aeabi_f2d>
 800185c:	a360      	add	r3, pc, #384	@ (adr r3, 80019e0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe fe6d 	bl	8000540 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f7ff f93f 	bl	8000af0 <__aeabi_d2f>
 8001872:	4603      	mov	r3, r0
 8001874:	ee07 3a90 	vmov	s15, r3
 8001878:	eef1 7a67 	vneg.f32	s15, s15
 800187c:	4b67      	ldr	r3, [pc, #412]	@ (8001a1c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800187e:	edc3 7a00 	vstr	s15, [r3]
			acc_x_filter	 = acc_x_filter + (acc_caculate.x - acc_x_filter) * Fcut;				// lọc LPF
 8001882:	4b67      	ldr	r3, [pc, #412]	@ (8001a20 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8001884:	ed93 7a00 	vldr	s14, [r3]
 8001888:	4b66      	ldr	r3, [pc, #408]	@ (8001a24 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800188a:	edd3 7a00 	vldr	s15, [r3]
 800188e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001892:	4b5c      	ldr	r3, [pc, #368]	@ (8001a04 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001894:	edd3 7a00 	vldr	s15, [r3]
 8001898:	ee27 7a27 	vmul.f32	s14, s14, s15
 800189c:	4b61      	ldr	r3, [pc, #388]	@ (8001a24 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800189e:	edd3 7a00 	vldr	s15, [r3]
 80018a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001a24 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 80018a8:	edc3 7a00 	vstr	s15, [r3]
			calib_euler(&eul_caculate,  eul_raw,  eul_data_offset);		// offset giá trị euler
 80018ac:	4b5e      	ldr	r3, [pc, #376]	@ (8001a28 <HAL_TIM_PeriodElapsedCallback+0x610>)
 80018ae:	ed93 5a00 	vldr	s10, [r3]
 80018b2:	edd3 5a01 	vldr	s11, [r3, #4]
 80018b6:	ed93 6a02 	vldr	s12, [r3, #8]
 80018ba:	4b4d      	ldr	r3, [pc, #308]	@ (80019f0 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80018bc:	edd3 6a00 	vldr	s13, [r3]
 80018c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80018c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80018c8:	eef0 1a45 	vmov.f32	s3, s10
 80018cc:	eeb0 2a65 	vmov.f32	s4, s11
 80018d0:	eef0 2a46 	vmov.f32	s5, s12
 80018d4:	eeb0 0a66 	vmov.f32	s0, s13
 80018d8:	eef0 0a47 	vmov.f32	s1, s14
 80018dc:	eeb0 1a67 	vmov.f32	s2, s15
 80018e0:	4846      	ldr	r0, [pc, #280]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80018e2:	f000 fbd1 	bl	8002088 <calib_euler>
			calib_acc  (&acc_caculate,  acc_raw,  acc_data_offset);		// offset giá trị acc
 80018e6:	4b51      	ldr	r3, [pc, #324]	@ (8001a2c <HAL_TIM_PeriodElapsedCallback+0x614>)
 80018e8:	ed93 5a00 	vldr	s10, [r3]
 80018ec:	edd3 5a01 	vldr	s11, [r3, #4]
 80018f0:	ed93 6a02 	vldr	s12, [r3, #8]
 80018f4:	4b3f      	ldr	r3, [pc, #252]	@ (80019f4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80018f6:	edd3 6a00 	vldr	s13, [r3]
 80018fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80018fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001902:	eef0 1a45 	vmov.f32	s3, s10
 8001906:	eeb0 2a65 	vmov.f32	s4, s11
 800190a:	eef0 2a46 	vmov.f32	s5, s12
 800190e:	eeb0 0a66 	vmov.f32	s0, s13
 8001912:	eef0 0a47 	vmov.f32	s1, s14
 8001916:	eeb0 1a67 	vmov.f32	s2, s15
 800191a:	4841      	ldr	r0, [pc, #260]	@ (8001a20 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800191c:	f000 fb2c 	bl	8001f78 <calib_acc>
			calib_gyr  (&gyr_caculate,  gyr_raw,  gyr_data_offset);		// offset giá trị gyr
 8001920:	4b43      	ldr	r3, [pc, #268]	@ (8001a30 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8001922:	ed93 5a00 	vldr	s10, [r3]
 8001926:	edd3 5a01 	vldr	s11, [r3, #4]
 800192a:	ed93 6a02 	vldr	s12, [r3, #8]
 800192e:	4b32      	ldr	r3, [pc, #200]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001930:	edd3 6a00 	vldr	s13, [r3]
 8001934:	ed93 7a01 	vldr	s14, [r3, #4]
 8001938:	edd3 7a02 	vldr	s15, [r3, #8]
 800193c:	eef0 1a45 	vmov.f32	s3, s10
 8001940:	eeb0 2a65 	vmov.f32	s4, s11
 8001944:	eef0 2a46 	vmov.f32	s5, s12
 8001948:	eeb0 0a66 	vmov.f32	s0, s13
 800194c:	eef0 0a47 	vmov.f32	s1, s14
 8001950:	eeb0 1a67 	vmov.f32	s2, s15
 8001954:	482f      	ldr	r0, [pc, #188]	@ (8001a14 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001956:	f000 fb53 	bl	8002000 <calib_gyr>
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) == 1)
 800195a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800195e:	4835      	ldr	r0, [pc, #212]	@ (8001a34 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8001960:	f003 fb6c 	bl	800503c <HAL_GPIO_ReadPin>
 8001964:	4603      	mov	r3, r0
 8001966:	2b01      	cmp	r3, #1
 8001968:	d12f      	bne.n	80019ca <HAL_TIM_PeriodElapsedCallback+0x5b2>
				euler_get_value_offset(&eul_data_offset, eul_raw);  	//lấy giá trị offset
 800196a:	4b21      	ldr	r3, [pc, #132]	@ (80019f0 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 800196c:	edd3 6a00 	vldr	s13, [r3]
 8001970:	ed93 7a01 	vldr	s14, [r3, #4]
 8001974:	edd3 7a02 	vldr	s15, [r3, #8]
 8001978:	eeb0 0a66 	vmov.f32	s0, s13
 800197c:	eef0 0a47 	vmov.f32	s1, s14
 8001980:	eeb0 1a67 	vmov.f32	s2, s15
 8001984:	4828      	ldr	r0, [pc, #160]	@ (8001a28 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8001986:	f000 fbb3 	bl	80020f0 <euler_get_value_offset>
				acc_get_value_offset  (&acc_data_offset, acc_raw);		//lấy giá trị offset
 800198a:	4b1a      	ldr	r3, [pc, #104]	@ (80019f4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800198c:	edd3 6a00 	vldr	s13, [r3]
 8001990:	ed93 7a01 	vldr	s14, [r3, #4]
 8001994:	edd3 7a02 	vldr	s15, [r3, #8]
 8001998:	eeb0 0a66 	vmov.f32	s0, s13
 800199c:	eef0 0a47 	vmov.f32	s1, s14
 80019a0:	eeb0 1a67 	vmov.f32	s2, s15
 80019a4:	4821      	ldr	r0, [pc, #132]	@ (8001a2c <HAL_TIM_PeriodElapsedCallback+0x614>)
 80019a6:	f000 fb12 	bl	8001fce <acc_get_value_offset>
				gyr_get_value_offset  (&gyr_data_offset, gyr_raw);		//lấy giá trị offset
 80019aa:	4b13      	ldr	r3, [pc, #76]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80019ac:	edd3 6a00 	vldr	s13, [r3]
 80019b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80019b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80019b8:	eeb0 0a66 	vmov.f32	s0, s13
 80019bc:	eef0 0a47 	vmov.f32	s1, s14
 80019c0:	eeb0 1a67 	vmov.f32	s2, s15
 80019c4:	481a      	ldr	r0, [pc, #104]	@ (8001a30 <HAL_TIM_PeriodElapsedCallback+0x618>)
 80019c6:	f000 fb46 	bl	8002056 <gyr_get_value_offset>
			CALCULATOR(0.01f);										//hàm con tính toán SP omega và angle
 80019ca:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8001a38 <HAL_TIM_PeriodElapsedCallback+0x620>
 80019ce:	f000 f837 	bl	8001a40 <CALCULATOR>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bdb0      	pop	{r4, r5, r7, pc}
 80019da:	bf00      	nop
 80019dc:	f3af 8000 	nop.w
 80019e0:	1a63c1f8 	.word	0x1a63c1f8
 80019e4:	404ca5dc 	.word	0x404ca5dc
 80019e8:	20000240 	.word	0x20000240
 80019ec:	20000108 	.word	0x20000108
 80019f0:	200001b8 	.word	0x200001b8
 80019f4:	200001dc 	.word	0x200001dc
 80019f8:	20000200 	.word	0x20000200
 80019fc:	200001c4 	.word	0x200001c4
 8001a00:	20000230 	.word	0x20000230
 8001a04:	200002c8 	.word	0x200002c8
 8001a08:	20000238 	.word	0x20000238
 8001a0c:	20000234 	.word	0x20000234
 8001a10:	2000023c 	.word	0x2000023c
 8001a14:	2000020c 	.word	0x2000020c
 8001a18:	2000022c 	.word	0x2000022c
 8001a1c:	20000228 	.word	0x20000228
 8001a20:	200001e8 	.word	0x200001e8
 8001a24:	20000224 	.word	0x20000224
 8001a28:	200001d0 	.word	0x200001d0
 8001a2c:	200001f4 	.word	0x200001f4
 8001a30:	20000218 	.word	0x20000218
 8001a34:	40020800 	.word	0x40020800
 8001a38:	3c23d70a 	.word	0x3c23d70a
 8001a3c:	00000000 	.word	0x00000000

08001a40 <CALCULATOR>:
void CALCULATOR(float _dt)
{
 8001a40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	ed87 0a01 	vstr	s0, [r7, #4]
	//Ixx = Is * K_Ixx;												// hệ số Ixx

	a_Rg =(W*GM*sin(eul_roll_filter)*(1+sin(eul_pitch_filter))/Ixx) * K_aRg;	// gia tốc hồi phục[rad/s^2]
 8001a4c:	4bae      	ldr	r3, [pc, #696]	@ (8001d08 <CALCULATOR+0x2c8>)
 8001a4e:	ed93 7a00 	vldr	s14, [r3]
 8001a52:	4bae      	ldr	r3, [pc, #696]	@ (8001d0c <CALCULATOR+0x2cc>)
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a5c:	ee17 0a90 	vmov	r0, s15
 8001a60:	f7fe fd16 	bl	8000490 <__aeabi_f2d>
 8001a64:	4680      	mov	r8, r0
 8001a66:	4689      	mov	r9, r1
 8001a68:	4ba9      	ldr	r3, [pc, #676]	@ (8001d10 <CALCULATOR+0x2d0>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fd0f 	bl	8000490 <__aeabi_f2d>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	ec43 2b10 	vmov	d0, r2, r3
 8001a7a:	f007 f9b1 	bl	8008de0 <sin>
 8001a7e:	ec53 2b10 	vmov	r2, r3, d0
 8001a82:	4640      	mov	r0, r8
 8001a84:	4649      	mov	r1, r9
 8001a86:	f7fe fd5b 	bl	8000540 <__aeabi_dmul>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4690      	mov	r8, r2
 8001a90:	4699      	mov	r9, r3
 8001a92:	4ba0      	ldr	r3, [pc, #640]	@ (8001d14 <CALCULATOR+0x2d4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fcfa 	bl	8000490 <__aeabi_f2d>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	ec43 2b10 	vmov	d0, r2, r3
 8001aa4:	f007 f99c 	bl	8008de0 <sin>
 8001aa8:	ec51 0b10 	vmov	r0, r1, d0
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	4b99      	ldr	r3, [pc, #612]	@ (8001d18 <CALCULATOR+0x2d8>)
 8001ab2:	f7fe fb8f 	bl	80001d4 <__adddf3>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4640      	mov	r0, r8
 8001abc:	4649      	mov	r1, r9
 8001abe:	f7fe fd3f 	bl	8000540 <__aeabi_dmul>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4690      	mov	r8, r2
 8001ac8:	4699      	mov	r9, r3
 8001aca:	4b94      	ldr	r3, [pc, #592]	@ (8001d1c <CALCULATOR+0x2dc>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fcde 	bl	8000490 <__aeabi_f2d>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4640      	mov	r0, r8
 8001ada:	4649      	mov	r1, r9
 8001adc:	f7fe fe5a 	bl	8000794 <__aeabi_ddiv>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4690      	mov	r8, r2
 8001ae6:	4699      	mov	r9, r3
 8001ae8:	4b8d      	ldr	r3, [pc, #564]	@ (8001d20 <CALCULATOR+0x2e0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fccf 	bl	8000490 <__aeabi_f2d>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4640      	mov	r0, r8
 8001af8:	4649      	mov	r1, r9
 8001afa:	f7fe fd21 	bl	8000540 <__aeabi_dmul>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	f7fe fff3 	bl	8000af0 <__aeabi_d2f>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4a85      	ldr	r2, [pc, #532]	@ (8001d24 <CALCULATOR+0x2e4>)
 8001b0e:	6013      	str	r3, [r2, #0]
	a_wave = acc_x_filter/GM - a_Rg; 								// gia tốc của sóng tác động lên tàu
 8001b10:	4b85      	ldr	r3, [pc, #532]	@ (8001d28 <CALCULATOR+0x2e8>)
 8001b12:	edd3 6a00 	vldr	s13, [r3]
 8001b16:	4b7d      	ldr	r3, [pc, #500]	@ (8001d0c <CALCULATOR+0x2cc>)
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b20:	4b80      	ldr	r3, [pc, #512]	@ (8001d24 <CALCULATOR+0x2e4>)
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b2a:	4b80      	ldr	r3, [pc, #512]	@ (8001d2c <CALCULATOR+0x2ec>)
 8001b2c:	edc3 7a00 	vstr	s15, [r3]
	dtL = Ixx * a_wave * _dt ; 											// dt = 0.01
 8001b30:	4b7a      	ldr	r3, [pc, #488]	@ (8001d1c <CALCULATOR+0x2dc>)
 8001b32:	ed93 7a00 	vldr	s14, [r3]
 8001b36:	4b7d      	ldr	r3, [pc, #500]	@ (8001d2c <CALCULATOR+0x2ec>)
 8001b38:	edd3 7a00 	vldr	s15, [r3]
 8001b3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b40:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b48:	4b79      	ldr	r3, [pc, #484]	@ (8001d30 <CALCULATOR+0x2f0>)
 8001b4a:	edc3 7a00 	vstr	s15, [r3]

	K1 = ((2.0f * Ls * Ls) - (dtL * dtL)) / (2.0f * Ls * Ls);
 8001b4e:	4b79      	ldr	r3, [pc, #484]	@ (8001d34 <CALCULATOR+0x2f4>)
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b58:	4b76      	ldr	r3, [pc, #472]	@ (8001d34 <CALCULATOR+0x2f4>)
 8001b5a:	edd3 7a00 	vldr	s15, [r3]
 8001b5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b62:	4b73      	ldr	r3, [pc, #460]	@ (8001d30 <CALCULATOR+0x2f0>)
 8001b64:	edd3 6a00 	vldr	s13, [r3]
 8001b68:	4b71      	ldr	r3, [pc, #452]	@ (8001d30 <CALCULATOR+0x2f0>)
 8001b6a:	edd3 7a00 	vldr	s15, [r3]
 8001b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b72:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b76:	4b6f      	ldr	r3, [pc, #444]	@ (8001d34 <CALCULATOR+0x2f4>)
 8001b78:	edd3 7a00 	vldr	s15, [r3]
 8001b7c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b80:	4b6c      	ldr	r3, [pc, #432]	@ (8001d34 <CALCULATOR+0x2f4>)
 8001b82:	edd3 7a00 	vldr	s15, [r3]
 8001b86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b8e:	4b6a      	ldr	r3, [pc, #424]	@ (8001d38 <CALCULATOR+0x2f8>)
 8001b90:	edc3 7a00 	vstr	s15, [r3]
	if (a_wave >= 0)													// xét dấu a_wave
 8001b94:	4b65      	ldr	r3, [pc, #404]	@ (8001d2c <CALCULATOR+0x2ec>)
 8001b96:	edd3 7a00 	vldr	s15, [r3]
 8001b9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba2:	db38      	blt.n	8001c16 <CALCULATOR+0x1d6>
	{
		omega_G = -((acos(K1) / _dt) * 4.0f) * K_omega_G;
 8001ba4:	4b64      	ldr	r3, [pc, #400]	@ (8001d38 <CALCULATOR+0x2f8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fc71 	bl	8000490 <__aeabi_f2d>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	ec43 2b10 	vmov	d0, r2, r3
 8001bb6:	f007 f88d 	bl	8008cd4 <acos>
 8001bba:	ec59 8b10 	vmov	r8, r9, d0
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7fe fc66 	bl	8000490 <__aeabi_f2d>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4640      	mov	r0, r8
 8001bca:	4649      	mov	r1, r9
 8001bcc:	f7fe fde2 	bl	8000794 <__aeabi_ddiv>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	4b57      	ldr	r3, [pc, #348]	@ (8001d3c <CALCULATOR+0x2fc>)
 8001bde:	f7fe fcaf 	bl	8000540 <__aeabi_dmul>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4614      	mov	r4, r2
 8001be8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001bec:	4b54      	ldr	r3, [pc, #336]	@ (8001d40 <CALCULATOR+0x300>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fc4d 	bl	8000490 <__aeabi_f2d>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	f7fe fc9f 	bl	8000540 <__aeabi_dmul>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f7fe ff71 	bl	8000af0 <__aeabi_d2f>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4a4c      	ldr	r2, [pc, #304]	@ (8001d44 <CALCULATOR+0x304>)
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	e036      	b.n	8001c84 <CALCULATOR+0x244>
	}
	else
	{
		omega_G =  ((acos(K1) / _dt) * 4.0f) * K_omega_G;
 8001c16:	4b48      	ldr	r3, [pc, #288]	@ (8001d38 <CALCULATOR+0x2f8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fc38 	bl	8000490 <__aeabi_f2d>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	ec43 2b10 	vmov	d0, r2, r3
 8001c28:	f007 f854 	bl	8008cd4 <acos>
 8001c2c:	ec55 4b10 	vmov	r4, r5, d0
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7fe fc2d 	bl	8000490 <__aeabi_f2d>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	f7fe fda9 	bl	8000794 <__aeabi_ddiv>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d3c <CALCULATOR+0x2fc>)
 8001c50:	f7fe fc76 	bl	8000540 <__aeabi_dmul>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4614      	mov	r4, r2
 8001c5a:	461d      	mov	r5, r3
 8001c5c:	4b38      	ldr	r3, [pc, #224]	@ (8001d40 <CALCULATOR+0x300>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fc15 	bl	8000490 <__aeabi_f2d>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	4629      	mov	r1, r5
 8001c6e:	f7fe fc67 	bl	8000540 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f7fe ff39 	bl	8000af0 <__aeabi_d2f>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4a30      	ldr	r2, [pc, #192]	@ (8001d44 <CALCULATOR+0x304>)
 8001c82:	6013      	str	r3, [r2, #0]
	}
	omega_G_Degrees = omega_G * (180.0f / M_PI);
 8001c84:	4b2f      	ldr	r3, [pc, #188]	@ (8001d44 <CALCULATOR+0x304>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe fc01 	bl	8000490 <__aeabi_f2d>
 8001c8e:	a31c      	add	r3, pc, #112	@ (adr r3, 8001d00 <CALCULATOR+0x2c0>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fc54 	bl	8000540 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f7fe ff26 	bl	8000af0 <__aeabi_d2f>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4a28      	ldr	r2, [pc, #160]	@ (8001d48 <CALCULATOR+0x308>)
 8001ca8:	6013      	str	r3, [r2, #0]

	SP_omega = omega_G_Degrees;											// cài setpoint vận tốc góc
 8001caa:	4b27      	ldr	r3, [pc, #156]	@ (8001d48 <CALCULATOR+0x308>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a27      	ldr	r2, [pc, #156]	@ (8001d4c <CALCULATOR+0x30c>)
 8001cb0:	6013      	str	r3, [r2, #0]
	SP_angle = SP_angle + omega_G_Degrees / 100.0f;						// cài setpoint vị trí
 8001cb2:	4b25      	ldr	r3, [pc, #148]	@ (8001d48 <CALCULATOR+0x308>)
 8001cb4:	edd3 7a00 	vldr	s15, [r3]
 8001cb8:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8001d50 <CALCULATOR+0x310>
 8001cbc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cc0:	4b24      	ldr	r3, [pc, #144]	@ (8001d54 <CALCULATOR+0x314>)
 8001cc2:	edd3 7a00 	vldr	s15, [r3]
 8001cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cca:	4b22      	ldr	r3, [pc, #136]	@ (8001d54 <CALCULATOR+0x314>)
 8001ccc:	edc3 7a00 	vstr	s15, [r3]
	//hoi tu
	if(SP_angle >= 0)
 8001cd0:	4b20      	ldr	r3, [pc, #128]	@ (8001d54 <CALCULATOR+0x314>)
 8001cd2:	edd3 7a00 	vldr	s15, [r3]
 8001cd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cde:	db3d      	blt.n	8001d5c <CALCULATOR+0x31c>
	{
		SP_angle = SP_angle - beta / 100.0f;
 8001ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d54 <CALCULATOR+0x314>)
 8001ce2:	ed93 7a00 	vldr	s14, [r3]
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d58 <CALCULATOR+0x318>)
 8001ce8:	edd3 6a00 	vldr	s13, [r3]
 8001cec:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8001d50 <CALCULATOR+0x310>
 8001cf0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf8:	4b16      	ldr	r3, [pc, #88]	@ (8001d54 <CALCULATOR+0x314>)
 8001cfa:	edc3 7a00 	vstr	s15, [r3]
 8001cfe:	e03c      	b.n	8001d7a <CALCULATOR+0x33a>
 8001d00:	1a63c1f8 	.word	0x1a63c1f8
 8001d04:	404ca5dc 	.word	0x404ca5dc
 8001d08:	20000014 	.word	0x20000014
 8001d0c:	20000018 	.word	0x20000018
 8001d10:	20000230 	.word	0x20000230
 8001d14:	20000234 	.word	0x20000234
 8001d18:	3ff00000 	.word	0x3ff00000
 8001d1c:	20000010 	.word	0x20000010
 8001d20:	20000020 	.word	0x20000020
 8001d24:	200002b4 	.word	0x200002b4
 8001d28:	20000224 	.word	0x20000224
 8001d2c:	200002b0 	.word	0x200002b0
 8001d30:	200002bc 	.word	0x200002bc
 8001d34:	2000000c 	.word	0x2000000c
 8001d38:	200002b8 	.word	0x200002b8
 8001d3c:	40100000 	.word	0x40100000
 8001d40:	2000001c 	.word	0x2000001c
 8001d44:	200002c0 	.word	0x200002c0
 8001d48:	200002c4 	.word	0x200002c4
 8001d4c:	200002a0 	.word	0x200002a0
 8001d50:	42c80000 	.word	0x42c80000
 8001d54:	200002a4 	.word	0x200002a4
 8001d58:	20000028 	.word	0x20000028
	}
	else
	{
		SP_angle = SP_angle + beta / 100.0f;
 8001d5c:	4b24      	ldr	r3, [pc, #144]	@ (8001df0 <CALCULATOR+0x3b0>)
 8001d5e:	edd3 7a00 	vldr	s15, [r3]
 8001d62:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001df4 <CALCULATOR+0x3b4>
 8001d66:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d6a:	4b23      	ldr	r3, [pc, #140]	@ (8001df8 <CALCULATOR+0x3b8>)
 8001d6c:	edd3 7a00 	vldr	s15, [r3]
 8001d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d74:	4b20      	ldr	r3, [pc, #128]	@ (8001df8 <CALCULATOR+0x3b8>)
 8001d76:	edc3 7a00 	vstr	s15, [r3]
	}
	// giới hạn góc
	if(SP_angle > 60)
 8001d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001df8 <CALCULATOR+0x3b8>)
 8001d7c:	edd3 7a00 	vldr	s15, [r3]
 8001d80:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001dfc <CALCULATOR+0x3bc>
 8001d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8c:	dd02      	ble.n	8001d94 <CALCULATOR+0x354>
	{
		SP_angle = 60;
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001df8 <CALCULATOR+0x3b8>)
 8001d90:	4a1b      	ldr	r2, [pc, #108]	@ (8001e00 <CALCULATOR+0x3c0>)
 8001d92:	601a      	str	r2, [r3, #0]
	}
	if(SP_angle < -60)
 8001d94:	4b18      	ldr	r3, [pc, #96]	@ (8001df8 <CALCULATOR+0x3b8>)
 8001d96:	edd3 7a00 	vldr	s15, [r3]
 8001d9a:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001e04 <CALCULATOR+0x3c4>
 8001d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da6:	d502      	bpl.n	8001dae <CALCULATOR+0x36e>
	{
		SP_angle = -60;
 8001da8:	4b13      	ldr	r3, [pc, #76]	@ (8001df8 <CALCULATOR+0x3b8>)
 8001daa:	4a17      	ldr	r2, [pc, #92]	@ (8001e08 <CALCULATOR+0x3c8>)
 8001dac:	601a      	str	r2, [r3, #0]
	}
	// giới hạn omega
	if(SP_omega > 600)
 8001dae:	4b17      	ldr	r3, [pc, #92]	@ (8001e0c <CALCULATOR+0x3cc>)
 8001db0:	edd3 7a00 	vldr	s15, [r3]
 8001db4:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001e10 <CALCULATOR+0x3d0>
 8001db8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc0:	dd02      	ble.n	8001dc8 <CALCULATOR+0x388>
	{
		SP_omega = 600;
 8001dc2:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <CALCULATOR+0x3cc>)
 8001dc4:	4a13      	ldr	r2, [pc, #76]	@ (8001e14 <CALCULATOR+0x3d4>)
 8001dc6:	601a      	str	r2, [r3, #0]
	}
	if(SP_omega < -600)
 8001dc8:	4b10      	ldr	r3, [pc, #64]	@ (8001e0c <CALCULATOR+0x3cc>)
 8001dca:	edd3 7a00 	vldr	s15, [r3]
 8001dce:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001e18 <CALCULATOR+0x3d8>
 8001dd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dda:	d400      	bmi.n	8001dde <CALCULATOR+0x39e>
	{
		SP_omega = -600;
	}
}
 8001ddc:	e002      	b.n	8001de4 <CALCULATOR+0x3a4>
		SP_omega = -600;
 8001dde:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <CALCULATOR+0x3cc>)
 8001de0:	4a0e      	ldr	r2, [pc, #56]	@ (8001e1c <CALCULATOR+0x3dc>)
 8001de2:	601a      	str	r2, [r3, #0]
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dee:	bf00      	nop
 8001df0:	20000028 	.word	0x20000028
 8001df4:	42c80000 	.word	0x42c80000
 8001df8:	200002a4 	.word	0x200002a4
 8001dfc:	42700000 	.word	0x42700000
 8001e00:	42700000 	.word	0x42700000
 8001e04:	c2700000 	.word	0xc2700000
 8001e08:	c2700000 	.word	0xc2700000
 8001e0c:	200002a0 	.word	0x200002a0
 8001e10:	44160000 	.word	0x44160000
 8001e14:	44160000 	.word	0x44160000
 8001e18:	c4160000 	.word	0xc4160000
 8001e1c:	c4160000 	.word	0xc4160000

08001e20 <PID_calculator>:
void PID_calculator()							// tính toán PID
{
 8001e20:	b5b0      	push	{r4, r5, r7, lr}
 8001e22:	af00      	add	r7, sp, #0
	E_angle = SP_angle - angle_pendulum;		//tính sai số angle con lắc
 8001e24:	4b3c      	ldr	r3, [pc, #240]	@ (8001f18 <PID_calculator+0xf8>)
 8001e26:	ed93 7a00 	vldr	s14, [r3]
 8001e2a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f1c <PID_calculator+0xfc>)
 8001e2c:	edd3 7a00 	vldr	s15, [r3]
 8001e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e34:	4b3a      	ldr	r3, [pc, #232]	@ (8001f20 <PID_calculator+0x100>)
 8001e36:	edc3 7a00 	vstr	s15, [r3]
	E_omega = SP_omega - omega_filter;			//tính sai số omega
 8001e3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f24 <PID_calculator+0x104>)
 8001e3c:	ed93 7a00 	vldr	s14, [r3]
 8001e40:	4b39      	ldr	r3, [pc, #228]	@ (8001f28 <PID_calculator+0x108>)
 8001e42:	edd3 7a00 	vldr	s15, [r3]
 8001e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e4a:	4b38      	ldr	r3, [pc, #224]	@ (8001f2c <PID_calculator+0x10c>)
 8001e4c:	edc3 7a00 	vstr	s15, [r3]

	Output_PID_angle = Kp_angle * E_angle;		// out = Kp.E
 8001e50:	4b37      	ldr	r3, [pc, #220]	@ (8001f30 <PID_calculator+0x110>)
 8001e52:	ed93 7a00 	vldr	s14, [r3]
 8001e56:	4b32      	ldr	r3, [pc, #200]	@ (8001f20 <PID_calculator+0x100>)
 8001e58:	edd3 7a00 	vldr	s15, [r3]
 8001e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e60:	4b34      	ldr	r3, [pc, #208]	@ (8001f34 <PID_calculator+0x114>)
 8001e62:	edc3 7a00 	vstr	s15, [r3]
	Output_PID_omega = Kp_omega * E_omega;
 8001e66:	4b34      	ldr	r3, [pc, #208]	@ (8001f38 <PID_calculator+0x118>)
 8001e68:	ed93 7a00 	vldr	s14, [r3]
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f2c <PID_calculator+0x10c>)
 8001e6e:	edd3 7a00 	vldr	s15, [r3]
 8001e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e76:	4b31      	ldr	r3, [pc, #196]	@ (8001f3c <PID_calculator+0x11c>)
 8001e78:	edc3 7a00 	vstr	s15, [r3]
	Output_keep = (F_spinner * sin(SP_angle*(M_PI / 180.0f))) / 0.03;		// PID giữ tương ứng với góc SP con lắc
 8001e7c:	4b30      	ldr	r3, [pc, #192]	@ (8001f40 <PID_calculator+0x120>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fb05 	bl	8000490 <__aeabi_f2d>
 8001e86:	4604      	mov	r4, r0
 8001e88:	460d      	mov	r5, r1
 8001e8a:	4b23      	ldr	r3, [pc, #140]	@ (8001f18 <PID_calculator+0xf8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe fafe 	bl	8000490 <__aeabi_f2d>
 8001e94:	a31c      	add	r3, pc, #112	@ (adr r3, 8001f08 <PID_calculator+0xe8>)
 8001e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9a:	f7fe fb51 	bl	8000540 <__aeabi_dmul>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	ec43 2b17 	vmov	d7, r2, r3
 8001ea6:	eeb0 0a47 	vmov.f32	s0, s14
 8001eaa:	eef0 0a67 	vmov.f32	s1, s15
 8001eae:	f006 ff97 	bl	8008de0 <sin>
 8001eb2:	ec53 2b10 	vmov	r2, r3, d0
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	4629      	mov	r1, r5
 8001eba:	f7fe fb41 	bl	8000540 <__aeabi_dmul>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	a312      	add	r3, pc, #72	@ (adr r3, 8001f10 <PID_calculator+0xf0>)
 8001ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ecc:	f7fe fc62 	bl	8000794 <__aeabi_ddiv>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f7fe fe0a 	bl	8000af0 <__aeabi_d2f>
 8001edc:	4603      	mov	r3, r0
 8001ede:	4a19      	ldr	r2, [pc, #100]	@ (8001f44 <PID_calculator+0x124>)
 8001ee0:	6013      	str	r3, [r2, #0]

	Output_PID = Output_PID_omega + Output_PID_angle  + Output_keep;		// tổng PID
 8001ee2:	4b16      	ldr	r3, [pc, #88]	@ (8001f3c <PID_calculator+0x11c>)
 8001ee4:	ed93 7a00 	vldr	s14, [r3]
 8001ee8:	4b12      	ldr	r3, [pc, #72]	@ (8001f34 <PID_calculator+0x114>)
 8001eea:	edd3 7a00 	vldr	s15, [r3]
 8001eee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ef2:	4b14      	ldr	r3, [pc, #80]	@ (8001f44 <PID_calculator+0x124>)
 8001ef4:	edd3 7a00 	vldr	s15, [r3]
 8001ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efc:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <PID_calculator+0x128>)
 8001efe:	edc3 7a00 	vstr	s15, [r3]
}
 8001f02:	bf00      	nop
 8001f04:	bdb0      	pop	{r4, r5, r7, pc}
 8001f06:	bf00      	nop
 8001f08:	a2529d39 	.word	0xa2529d39
 8001f0c:	3f91df46 	.word	0x3f91df46
 8001f10:	eb851eb8 	.word	0xeb851eb8
 8001f14:	3f9eb851 	.word	0x3f9eb851
 8001f18:	200002a4 	.word	0x200002a4
 8001f1c:	2000028c 	.word	0x2000028c
 8001f20:	200002a8 	.word	0x200002a8
 8001f24:	200002a0 	.word	0x200002a0
 8001f28:	20000284 	.word	0x20000284
 8001f2c:	200002ac 	.word	0x200002ac
 8001f30:	20000004 	.word	0x20000004
 8001f34:	20000294 	.word	0x20000294
 8001f38:	20000008 	.word	0x20000008
 8001f3c:	20000290 	.word	0x20000290
 8001f40:	20000000 	.word	0x20000000
 8001f44:	20000298 	.word	0x20000298
 8001f48:	2000029c 	.word	0x2000029c

08001f4c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)   // ngắt nhận RF
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	d107      	bne.n	8001f6c <HAL_GPIO_EXTI_Callback+0x20>
		#ifdef RECEIVER
			//nothing to do
		#endif

		#ifdef TRANSMITTER
				nrf24l01p_tx_irq();
 8001f5c:	f002 fb20 	bl	80045a0 <nrf24l01p_tx_irq>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001f60:	2201      	movs	r2, #1
 8001f62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f66:	4803      	ldr	r0, [pc, #12]	@ (8001f74 <HAL_GPIO_EXTI_Callback+0x28>)
 8001f68:	f003 f880 	bl	800506c <HAL_GPIO_WritePin>
		#endif
	}
}
 8001f6c:	bf00      	nop
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40020c00 	.word	0x40020c00

08001f78 <calib_acc>:
void calib_acc(bno055_vec3_t* acc_caculate,  bno055_vec3_t acc_raw, bno055_vec3_t acc_offset )
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	@ 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	61f8      	str	r0, [r7, #28]
 8001f80:	eeb0 5a40 	vmov.f32	s10, s0
 8001f84:	eef0 5a60 	vmov.f32	s11, s1
 8001f88:	eeb0 6a41 	vmov.f32	s12, s2
 8001f8c:	eef0 6a61 	vmov.f32	s13, s3
 8001f90:	eeb0 7a42 	vmov.f32	s14, s4
 8001f94:	eef0 7a62 	vmov.f32	s15, s5
 8001f98:	ed87 5a04 	vstr	s10, [r7, #16]
 8001f9c:	edc7 5a05 	vstr	s11, [r7, #20]
 8001fa0:	ed87 6a06 	vstr	s12, [r7, #24]
 8001fa4:	edc7 6a01 	vstr	s13, [r7, #4]
 8001fa8:	ed87 7a02 	vstr	s14, [r7, #8]
 8001fac:	edc7 7a03 	vstr	s15, [r7, #12]
	acc_caculate->x = acc_raw.x - acc_offset.x;
 8001fb0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001fb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	edc3 7a00 	vstr	s15, [r3]
}
 8001fc2:	bf00      	nop
 8001fc4:	3724      	adds	r7, #36	@ 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <acc_get_value_offset>:
void acc_get_value_offset(bno055_vec3_t* acc_offset, bno055_vec3_t acc_raw)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b085      	sub	sp, #20
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	eef0 6a40 	vmov.f32	s13, s0
 8001fda:	eeb0 7a60 	vmov.f32	s14, s1
 8001fde:	eef0 7a41 	vmov.f32	s15, s2
 8001fe2:	edc7 6a00 	vstr	s13, [r7]
 8001fe6:	ed87 7a01 	vstr	s14, [r7, #4]
 8001fea:	edc7 7a02 	vstr	s15, [r7, #8]
	acc_offset->x = acc_raw.x;
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	601a      	str	r2, [r3, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <calib_gyr>:
void calib_gyr(bno055_vec3_t* gyr_caculate,  bno055_vec3_t gyr_raw, bno055_vec3_t gyr_offset )
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	@ 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	61f8      	str	r0, [r7, #28]
 8002008:	eeb0 5a40 	vmov.f32	s10, s0
 800200c:	eef0 5a60 	vmov.f32	s11, s1
 8002010:	eeb0 6a41 	vmov.f32	s12, s2
 8002014:	eef0 6a61 	vmov.f32	s13, s3
 8002018:	eeb0 7a42 	vmov.f32	s14, s4
 800201c:	eef0 7a62 	vmov.f32	s15, s5
 8002020:	ed87 5a04 	vstr	s10, [r7, #16]
 8002024:	edc7 5a05 	vstr	s11, [r7, #20]
 8002028:	ed87 6a06 	vstr	s12, [r7, #24]
 800202c:	edc7 6a01 	vstr	s13, [r7, #4]
 8002030:	ed87 7a02 	vstr	s14, [r7, #8]
 8002034:	edc7 7a03 	vstr	s15, [r7, #12]
	gyr_caculate->y = gyr_raw.y - gyr_offset.y;
 8002038:	ed97 7a05 	vldr	s14, [r7, #20]
 800203c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002040:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800204a:	bf00      	nop
 800204c:	3724      	adds	r7, #36	@ 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <gyr_get_value_offset>:
void gyr_get_value_offset(bno055_vec3_t* gyr_offset, bno055_vec3_t gyr_raw)
{
 8002056:	b480      	push	{r7}
 8002058:	b085      	sub	sp, #20
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	eef0 6a40 	vmov.f32	s13, s0
 8002062:	eeb0 7a60 	vmov.f32	s14, s1
 8002066:	eef0 7a41 	vmov.f32	s15, s2
 800206a:	edc7 6a00 	vstr	s13, [r7]
 800206e:	ed87 7a01 	vstr	s14, [r7, #4]
 8002072:	edc7 7a02 	vstr	s15, [r7, #8]
	gyr_offset->y = gyr_raw.y;
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	605a      	str	r2, [r3, #4]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <calib_euler>:
void calib_euler(bno055_euler_t* eul_caculate,  bno055_euler_t eul_raw, bno055_euler_t eul_offset)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	@ 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	61f8      	str	r0, [r7, #28]
 8002090:	eeb0 5a40 	vmov.f32	s10, s0
 8002094:	eef0 5a60 	vmov.f32	s11, s1
 8002098:	eeb0 6a41 	vmov.f32	s12, s2
 800209c:	eef0 6a61 	vmov.f32	s13, s3
 80020a0:	eeb0 7a42 	vmov.f32	s14, s4
 80020a4:	eef0 7a62 	vmov.f32	s15, s5
 80020a8:	ed87 5a04 	vstr	s10, [r7, #16]
 80020ac:	edc7 5a05 	vstr	s11, [r7, #20]
 80020b0:	ed87 6a06 	vstr	s12, [r7, #24]
 80020b4:	edc7 6a01 	vstr	s13, [r7, #4]
 80020b8:	ed87 7a02 	vstr	s14, [r7, #8]
 80020bc:	edc7 7a03 	vstr	s15, [r7, #12]
	eul_caculate->roll = eul_raw.roll - eul_offset.roll;
 80020c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80020c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80020c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	edc3 7a00 	vstr	s15, [r3]
	eul_caculate->pitch = eul_raw.pitch - eul_offset.pitch;
 80020d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80020d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80020da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80020e4:	bf00      	nop
 80020e6:	3724      	adds	r7, #36	@ 0x24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <euler_get_value_offset>:
void euler_get_value_offset(bno055_euler_t* eul_offset, bno055_euler_t eul_raw)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	eef0 6a40 	vmov.f32	s13, s0
 80020fc:	eeb0 7a60 	vmov.f32	s14, s1
 8002100:	eef0 7a41 	vmov.f32	s15, s2
 8002104:	edc7 6a00 	vstr	s13, [r7]
 8002108:	ed87 7a01 	vstr	s14, [r7, #4]
 800210c:	edc7 7a02 	vstr	s15, [r7, #8]
	eul_offset->roll = eul_raw.roll;
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	601a      	str	r2, [r3, #0]
	eul_offset->pitch = eul_raw.pitch;
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	605a      	str	r2, [r3, #4]
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <BNO_init>:
void BNO_init()
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af02      	add	r7, sp, #8

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800212e:	2200      	movs	r2, #0
 8002130:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002134:	4819      	ldr	r0, [pc, #100]	@ (800219c <BNO_init+0x74>)
 8002136:	f002 ff99 	bl	800506c <HAL_GPIO_WritePin>
	sensor.i2c = &hi2c2;   									 // khai báo kết nối i2c
 800213a:	4b19      	ldr	r3, [pc, #100]	@ (80021a0 <BNO_init+0x78>)
 800213c:	4a19      	ldr	r2, [pc, #100]	@ (80021a4 <BNO_init+0x7c>)
 800213e:	601a      	str	r2, [r3, #0]
	sensor.addr = 0x28;	 									 // kết nối i2c ở địa chỉ 0x28
 8002140:	4b17      	ldr	r3, [pc, #92]	@ (80021a0 <BNO_init+0x78>)
 8002142:	2228      	movs	r2, #40	@ 0x28
 8002144:	719a      	strb	r2, [r3, #6]
	sensor.mode = BNO_MODE_NDOF_FMC_OFF;					 // chế độ hoạt động của cảm biến
 8002146:	4b16      	ldr	r3, [pc, #88]	@ (80021a0 <BNO_init+0x78>)
 8002148:	220b      	movs	r2, #11
 800214a:	711a      	strb	r2, [r3, #4]
	sensor._temp_unit = BNO_TEMP_UNIT_C;
 800214c:	4b14      	ldr	r3, [pc, #80]	@ (80021a0 <BNO_init+0x78>)
 800214e:	2200      	movs	r2, #0
 8002150:	73da      	strb	r2, [r3, #15]
	HAL_Delay(1000);
 8002152:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002156:	f002 fc9f 	bl	8004a98 <HAL_Delay>
	if ((err = bno055_init(&sensor)) == BNO_OK) 				 //kiểm tra kết nối cảm biến
 800215a:	4811      	ldr	r0, [pc, #68]	@ (80021a0 <BNO_init+0x78>)
 800215c:	f000 fc5a 	bl	8002a14 <bno055_init>
 8002160:	4603      	mov	r3, r0
 8002162:	461a      	mov	r2, r3
 8002164:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <BNO_init+0x80>)
 8002166:	701a      	strb	r2, [r3, #0]
 8002168:	4b0f      	ldr	r3, [pc, #60]	@ (80021a8 <BNO_init+0x80>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d105      	bne.n	800217c <BNO_init+0x54>
	{
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);	// khi kết nối được cảm biến - sáng đèn 12.
 8002170:	2201      	movs	r2, #1
 8002172:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002176:	4809      	ldr	r0, [pc, #36]	@ (800219c <BNO_init+0x74>)
 8002178:	f002 ff78 	bl	800506c <HAL_GPIO_WritePin>
	}
	err = bno055_set_unit(&sensor, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_RPS, BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_RAD);
 800217c:	2304      	movs	r3, #4
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2300      	movs	r3, #0
 8002182:	2202      	movs	r2, #2
 8002184:	2100      	movs	r1, #0
 8002186:	4806      	ldr	r0, [pc, #24]	@ (80021a0 <BNO_init+0x78>)
 8002188:	f001 ff0e 	bl	8003fa8 <bno055_set_unit>
 800218c:	4603      	mov	r3, r0
 800218e:	461a      	mov	r2, r3
 8002190:	4b05      	ldr	r3, [pc, #20]	@ (80021a8 <BNO_init+0x80>)
 8002192:	701a      	strb	r2, [r3, #0]
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40020c00 	.word	0x40020c00
 80021a0:	20000108 	.word	0x20000108
 80021a4:	200000b4 	.word	0x200000b4
 80021a8:	200001b4 	.word	0x200001b4

080021ac <__low_pass_filter>:
float __low_pass_filter(float input, float previous_output, float alpha)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	ed87 0a03 	vstr	s0, [r7, #12]
 80021b6:	edc7 0a02 	vstr	s1, [r7, #8]
 80021ba:	ed87 1a01 	vstr	s2, [r7, #4]
	return alpha * input + (1 - alpha) * previous_output;
 80021be:	ed97 7a01 	vldr	s14, [r7, #4]
 80021c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80021c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80021d2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80021d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80021da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021de:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80021e2:	eeb0 0a67 	vmov.f32	s0, s15
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021f4:	b672      	cpsid	i
}
 80021f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021f8:	bf00      	nop
 80021fa:	e7fd      	b.n	80021f8 <Error_Handler+0x8>

080021fc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002200:	4b17      	ldr	r3, [pc, #92]	@ (8002260 <MX_SPI1_Init+0x64>)
 8002202:	4a18      	ldr	r2, [pc, #96]	@ (8002264 <MX_SPI1_Init+0x68>)
 8002204:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002206:	4b16      	ldr	r3, [pc, #88]	@ (8002260 <MX_SPI1_Init+0x64>)
 8002208:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800220c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800220e:	4b14      	ldr	r3, [pc, #80]	@ (8002260 <MX_SPI1_Init+0x64>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002214:	4b12      	ldr	r3, [pc, #72]	@ (8002260 <MX_SPI1_Init+0x64>)
 8002216:	2200      	movs	r2, #0
 8002218:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800221a:	4b11      	ldr	r3, [pc, #68]	@ (8002260 <MX_SPI1_Init+0x64>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002220:	4b0f      	ldr	r3, [pc, #60]	@ (8002260 <MX_SPI1_Init+0x64>)
 8002222:	2200      	movs	r2, #0
 8002224:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002226:	4b0e      	ldr	r3, [pc, #56]	@ (8002260 <MX_SPI1_Init+0x64>)
 8002228:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800222c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800222e:	4b0c      	ldr	r3, [pc, #48]	@ (8002260 <MX_SPI1_Init+0x64>)
 8002230:	2210      	movs	r2, #16
 8002232:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002234:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <MX_SPI1_Init+0x64>)
 8002236:	2200      	movs	r2, #0
 8002238:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800223a:	4b09      	ldr	r3, [pc, #36]	@ (8002260 <MX_SPI1_Init+0x64>)
 800223c:	2200      	movs	r2, #0
 800223e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002240:	4b07      	ldr	r3, [pc, #28]	@ (8002260 <MX_SPI1_Init+0x64>)
 8002242:	2200      	movs	r2, #0
 8002244:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002246:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <MX_SPI1_Init+0x64>)
 8002248:	220a      	movs	r2, #10
 800224a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800224c:	4804      	ldr	r0, [pc, #16]	@ (8002260 <MX_SPI1_Init+0x64>)
 800224e:	f004 fd67 	bl	8006d20 <HAL_SPI_Init>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002258:	f7ff ffca 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000310 	.word	0x20000310
 8002264:	40013000 	.word	0x40013000

08002268 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	@ 0x28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a19      	ldr	r2, [pc, #100]	@ (80022ec <HAL_SPI_MspInit+0x84>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d12b      	bne.n	80022e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	4b18      	ldr	r3, [pc, #96]	@ (80022f0 <HAL_SPI_MspInit+0x88>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002292:	4a17      	ldr	r2, [pc, #92]	@ (80022f0 <HAL_SPI_MspInit+0x88>)
 8002294:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002298:	6453      	str	r3, [r2, #68]	@ 0x44
 800229a:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <HAL_SPI_MspInit+0x88>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <HAL_SPI_MspInit+0x88>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	4a10      	ldr	r2, [pc, #64]	@ (80022f0 <HAL_SPI_MspInit+0x88>)
 80022b0:	f043 0302 	orr.w	r3, r3, #2
 80022b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b6:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <HAL_SPI_MspInit+0x88>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80022c2:	2338      	movs	r3, #56	@ 0x38
 80022c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ce:	2303      	movs	r3, #3
 80022d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022d2:	2305      	movs	r3, #5
 80022d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	4619      	mov	r1, r3
 80022dc:	4805      	ldr	r0, [pc, #20]	@ (80022f4 <HAL_SPI_MspInit+0x8c>)
 80022de:	f002 fd11 	bl	8004d04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80022e2:	bf00      	nop
 80022e4:	3728      	adds	r7, #40	@ 0x28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40013000 	.word	0x40013000
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40020400 	.word	0x40020400

080022f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	4b10      	ldr	r3, [pc, #64]	@ (8002344 <HAL_MspInit+0x4c>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002306:	4a0f      	ldr	r2, [pc, #60]	@ (8002344 <HAL_MspInit+0x4c>)
 8002308:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800230c:	6453      	str	r3, [r2, #68]	@ 0x44
 800230e:	4b0d      	ldr	r3, [pc, #52]	@ (8002344 <HAL_MspInit+0x4c>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002312:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002316:	607b      	str	r3, [r7, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	603b      	str	r3, [r7, #0]
 800231e:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <HAL_MspInit+0x4c>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	4a08      	ldr	r2, [pc, #32]	@ (8002344 <HAL_MspInit+0x4c>)
 8002324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002328:	6413      	str	r3, [r2, #64]	@ 0x40
 800232a:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <HAL_MspInit+0x4c>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800

08002348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800234c:	bf00      	nop
 800234e:	e7fd      	b.n	800234c <NMI_Handler+0x4>

08002350 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002354:	bf00      	nop
 8002356:	e7fd      	b.n	8002354 <HardFault_Handler+0x4>

08002358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800235c:	bf00      	nop
 800235e:	e7fd      	b.n	800235c <MemManage_Handler+0x4>

08002360 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002364:	bf00      	nop
 8002366:	e7fd      	b.n	8002364 <BusFault_Handler+0x4>

08002368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800236c:	bf00      	nop
 800236e:	e7fd      	b.n	800236c <UsageFault_Handler+0x4>

08002370 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800239e:	f002 fb5b 	bl	8004a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80023aa:	2020      	movs	r0, #32
 80023ac:	f002 fe92 	bl	80050d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023b8:	4802      	ldr	r0, [pc, #8]	@ (80023c4 <TIM2_IRQHandler+0x10>)
 80023ba:	f005 fdfd 	bl	8007fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000368 	.word	0x20000368

080023c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023cc:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <SystemInit+0x20>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d2:	4a05      	ldr	r2, [pc, #20]	@ (80023e8 <SystemInit+0x20>)
 80023d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023f2:	f107 0308 	add.w	r3, r7, #8
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002400:	463b      	mov	r3, r7
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002408:	4b1d      	ldr	r3, [pc, #116]	@ (8002480 <MX_TIM2_Init+0x94>)
 800240a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800240e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8002410:	4b1b      	ldr	r3, [pc, #108]	@ (8002480 <MX_TIM2_Init+0x94>)
 8002412:	2253      	movs	r2, #83	@ 0x53
 8002414:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002416:	4b1a      	ldr	r3, [pc, #104]	@ (8002480 <MX_TIM2_Init+0x94>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800241c:	4b18      	ldr	r3, [pc, #96]	@ (8002480 <MX_TIM2_Init+0x94>)
 800241e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002422:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002424:	4b16      	ldr	r3, [pc, #88]	@ (8002480 <MX_TIM2_Init+0x94>)
 8002426:	2200      	movs	r2, #0
 8002428:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800242a:	4b15      	ldr	r3, [pc, #84]	@ (8002480 <MX_TIM2_Init+0x94>)
 800242c:	2200      	movs	r2, #0
 800242e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002430:	4813      	ldr	r0, [pc, #76]	@ (8002480 <MX_TIM2_Init+0x94>)
 8002432:	f005 fa47 	bl	80078c4 <HAL_TIM_Base_Init>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800243c:	f7ff fed8 	bl	80021f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002440:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002444:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002446:	f107 0308 	add.w	r3, r7, #8
 800244a:	4619      	mov	r1, r3
 800244c:	480c      	ldr	r0, [pc, #48]	@ (8002480 <MX_TIM2_Init+0x94>)
 800244e:	f005 ff65 	bl	800831c <HAL_TIM_ConfigClockSource>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002458:	f7ff feca 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800245c:	2300      	movs	r3, #0
 800245e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002460:	2300      	movs	r3, #0
 8002462:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002464:	463b      	mov	r3, r7
 8002466:	4619      	mov	r1, r3
 8002468:	4805      	ldr	r0, [pc, #20]	@ (8002480 <MX_TIM2_Init+0x94>)
 800246a:	f006 fb63 	bl	8008b34 <HAL_TIMEx_MasterConfigSynchronization>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002474:	f7ff febc 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002478:	bf00      	nop
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000368 	.word	0x20000368

08002484 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08c      	sub	sp, #48	@ 0x30
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800248a:	f107 030c 	add.w	r3, r7, #12
 800248e:	2224      	movs	r2, #36	@ 0x24
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f006 fbde 	bl	8008c54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024a0:	4b20      	ldr	r3, [pc, #128]	@ (8002524 <MX_TIM3_Init+0xa0>)
 80024a2:	4a21      	ldr	r2, [pc, #132]	@ (8002528 <MX_TIM3_Init+0xa4>)
 80024a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002524 <MX_TIM3_Init+0xa0>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002524 <MX_TIM3_Init+0xa0>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002524 <MX_TIM3_Init+0xa0>)
 80024b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002524 <MX_TIM3_Init+0xa0>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c0:	4b18      	ldr	r3, [pc, #96]	@ (8002524 <MX_TIM3_Init+0xa0>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024c6:	2303      	movs	r3, #3
 80024c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024ce:	2301      	movs	r3, #1
 80024d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80024da:	2302      	movs	r3, #2
 80024dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024de:	2301      	movs	r3, #1
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024e2:	2300      	movs	r3, #0
 80024e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80024ea:	f107 030c 	add.w	r3, r7, #12
 80024ee:	4619      	mov	r1, r3
 80024f0:	480c      	ldr	r0, [pc, #48]	@ (8002524 <MX_TIM3_Init+0xa0>)
 80024f2:	f005 fc0d 	bl	8007d10 <HAL_TIM_Encoder_Init>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80024fc:	f7ff fe78 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002500:	2300      	movs	r3, #0
 8002502:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002504:	2300      	movs	r3, #0
 8002506:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	4619      	mov	r1, r3
 800250c:	4805      	ldr	r0, [pc, #20]	@ (8002524 <MX_TIM3_Init+0xa0>)
 800250e:	f006 fb11 	bl	8008b34 <HAL_TIMEx_MasterConfigSynchronization>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002518:	f7ff fe6a 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800251c:	bf00      	nop
 800251e:	3730      	adds	r7, #48	@ 0x30
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	200003b0 	.word	0x200003b0
 8002528:	40000400 	.word	0x40000400

0800252c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	@ 0x28
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002532:	f107 0320 	add.w	r3, r7, #32
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800253c:	1d3b      	adds	r3, r7, #4
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	60da      	str	r2, [r3, #12]
 8002548:	611a      	str	r2, [r3, #16]
 800254a:	615a      	str	r2, [r3, #20]
 800254c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800254e:	4b22      	ldr	r3, [pc, #136]	@ (80025d8 <MX_TIM4_Init+0xac>)
 8002550:	4a22      	ldr	r2, [pc, #136]	@ (80025dc <MX_TIM4_Init+0xb0>)
 8002552:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 13;
 8002554:	4b20      	ldr	r3, [pc, #128]	@ (80025d8 <MX_TIM4_Init+0xac>)
 8002556:	220d      	movs	r2, #13
 8002558:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255a:	4b1f      	ldr	r3, [pc, #124]	@ (80025d8 <MX_TIM4_Init+0xac>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1199;
 8002560:	4b1d      	ldr	r3, [pc, #116]	@ (80025d8 <MX_TIM4_Init+0xac>)
 8002562:	f240 42af 	movw	r2, #1199	@ 0x4af
 8002566:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002568:	4b1b      	ldr	r3, [pc, #108]	@ (80025d8 <MX_TIM4_Init+0xac>)
 800256a:	2200      	movs	r2, #0
 800256c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256e:	4b1a      	ldr	r3, [pc, #104]	@ (80025d8 <MX_TIM4_Init+0xac>)
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002574:	4818      	ldr	r0, [pc, #96]	@ (80025d8 <MX_TIM4_Init+0xac>)
 8002576:	f005 fa65 	bl	8007a44 <HAL_TIM_PWM_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002580:	f7ff fe36 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002584:	2300      	movs	r3, #0
 8002586:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002588:	2300      	movs	r3, #0
 800258a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800258c:	f107 0320 	add.w	r3, r7, #32
 8002590:	4619      	mov	r1, r3
 8002592:	4811      	ldr	r0, [pc, #68]	@ (80025d8 <MX_TIM4_Init+0xac>)
 8002594:	f006 face 	bl	8008b34 <HAL_TIMEx_MasterConfigSynchronization>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800259e:	f7ff fe27 	bl	80021f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025a2:	2360      	movs	r3, #96	@ 0x60
 80025a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	220c      	movs	r2, #12
 80025b6:	4619      	mov	r1, r3
 80025b8:	4807      	ldr	r0, [pc, #28]	@ (80025d8 <MX_TIM4_Init+0xac>)
 80025ba:	f005 fded 	bl	8008198 <HAL_TIM_PWM_ConfigChannel>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80025c4:	f7ff fe14 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80025c8:	4803      	ldr	r0, [pc, #12]	@ (80025d8 <MX_TIM4_Init+0xac>)
 80025ca:	f000 f997 	bl	80028fc <HAL_TIM_MspPostInit>

}
 80025ce:	bf00      	nop
 80025d0:	3728      	adds	r7, #40	@ 0x28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	200003f8 	.word	0x200003f8
 80025dc:	40000800 	.word	0x40000800

080025e0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	@ 0x28
 80025e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e6:	f107 0320 	add.w	r3, r7, #32
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	60da      	str	r2, [r3, #12]
 80025fc:	611a      	str	r2, [r3, #16]
 80025fe:	615a      	str	r2, [r3, #20]
 8002600:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002602:	4b22      	ldr	r3, [pc, #136]	@ (800268c <MX_TIM5_Init+0xac>)
 8002604:	4a22      	ldr	r2, [pc, #136]	@ (8002690 <MX_TIM5_Init+0xb0>)
 8002606:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8002608:	4b20      	ldr	r3, [pc, #128]	@ (800268c <MX_TIM5_Init+0xac>)
 800260a:	2253      	movs	r2, #83	@ 0x53
 800260c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260e:	4b1f      	ldr	r3, [pc, #124]	@ (800268c <MX_TIM5_Init+0xac>)
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 8002614:	4b1d      	ldr	r3, [pc, #116]	@ (800268c <MX_TIM5_Init+0xac>)
 8002616:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800261a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261c:	4b1b      	ldr	r3, [pc, #108]	@ (800268c <MX_TIM5_Init+0xac>)
 800261e:	2200      	movs	r2, #0
 8002620:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002622:	4b1a      	ldr	r3, [pc, #104]	@ (800268c <MX_TIM5_Init+0xac>)
 8002624:	2200      	movs	r2, #0
 8002626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002628:	4818      	ldr	r0, [pc, #96]	@ (800268c <MX_TIM5_Init+0xac>)
 800262a:	f005 fa0b 	bl	8007a44 <HAL_TIM_PWM_Init>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002634:	f7ff fddc 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002638:	2300      	movs	r3, #0
 800263a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263c:	2300      	movs	r3, #0
 800263e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002640:	f107 0320 	add.w	r3, r7, #32
 8002644:	4619      	mov	r1, r3
 8002646:	4811      	ldr	r0, [pc, #68]	@ (800268c <MX_TIM5_Init+0xac>)
 8002648:	f006 fa74 	bl	8008b34 <HAL_TIMEx_MasterConfigSynchronization>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002652:	f7ff fdcd 	bl	80021f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002656:	2360      	movs	r3, #96	@ 0x60
 8002658:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	220c      	movs	r2, #12
 800266a:	4619      	mov	r1, r3
 800266c:	4807      	ldr	r0, [pc, #28]	@ (800268c <MX_TIM5_Init+0xac>)
 800266e:	f005 fd93 	bl	8008198 <HAL_TIM_PWM_ConfigChannel>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002678:	f7ff fdba 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800267c:	4803      	ldr	r0, [pc, #12]	@ (800268c <MX_TIM5_Init+0xac>)
 800267e:	f000 f93d 	bl	80028fc <HAL_TIM_MspPostInit>

}
 8002682:	bf00      	nop
 8002684:	3728      	adds	r7, #40	@ 0x28
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000440 	.word	0x20000440
 8002690:	40000c00 	.word	0x40000c00

08002694 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08c      	sub	sp, #48	@ 0x30
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800269a:	f107 030c 	add.w	r3, r7, #12
 800269e:	2224      	movs	r2, #36	@ 0x24
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f006 fad6 	bl	8008c54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a8:	1d3b      	adds	r3, r7, #4
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80026b0:	4b22      	ldr	r3, [pc, #136]	@ (800273c <MX_TIM8_Init+0xa8>)
 80026b2:	4a23      	ldr	r2, [pc, #140]	@ (8002740 <MX_TIM8_Init+0xac>)
 80026b4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80026b6:	4b21      	ldr	r3, [pc, #132]	@ (800273c <MX_TIM8_Init+0xa8>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026bc:	4b1f      	ldr	r3, [pc, #124]	@ (800273c <MX_TIM8_Init+0xa8>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80026c2:	4b1e      	ldr	r3, [pc, #120]	@ (800273c <MX_TIM8_Init+0xa8>)
 80026c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026c8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ca:	4b1c      	ldr	r3, [pc, #112]	@ (800273c <MX_TIM8_Init+0xa8>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80026d0:	4b1a      	ldr	r3, [pc, #104]	@ (800273c <MX_TIM8_Init+0xa8>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d6:	4b19      	ldr	r3, [pc, #100]	@ (800273c <MX_TIM8_Init+0xa8>)
 80026d8:	2200      	movs	r2, #0
 80026da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80026dc:	2303      	movs	r3, #3
 80026de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026e0:	2300      	movs	r3, #0
 80026e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026e4:	2301      	movs	r3, #1
 80026e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80026f0:	2302      	movs	r3, #2
 80026f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026f4:	2301      	movs	r3, #1
 80026f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002700:	f107 030c 	add.w	r3, r7, #12
 8002704:	4619      	mov	r1, r3
 8002706:	480d      	ldr	r0, [pc, #52]	@ (800273c <MX_TIM8_Init+0xa8>)
 8002708:	f005 fb02 	bl	8007d10 <HAL_TIM_Encoder_Init>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8002712:	f7ff fd6d 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271a:	2300      	movs	r3, #0
 800271c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	4619      	mov	r1, r3
 8002722:	4806      	ldr	r0, [pc, #24]	@ (800273c <MX_TIM8_Init+0xa8>)
 8002724:	f006 fa06 	bl	8008b34 <HAL_TIMEx_MasterConfigSynchronization>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800272e:	f7ff fd5f 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002732:	bf00      	nop
 8002734:	3730      	adds	r7, #48	@ 0x30
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000488 	.word	0x20000488
 8002740:	40010400 	.word	0x40010400

08002744 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002754:	d115      	bne.n	8002782 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	4b0c      	ldr	r3, [pc, #48]	@ (800278c <HAL_TIM_Base_MspInit+0x48>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	4a0b      	ldr	r2, [pc, #44]	@ (800278c <HAL_TIM_Base_MspInit+0x48>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6413      	str	r3, [r2, #64]	@ 0x40
 8002766:	4b09      	ldr	r3, [pc, #36]	@ (800278c <HAL_TIM_Base_MspInit+0x48>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	201c      	movs	r0, #28
 8002778:	f002 fa8d 	bl	8004c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800277c:	201c      	movs	r0, #28
 800277e:	f002 faa6 	bl	8004cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800

08002790 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08c      	sub	sp, #48	@ 0x30
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 031c 	add.w	r3, r7, #28
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a32      	ldr	r2, [pc, #200]	@ (8002878 <HAL_TIM_Encoder_MspInit+0xe8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d12c      	bne.n	800280c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	4b31      	ldr	r3, [pc, #196]	@ (800287c <HAL_TIM_Encoder_MspInit+0xec>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	4a30      	ldr	r2, [pc, #192]	@ (800287c <HAL_TIM_Encoder_MspInit+0xec>)
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c2:	4b2e      	ldr	r3, [pc, #184]	@ (800287c <HAL_TIM_Encoder_MspInit+0xec>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	61bb      	str	r3, [r7, #24]
 80027cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	4b2a      	ldr	r3, [pc, #168]	@ (800287c <HAL_TIM_Encoder_MspInit+0xec>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	4a29      	ldr	r2, [pc, #164]	@ (800287c <HAL_TIM_Encoder_MspInit+0xec>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027de:	4b27      	ldr	r3, [pc, #156]	@ (800287c <HAL_TIM_Encoder_MspInit+0xec>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027ea:	23c0      	movs	r3, #192	@ 0xc0
 80027ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ee:	2302      	movs	r3, #2
 80027f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f6:	2300      	movs	r3, #0
 80027f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027fa:	2302      	movs	r3, #2
 80027fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fe:	f107 031c 	add.w	r3, r7, #28
 8002802:	4619      	mov	r1, r3
 8002804:	481e      	ldr	r0, [pc, #120]	@ (8002880 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002806:	f002 fa7d 	bl	8004d04 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800280a:	e030      	b.n	800286e <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM8)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a1c      	ldr	r2, [pc, #112]	@ (8002884 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d12b      	bne.n	800286e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	4b18      	ldr	r3, [pc, #96]	@ (800287c <HAL_TIM_Encoder_MspInit+0xec>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281e:	4a17      	ldr	r2, [pc, #92]	@ (800287c <HAL_TIM_Encoder_MspInit+0xec>)
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	6453      	str	r3, [r2, #68]	@ 0x44
 8002826:	4b15      	ldr	r3, [pc, #84]	@ (800287c <HAL_TIM_Encoder_MspInit+0xec>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	4b11      	ldr	r3, [pc, #68]	@ (800287c <HAL_TIM_Encoder_MspInit+0xec>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	4a10      	ldr	r2, [pc, #64]	@ (800287c <HAL_TIM_Encoder_MspInit+0xec>)
 800283c:	f043 0304 	orr.w	r3, r3, #4
 8002840:	6313      	str	r3, [r2, #48]	@ 0x30
 8002842:	4b0e      	ldr	r3, [pc, #56]	@ (800287c <HAL_TIM_Encoder_MspInit+0xec>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800284e:	23c0      	movs	r3, #192	@ 0xc0
 8002850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002852:	2302      	movs	r3, #2
 8002854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285a:	2300      	movs	r3, #0
 800285c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800285e:	2303      	movs	r3, #3
 8002860:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002862:	f107 031c 	add.w	r3, r7, #28
 8002866:	4619      	mov	r1, r3
 8002868:	4807      	ldr	r0, [pc, #28]	@ (8002888 <HAL_TIM_Encoder_MspInit+0xf8>)
 800286a:	f002 fa4b 	bl	8004d04 <HAL_GPIO_Init>
}
 800286e:	bf00      	nop
 8002870:	3730      	adds	r7, #48	@ 0x30
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40000400 	.word	0x40000400
 800287c:	40023800 	.word	0x40023800
 8002880:	40020000 	.word	0x40020000
 8002884:	40010400 	.word	0x40010400
 8002888:	40020800 	.word	0x40020800

0800288c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a15      	ldr	r2, [pc, #84]	@ (80028f0 <HAL_TIM_PWM_MspInit+0x64>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d10e      	bne.n	80028bc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	4b14      	ldr	r3, [pc, #80]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x68>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	4a13      	ldr	r2, [pc, #76]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x68>)
 80028a8:	f043 0304 	orr.w	r3, r3, #4
 80028ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ae:	4b11      	ldr	r3, [pc, #68]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x68>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80028ba:	e012      	b.n	80028e2 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM5)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a0d      	ldr	r2, [pc, #52]	@ (80028f8 <HAL_TIM_PWM_MspInit+0x6c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d10d      	bne.n	80028e2 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	4b0a      	ldr	r3, [pc, #40]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x68>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	4a09      	ldr	r2, [pc, #36]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x68>)
 80028d0:	f043 0308 	orr.w	r3, r3, #8
 80028d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028d6:	4b07      	ldr	r3, [pc, #28]	@ (80028f4 <HAL_TIM_PWM_MspInit+0x68>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
}
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40000800 	.word	0x40000800
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40000c00 	.word	0x40000c00

080028fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	@ 0x28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a24      	ldr	r2, [pc, #144]	@ (80029ac <HAL_TIM_MspPostInit+0xb0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d11f      	bne.n	800295e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	4b23      	ldr	r3, [pc, #140]	@ (80029b0 <HAL_TIM_MspPostInit+0xb4>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	4a22      	ldr	r2, [pc, #136]	@ (80029b0 <HAL_TIM_MspPostInit+0xb4>)
 8002928:	f043 0302 	orr.w	r3, r3, #2
 800292c:	6313      	str	r3, [r2, #48]	@ 0x30
 800292e:	4b20      	ldr	r3, [pc, #128]	@ (80029b0 <HAL_TIM_MspPostInit+0xb4>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800293a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800293e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002948:	2300      	movs	r3, #0
 800294a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800294c:	2302      	movs	r3, #2
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	4619      	mov	r1, r3
 8002956:	4817      	ldr	r0, [pc, #92]	@ (80029b4 <HAL_TIM_MspPostInit+0xb8>)
 8002958:	f002 f9d4 	bl	8004d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800295c:	e022      	b.n	80029a4 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM5)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a15      	ldr	r2, [pc, #84]	@ (80029b8 <HAL_TIM_MspPostInit+0xbc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d11d      	bne.n	80029a4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002968:	2300      	movs	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	4b10      	ldr	r3, [pc, #64]	@ (80029b0 <HAL_TIM_MspPostInit+0xb4>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002970:	4a0f      	ldr	r2, [pc, #60]	@ (80029b0 <HAL_TIM_MspPostInit+0xb4>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	6313      	str	r3, [r2, #48]	@ 0x30
 8002978:	4b0d      	ldr	r3, [pc, #52]	@ (80029b0 <HAL_TIM_MspPostInit+0xb4>)
 800297a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002984:	2308      	movs	r3, #8
 8002986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002988:	2302      	movs	r3, #2
 800298a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002990:	2300      	movs	r3, #0
 8002992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002994:	2302      	movs	r3, #2
 8002996:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002998:	f107 0314 	add.w	r3, r7, #20
 800299c:	4619      	mov	r1, r3
 800299e:	4807      	ldr	r0, [pc, #28]	@ (80029bc <HAL_TIM_MspPostInit+0xc0>)
 80029a0:	f002 f9b0 	bl	8004d04 <HAL_GPIO_Init>
}
 80029a4:	bf00      	nop
 80029a6:	3728      	adds	r7, #40	@ 0x28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40000800 	.word	0x40000800
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40020400 	.word	0x40020400
 80029b8:	40000c00 	.word	0x40000c00
 80029bc:	40020000 	.word	0x40020000

080029c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack     /* set stack pointer */
 80029c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80029c4:	f7ff fd00 	bl	80023c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029c8:	480c      	ldr	r0, [pc, #48]	@ (80029fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029ca:	490d      	ldr	r1, [pc, #52]	@ (8002a00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002a04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029d0:	e002      	b.n	80029d8 <LoopCopyDataInit>

080029d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029d6:	3304      	adds	r3, #4

080029d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029dc:	d3f9      	bcc.n	80029d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029de:	4a0a      	ldr	r2, [pc, #40]	@ (8002a08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029e0:	4c0a      	ldr	r4, [pc, #40]	@ (8002a0c <LoopFillZerobss+0x22>)
  movs r3, #0
 80029e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029e4:	e001      	b.n	80029ea <LoopFillZerobss>

080029e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029e8:	3204      	adds	r2, #4

080029ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029ec:	d3fb      	bcc.n	80029e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029ee:	f006 f93f 	bl	8008c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029f2:	f7fe fb71 	bl	80010d8 <main>
  bx  lr    
 80029f6:	4770      	bx	lr
   ldr   sp, =_estack     /* set stack pointer */
 80029f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a00:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002a04:	0800aa88 	.word	0x0800aa88
  ldr r2, =_sbss
 8002a08:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002a0c:	2000060c 	.word	0x2000060c

08002a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a10:	e7fe      	b.n	8002a10 <ADC_IRQHandler>
	...

08002a14 <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 8002a14:	b590      	push	{r4, r7, lr}
 8002a16:	b0af      	sub	sp, #188	@ 0xbc
 8002a18:	af2a      	add	r7, sp, #168	@ 0xa8
 8002a1a:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	799b      	ldrb	r3, [r3, #6]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 8002a2c:	687c      	ldr	r4, [r7, #4]
 8002a2e:	2301      	movs	r3, #1
 8002a30:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002a32:	f107 030e 	add.w	r3, r7, #14
 8002a36:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002a38:	2300      	movs	r3, #0
 8002a3a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002a3c:	4668      	mov	r0, sp
 8002a3e:	f104 0310 	add.w	r3, r4, #16
 8002a42:	229c      	movs	r2, #156	@ 0x9c
 8002a44:	4619      	mov	r1, r3
 8002a46:	f006 f937 	bl	8008cb8 <memcpy>
 8002a4a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a4e:	f001 fbb6 	bl	80041be <bno055_read_regs>
 8002a52:	4603      	mov	r3, r0
 8002a54:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <bno055_init+0x4c>
        return err;
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	e0b6      	b.n	8002bce <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 8002a60:	7bbb      	ldrb	r3, [r7, #14]
 8002a62:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a64:	d001      	beq.n	8002a6a <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 8002a66:	2306      	movs	r3, #6
 8002a68:	e0b1      	b.n	8002bce <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f001 fa74 	bl	8003f5a <bno055_set_opmode>
 8002a72:	4603      	mov	r3, r0
 8002a74:	73fb      	strb	r3, [r7, #15]
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <bno055_init+0x6c>
        return err;
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	e0a6      	b.n	8002bce <bno055_init+0x1ba>
    }
    HAL_Delay(2);
 8002a80:	2002      	movs	r0, #2
 8002a82:	f002 f809 	bl	8004a98 <HAL_Delay>
    bno055_reset(imu);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f001 fb53 	bl	8004132 <bno055_reset>
    HAL_Delay(5000);
 8002a8c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002a90:	f002 f802 	bl	8004a98 <HAL_Delay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8002a94:	2100      	movs	r1, #0
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f001 faee 	bl	8004078 <bno055_set_pwr_mode>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	73fb      	strb	r3, [r7, #15]
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <bno055_init+0x96>
        return err;
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	e091      	b.n	8002bce <bno055_init+0x1ba>
    }
    HAL_Delay(10);
 8002aaa:	200a      	movs	r0, #10
 8002aac:	f001 fff4 	bl	8004a98 <HAL_Delay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f001 fbe7 	bl	8004286 <bno055_set_page>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	73fb      	strb	r3, [r7, #15]
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <bno055_init+0xb2>
        return err;
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	e083      	b.n	8002bce <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8002ac6:	200c      	movs	r0, #12
 8002ac8:	f001 ffe6 	bl	8004a98 <HAL_Delay>
    bno055_on(imu);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f001 fb53 	bl	8004178 <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	791b      	ldrb	r3, [r3, #4]
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f001 fa3e 	bl	8003f5a <bno055_set_opmode>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	73fb      	strb	r3, [r7, #15]
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <bno055_init+0xd8>
        return err;
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	e070      	b.n	8002bce <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8002aec:	2018      	movs	r0, #24
 8002aee:	f001 ffd3 	bl	8004a98 <HAL_Delay>

    imu->temperature = &bno055_temperature;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a38      	ldr	r2, [pc, #224]	@ (8002bd8 <bno055_init+0x1c4>)
 8002af6:	625a      	str	r2, [r3, #36]	@ 0x24
    imu->acc_x = &bno055_acc_x;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a38      	ldr	r2, [pc, #224]	@ (8002bdc <bno055_init+0x1c8>)
 8002afc:	629a      	str	r2, [r3, #40]	@ 0x28
    imu->acc_y = &bno055_acc_y;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a37      	ldr	r2, [pc, #220]	@ (8002be0 <bno055_init+0x1cc>)
 8002b02:	62da      	str	r2, [r3, #44]	@ 0x2c
    imu->acc_z = &bno055_acc_z;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a37      	ldr	r2, [pc, #220]	@ (8002be4 <bno055_init+0x1d0>)
 8002b08:	631a      	str	r2, [r3, #48]	@ 0x30
    imu->acc = &bno055_acc;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a36      	ldr	r2, [pc, #216]	@ (8002be8 <bno055_init+0x1d4>)
 8002b0e:	635a      	str	r2, [r3, #52]	@ 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a36      	ldr	r2, [pc, #216]	@ (8002bec <bno055_init+0x1d8>)
 8002b14:	639a      	str	r2, [r3, #56]	@ 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a35      	ldr	r2, [pc, #212]	@ (8002bf0 <bno055_init+0x1dc>)
 8002b1a:	63da      	str	r2, [r3, #60]	@ 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a35      	ldr	r2, [pc, #212]	@ (8002bf4 <bno055_init+0x1e0>)
 8002b20:	641a      	str	r2, [r3, #64]	@ 0x40
    imu->linear_acc = &bno055_linear_acc;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a34      	ldr	r2, [pc, #208]	@ (8002bf8 <bno055_init+0x1e4>)
 8002b26:	645a      	str	r2, [r3, #68]	@ 0x44
    imu->gyro_x = &bno055_gyro_x;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a34      	ldr	r2, [pc, #208]	@ (8002bfc <bno055_init+0x1e8>)
 8002b2c:	649a      	str	r2, [r3, #72]	@ 0x48
    imu->gyro_y = &bno055_gyro_y;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a33      	ldr	r2, [pc, #204]	@ (8002c00 <bno055_init+0x1ec>)
 8002b32:	64da      	str	r2, [r3, #76]	@ 0x4c
    imu->gyro_z = &bno055_gyro_z;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a33      	ldr	r2, [pc, #204]	@ (8002c04 <bno055_init+0x1f0>)
 8002b38:	651a      	str	r2, [r3, #80]	@ 0x50
    imu->gyro = &bno055_gyro;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a32      	ldr	r2, [pc, #200]	@ (8002c08 <bno055_init+0x1f4>)
 8002b3e:	655a      	str	r2, [r3, #84]	@ 0x54
    imu->mag_x = &bno055_mag_x;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a32      	ldr	r2, [pc, #200]	@ (8002c0c <bno055_init+0x1f8>)
 8002b44:	659a      	str	r2, [r3, #88]	@ 0x58
    imu->mag_y = &bno055_mag_y;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a31      	ldr	r2, [pc, #196]	@ (8002c10 <bno055_init+0x1fc>)
 8002b4a:	65da      	str	r2, [r3, #92]	@ 0x5c
    imu->mag_z = &bno055_mag_z;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a31      	ldr	r2, [pc, #196]	@ (8002c14 <bno055_init+0x200>)
 8002b50:	661a      	str	r2, [r3, #96]	@ 0x60
    imu->mag = &bno055_mag;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a30      	ldr	r2, [pc, #192]	@ (8002c18 <bno055_init+0x204>)
 8002b56:	665a      	str	r2, [r3, #100]	@ 0x64
    imu->gravity_x = &bno055_gravity_x;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a30      	ldr	r2, [pc, #192]	@ (8002c1c <bno055_init+0x208>)
 8002b5c:	669a      	str	r2, [r3, #104]	@ 0x68
    imu->gravity_y = &bno055_gravity_y;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a2f      	ldr	r2, [pc, #188]	@ (8002c20 <bno055_init+0x20c>)
 8002b62:	66da      	str	r2, [r3, #108]	@ 0x6c
    imu->gravity_z = &bno055_gravity_z;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a2f      	ldr	r2, [pc, #188]	@ (8002c24 <bno055_init+0x210>)
 8002b68:	671a      	str	r2, [r3, #112]	@ 0x70
    imu->gravity = &bno055_gravity;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a2e      	ldr	r2, [pc, #184]	@ (8002c28 <bno055_init+0x214>)
 8002b6e:	675a      	str	r2, [r3, #116]	@ 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a2e      	ldr	r2, [pc, #184]	@ (8002c2c <bno055_init+0x218>)
 8002b74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    imu->euler_roll = &bno055_euler_roll;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a2d      	ldr	r2, [pc, #180]	@ (8002c30 <bno055_init+0x21c>)
 8002b7c:	679a      	str	r2, [r3, #120]	@ 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a2c      	ldr	r2, [pc, #176]	@ (8002c34 <bno055_init+0x220>)
 8002b82:	67da      	str	r2, [r3, #124]	@ 0x7c
    imu->euler = &bno055_euler;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a2c      	ldr	r2, [pc, #176]	@ (8002c38 <bno055_init+0x224>)
 8002b88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a2b      	ldr	r2, [pc, #172]	@ (8002c3c <bno055_init+0x228>)
 8002b90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a2a      	ldr	r2, [pc, #168]	@ (8002c40 <bno055_init+0x22c>)
 8002b98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a29      	ldr	r2, [pc, #164]	@ (8002c44 <bno055_init+0x230>)
 8002ba0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a28      	ldr	r2, [pc, #160]	@ (8002c48 <bno055_init+0x234>)
 8002ba8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    imu->quaternion = &bno055_quaternion;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a27      	ldr	r2, [pc, #156]	@ (8002c4c <bno055_init+0x238>)
 8002bb0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    imu->acc_config = &bno055_acc_conf;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a26      	ldr	r2, [pc, #152]	@ (8002c50 <bno055_init+0x23c>)
 8002bb8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a25      	ldr	r2, [pc, #148]	@ (8002c54 <bno055_init+0x240>)
 8002bc0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    imu->mag_config = &bno055_mag_conf;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a24      	ldr	r2, [pc, #144]	@ (8002c58 <bno055_init+0x244>)
 8002bc8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    return BNO_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd90      	pop	{r4, r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	08002c5d 	.word	0x08002c5d
 8002bdc:	08002cc5 	.word	0x08002cc5
 8002be0:	08002d45 	.word	0x08002d45
 8002be4:	08002dc5 	.word	0x08002dc5
 8002be8:	08002e45 	.word	0x08002e45
 8002bec:	08002f11 	.word	0x08002f11
 8002bf0:	08002f91 	.word	0x08002f91
 8002bf4:	08003011 	.word	0x08003011
 8002bf8:	08003091 	.word	0x08003091
 8002bfc:	0800315d 	.word	0x0800315d
 8002c00:	080031dd 	.word	0x080031dd
 8002c04:	0800325d 	.word	0x0800325d
 8002c08:	080032dd 	.word	0x080032dd
 8002c0c:	080033a9 	.word	0x080033a9
 8002c10:	08003415 	.word	0x08003415
 8002c14:	08003481 	.word	0x08003481
 8002c18:	080034ed 	.word	0x080034ed
 8002c1c:	080035a1 	.word	0x080035a1
 8002c20:	08003625 	.word	0x08003625
 8002c24:	080036a9 	.word	0x080036a9
 8002c28:	0800372d 	.word	0x0800372d
 8002c2c:	080037f9 	.word	0x080037f9
 8002c30:	0800387d 	.word	0x0800387d
 8002c34:	08003901 	.word	0x08003901
 8002c38:	08003985 	.word	0x08003985
 8002c3c:	08003a51 	.word	0x08003a51
 8002c40:	08003ac1 	.word	0x08003ac1
 8002c44:	08003b31 	.word	0x08003b31
 8002c48:	08003ba1 	.word	0x08003ba1
 8002c4c:	08003c11 	.word	0x08003c11
 8002c50:	08003ced 	.word	0x08003ced
 8002c54:	08003dbd 	.word	0x08003dbd
 8002c58:	08003e8b 	.word	0x08003e8b

08002c5c <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 8002c5c:	b590      	push	{r4, r7, lr}
 8002c5e:	b0af      	sub	sp, #188	@ 0xbc
 8002c60:	af2a      	add	r7, sp, #168	@ 0xa8
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 8002c6a:	687c      	ldr	r4, [r7, #4]
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002c70:	f107 030e 	add.w	r3, r7, #14
 8002c74:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002c76:	2334      	movs	r3, #52	@ 0x34
 8002c78:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002c7a:	4668      	mov	r0, sp
 8002c7c:	f104 0310 	add.w	r3, r4, #16
 8002c80:	229c      	movs	r2, #156	@ 0x9c
 8002c82:	4619      	mov	r1, r3
 8002c84:	f006 f818 	bl	8008cb8 <memcpy>
 8002c88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c8c:	f001 fa97 	bl	80041be <bno055_read_regs>
 8002c90:	4603      	mov	r3, r0
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <bno055_temperature+0x42>
        return err;
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	e00d      	b.n	8002cba <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	7bdb      	ldrb	r3, [r3, #15]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d004      	beq.n	8002cb0 <bno055_temperature+0x54>
 8002ca6:	7bbb      	ldrb	r3, [r7, #14]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	b25b      	sxtb	r3, r3
 8002cae:	e001      	b.n	8002cb4 <bno055_temperature+0x58>
 8002cb0:	7bbb      	ldrb	r3, [r7, #14]
 8002cb2:	b25b      	sxtb	r3, r3
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd90      	pop	{r4, r7, pc}
	...

08002cc4 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 8002cc4:	b590      	push	{r4, r7, lr}
 8002cc6:	b0af      	sub	sp, #188	@ 0xbc
 8002cc8:	af2a      	add	r7, sp, #168	@ 0xa8
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 8002cce:	687c      	ldr	r4, [r7, #4]
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002cd4:	f107 030c 	add.w	r3, r7, #12
 8002cd8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002cda:	2308      	movs	r3, #8
 8002cdc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002cde:	4668      	mov	r0, sp
 8002ce0:	f104 0310 	add.w	r3, r4, #16
 8002ce4:	229c      	movs	r2, #156	@ 0x9c
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	f005 ffe6 	bl	8008cb8 <memcpy>
 8002cec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cf0:	f001 fa65 	bl	80041be <bno055_read_regs>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	73fb      	strb	r3, [r7, #15]
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <bno055_acc_x+0x3e>
        return err;
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	e019      	b.n	8002d36 <bno055_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002d02:	7b7b      	ldrb	r3, [r7, #13]
 8002d04:	021b      	lsls	r3, r3, #8
 8002d06:	b21a      	sxth	r2, r3
 8002d08:	7b3b      	ldrb	r3, [r7, #12]
 8002d0a:	b21b      	sxth	r3, r3
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	b21b      	sxth	r3, r3
 8002d10:	ee07 3a90 	vmov	s15, r3
 8002d14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d102      	bne.n	8002d26 <bno055_acc_x+0x62>
 8002d20:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002d40 <bno055_acc_x+0x7c>
 8002d24:	e001      	b.n	8002d2a <bno055_acc_x+0x66>
 8002d26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002d2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002d34:	2300      	movs	r3, #0
};
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd90      	pop	{r4, r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	42c80000 	.word	0x42c80000

08002d44 <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b0af      	sub	sp, #188	@ 0xbc
 8002d48:	af2a      	add	r7, sp, #168	@ 0xa8
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8002d4e:	687c      	ldr	r4, [r7, #4]
 8002d50:	2302      	movs	r3, #2
 8002d52:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002d54:	f107 030c 	add.w	r3, r7, #12
 8002d58:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002d5a:	230a      	movs	r3, #10
 8002d5c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002d5e:	4668      	mov	r0, sp
 8002d60:	f104 0310 	add.w	r3, r4, #16
 8002d64:	229c      	movs	r2, #156	@ 0x9c
 8002d66:	4619      	mov	r1, r3
 8002d68:	f005 ffa6 	bl	8008cb8 <memcpy>
 8002d6c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d70:	f001 fa25 	bl	80041be <bno055_read_regs>
 8002d74:	4603      	mov	r3, r0
 8002d76:	73fb      	strb	r3, [r7, #15]
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <bno055_acc_y+0x3e>
        return err;
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	e019      	b.n	8002db6 <bno055_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002d82:	7b7b      	ldrb	r3, [r7, #13]
 8002d84:	021b      	lsls	r3, r3, #8
 8002d86:	b21a      	sxth	r2, r3
 8002d88:	7b3b      	ldrb	r3, [r7, #12]
 8002d8a:	b21b      	sxth	r3, r3
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	b21b      	sxth	r3, r3
 8002d90:	ee07 3a90 	vmov	s15, r3
 8002d94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d102      	bne.n	8002da6 <bno055_acc_y+0x62>
 8002da0:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002dc0 <bno055_acc_y+0x7c>
 8002da4:	e001      	b.n	8002daa <bno055_acc_y+0x66>
 8002da6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002db4:	2300      	movs	r3, #0
};
 8002db6:	4618      	mov	r0, r3
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd90      	pop	{r4, r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	42c80000 	.word	0x42c80000

08002dc4 <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 8002dc4:	b590      	push	{r4, r7, lr}
 8002dc6:	b0af      	sub	sp, #188	@ 0xbc
 8002dc8:	af2a      	add	r7, sp, #168	@ 0xa8
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8002dce:	687c      	ldr	r4, [r7, #4]
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002dd4:	f107 030c 	add.w	r3, r7, #12
 8002dd8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002dda:	230c      	movs	r3, #12
 8002ddc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002dde:	4668      	mov	r0, sp
 8002de0:	f104 0310 	add.w	r3, r4, #16
 8002de4:	229c      	movs	r2, #156	@ 0x9c
 8002de6:	4619      	mov	r1, r3
 8002de8:	f005 ff66 	bl	8008cb8 <memcpy>
 8002dec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002df0:	f001 f9e5 	bl	80041be <bno055_read_regs>
 8002df4:	4603      	mov	r3, r0
 8002df6:	73fb      	strb	r3, [r7, #15]
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <bno055_acc_z+0x3e>
        return err;
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	e019      	b.n	8002e36 <bno055_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002e02:	7b7b      	ldrb	r3, [r7, #13]
 8002e04:	021b      	lsls	r3, r3, #8
 8002e06:	b21a      	sxth	r2, r3
 8002e08:	7b3b      	ldrb	r3, [r7, #12]
 8002e0a:	b21b      	sxth	r3, r3
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	b21b      	sxth	r3, r3
 8002e10:	ee07 3a90 	vmov	s15, r3
 8002e14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d102      	bne.n	8002e26 <bno055_acc_z+0x62>
 8002e20:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002e40 <bno055_acc_z+0x7c>
 8002e24:	e001      	b.n	8002e2a <bno055_acc_z+0x66>
 8002e26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002e34:	2300      	movs	r3, #0
};
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd90      	pop	{r4, r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	42c80000 	.word	0x42c80000

08002e44 <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8002e44:	b590      	push	{r4, r7, lr}
 8002e46:	b0b1      	sub	sp, #196	@ 0xc4
 8002e48:	af2a      	add	r7, sp, #168	@ 0xa8
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 8002e4e:	687c      	ldr	r4, [r7, #4]
 8002e50:	2306      	movs	r3, #6
 8002e52:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002e54:	f107 0308 	add.w	r3, r7, #8
 8002e58:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002e5a:	2308      	movs	r3, #8
 8002e5c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002e5e:	4668      	mov	r0, sp
 8002e60:	f104 0310 	add.w	r3, r4, #16
 8002e64:	229c      	movs	r2, #156	@ 0x9c
 8002e66:	4619      	mov	r1, r3
 8002e68:	f005 ff26 	bl	8008cb8 <memcpy>
 8002e6c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e70:	f001 f9a5 	bl	80041be <bno055_read_regs>
 8002e74:	4603      	mov	r3, r0
 8002e76:	75fb      	strb	r3, [r7, #23]
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <bno055_acc+0x3e>
        return err;
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
 8002e80:	e03f      	b.n	8002f02 <bno055_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <bno055_acc+0x4a>
 8002e8a:	4b20      	ldr	r3, [pc, #128]	@ (8002f0c <bno055_acc+0xc8>)
 8002e8c:	e001      	b.n	8002e92 <bno055_acc+0x4e>
 8002e8e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002e92:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8002e94:	7a7b      	ldrb	r3, [r7, #9]
 8002e96:	021b      	lsls	r3, r3, #8
 8002e98:	b21a      	sxth	r2, r3
 8002e9a:	7a3b      	ldrb	r3, [r7, #8]
 8002e9c:	b21b      	sxth	r3, r3
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	b21b      	sxth	r3, r3
 8002ea2:	ee07 3a90 	vmov	s15, r3
 8002ea6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002eaa:	ed97 7a04 	vldr	s14, [r7, #16]
 8002eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8002eb8:	7afb      	ldrb	r3, [r7, #11]
 8002eba:	021b      	lsls	r3, r3, #8
 8002ebc:	b21a      	sxth	r2, r3
 8002ebe:	7abb      	ldrb	r3, [r7, #10]
 8002ec0:	b21b      	sxth	r3, r3
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	b21b      	sxth	r3, r3
 8002ec6:	ee07 3a90 	vmov	s15, r3
 8002eca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ece:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8002edc:	7b7b      	ldrb	r3, [r7, #13]
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	b21a      	sxth	r2, r3
 8002ee2:	7b3b      	ldrb	r3, [r7, #12]
 8002ee4:	b21b      	sxth	r3, r3
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	b21b      	sxth	r3, r3
 8002eea:	ee07 3a90 	vmov	s15, r3
 8002eee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ef2:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8002f00:	2300      	movs	r3, #0
};
 8002f02:	4618      	mov	r0, r3
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd90      	pop	{r4, r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	42c80000 	.word	0x42c80000

08002f10 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 8002f10:	b590      	push	{r4, r7, lr}
 8002f12:	b0af      	sub	sp, #188	@ 0xbc
 8002f14:	af2a      	add	r7, sp, #168	@ 0xa8
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8002f1a:	687c      	ldr	r4, [r7, #4]
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002f20:	f107 030c 	add.w	r3, r7, #12
 8002f24:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002f26:	2328      	movs	r3, #40	@ 0x28
 8002f28:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002f2a:	4668      	mov	r0, sp
 8002f2c:	f104 0310 	add.w	r3, r4, #16
 8002f30:	229c      	movs	r2, #156	@ 0x9c
 8002f32:	4619      	mov	r1, r3
 8002f34:	f005 fec0 	bl	8008cb8 <memcpy>
 8002f38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002f3c:	f001 f93f 	bl	80041be <bno055_read_regs>
 8002f40:	4603      	mov	r3, r0
 8002f42:	73fb      	strb	r3, [r7, #15]
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <bno055_linear_acc_x+0x3e>
        return err;
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	e019      	b.n	8002f82 <bno055_linear_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002f4e:	7b7b      	ldrb	r3, [r7, #13]
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	b21a      	sxth	r2, r3
 8002f54:	7b3b      	ldrb	r3, [r7, #12]
 8002f56:	b21b      	sxth	r3, r3
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	b21b      	sxth	r3, r3
 8002f5c:	ee07 3a90 	vmov	s15, r3
 8002f60:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d102      	bne.n	8002f72 <bno055_linear_acc_x+0x62>
 8002f6c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002f8c <bno055_linear_acc_x+0x7c>
 8002f70:	e001      	b.n	8002f76 <bno055_linear_acc_x+0x66>
 8002f72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002f80:	2300      	movs	r3, #0
};
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd90      	pop	{r4, r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	42c80000 	.word	0x42c80000

08002f90 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b0af      	sub	sp, #188	@ 0xbc
 8002f94:	af2a      	add	r7, sp, #168	@ 0xa8
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8002f9a:	687c      	ldr	r4, [r7, #4]
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002fa0:	f107 030c 	add.w	r3, r7, #12
 8002fa4:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002fa6:	232a      	movs	r3, #42	@ 0x2a
 8002fa8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002faa:	4668      	mov	r0, sp
 8002fac:	f104 0310 	add.w	r3, r4, #16
 8002fb0:	229c      	movs	r2, #156	@ 0x9c
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	f005 fe80 	bl	8008cb8 <memcpy>
 8002fb8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002fbc:	f001 f8ff 	bl	80041be <bno055_read_regs>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	73fb      	strb	r3, [r7, #15]
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <bno055_linear_acc_y+0x3e>
        return err;
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	e019      	b.n	8003002 <bno055_linear_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002fce:	7b7b      	ldrb	r3, [r7, #13]
 8002fd0:	021b      	lsls	r3, r3, #8
 8002fd2:	b21a      	sxth	r2, r3
 8002fd4:	7b3b      	ldrb	r3, [r7, #12]
 8002fd6:	b21b      	sxth	r3, r3
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	b21b      	sxth	r3, r3
 8002fdc:	ee07 3a90 	vmov	s15, r3
 8002fe0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d102      	bne.n	8002ff2 <bno055_linear_acc_y+0x62>
 8002fec:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800300c <bno055_linear_acc_y+0x7c>
 8002ff0:	e001      	b.n	8002ff6 <bno055_linear_acc_y+0x66>
 8002ff2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8003000:	2300      	movs	r3, #0
};
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	bd90      	pop	{r4, r7, pc}
 800300a:	bf00      	nop
 800300c:	42c80000 	.word	0x42c80000

08003010 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 8003010:	b590      	push	{r4, r7, lr}
 8003012:	b0af      	sub	sp, #188	@ 0xbc
 8003014:	af2a      	add	r7, sp, #168	@ 0xa8
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800301a:	687c      	ldr	r4, [r7, #4]
 800301c:	2302      	movs	r3, #2
 800301e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003020:	f107 030c 	add.w	r3, r7, #12
 8003024:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003026:	232c      	movs	r3, #44	@ 0x2c
 8003028:	9327      	str	r3, [sp, #156]	@ 0x9c
 800302a:	4668      	mov	r0, sp
 800302c:	f104 0310 	add.w	r3, r4, #16
 8003030:	229c      	movs	r2, #156	@ 0x9c
 8003032:	4619      	mov	r1, r3
 8003034:	f005 fe40 	bl	8008cb8 <memcpy>
 8003038:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800303c:	f001 f8bf 	bl	80041be <bno055_read_regs>
 8003040:	4603      	mov	r3, r0
 8003042:	73fb      	strb	r3, [r7, #15]
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <bno055_linear_acc_z+0x3e>
        return err;
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	e019      	b.n	8003082 <bno055_linear_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800304e:	7b7b      	ldrb	r3, [r7, #13]
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	b21a      	sxth	r2, r3
 8003054:	7b3b      	ldrb	r3, [r7, #12]
 8003056:	b21b      	sxth	r3, r3
 8003058:	4313      	orrs	r3, r2
 800305a:	b21b      	sxth	r3, r3
 800305c:	ee07 3a90 	vmov	s15, r3
 8003060:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8003068:	2b00      	cmp	r3, #0
 800306a:	d102      	bne.n	8003072 <bno055_linear_acc_z+0x62>
 800306c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800308c <bno055_linear_acc_z+0x7c>
 8003070:	e001      	b.n	8003076 <bno055_linear_acc_z+0x66>
 8003072:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8003076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8003080:	2300      	movs	r3, #0
};
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	bd90      	pop	{r4, r7, pc}
 800308a:	bf00      	nop
 800308c:	42c80000 	.word	0x42c80000

08003090 <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8003090:	b590      	push	{r4, r7, lr}
 8003092:	b0b1      	sub	sp, #196	@ 0xc4
 8003094:	af2a      	add	r7, sp, #168	@ 0xa8
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 800309a:	687c      	ldr	r4, [r7, #4]
 800309c:	2306      	movs	r3, #6
 800309e:	9329      	str	r3, [sp, #164]	@ 0xa4
 80030a0:	f107 0308 	add.w	r3, r7, #8
 80030a4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80030a6:	2328      	movs	r3, #40	@ 0x28
 80030a8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80030aa:	4668      	mov	r0, sp
 80030ac:	f104 0310 	add.w	r3, r4, #16
 80030b0:	229c      	movs	r2, #156	@ 0x9c
 80030b2:	4619      	mov	r1, r3
 80030b4:	f005 fe00 	bl	8008cb8 <memcpy>
 80030b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80030bc:	f001 f87f 	bl	80041be <bno055_read_regs>
 80030c0:	4603      	mov	r3, r0
 80030c2:	75fb      	strb	r3, [r7, #23]
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <bno055_linear_acc+0x3e>
        return err;
 80030ca:	7dfb      	ldrb	r3, [r7, #23]
 80030cc:	e03f      	b.n	800314e <bno055_linear_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <bno055_linear_acc+0x4a>
 80030d6:	4b20      	ldr	r3, [pc, #128]	@ (8003158 <bno055_linear_acc+0xc8>)
 80030d8:	e001      	b.n	80030de <bno055_linear_acc+0x4e>
 80030da:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80030de:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 80030e0:	7a7b      	ldrb	r3, [r7, #9]
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	b21a      	sxth	r2, r3
 80030e6:	7a3b      	ldrb	r3, [r7, #8]
 80030e8:	b21b      	sxth	r3, r3
 80030ea:	4313      	orrs	r3, r2
 80030ec:	b21b      	sxth	r3, r3
 80030ee:	ee07 3a90 	vmov	s15, r3
 80030f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80030f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80030fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8003104:	7afb      	ldrb	r3, [r7, #11]
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	b21a      	sxth	r2, r3
 800310a:	7abb      	ldrb	r3, [r7, #10]
 800310c:	b21b      	sxth	r3, r3
 800310e:	4313      	orrs	r3, r2
 8003110:	b21b      	sxth	r3, r3
 8003112:	ee07 3a90 	vmov	s15, r3
 8003116:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800311a:	ed97 7a04 	vldr	s14, [r7, #16]
 800311e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8003128:	7b7b      	ldrb	r3, [r7, #13]
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	b21a      	sxth	r2, r3
 800312e:	7b3b      	ldrb	r3, [r7, #12]
 8003130:	b21b      	sxth	r3, r3
 8003132:	4313      	orrs	r3, r2
 8003134:	b21b      	sxth	r3, r3
 8003136:	ee07 3a90 	vmov	s15, r3
 800313a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800313e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 800314c:	2300      	movs	r3, #0
};
 800314e:	4618      	mov	r0, r3
 8003150:	371c      	adds	r7, #28
 8003152:	46bd      	mov	sp, r7
 8003154:	bd90      	pop	{r4, r7, pc}
 8003156:	bf00      	nop
 8003158:	42c80000 	.word	0x42c80000

0800315c <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 800315c:	b590      	push	{r4, r7, lr}
 800315e:	b0af      	sub	sp, #188	@ 0xbc
 8003160:	af2a      	add	r7, sp, #168	@ 0xa8
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 8003166:	687c      	ldr	r4, [r7, #4]
 8003168:	2302      	movs	r3, #2
 800316a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800316c:	f107 030c 	add.w	r3, r7, #12
 8003170:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003172:	2314      	movs	r3, #20
 8003174:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003176:	4668      	mov	r0, sp
 8003178:	f104 0310 	add.w	r3, r4, #16
 800317c:	229c      	movs	r2, #156	@ 0x9c
 800317e:	4619      	mov	r1, r3
 8003180:	f005 fd9a 	bl	8008cb8 <memcpy>
 8003184:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003188:	f001 f819 	bl	80041be <bno055_read_regs>
 800318c:	4603      	mov	r3, r0
 800318e:	73fb      	strb	r3, [r7, #15]
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <bno055_gyro_x+0x3e>
        return err;
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	e019      	b.n	80031ce <bno055_gyro_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800319a:	7b7b      	ldrb	r3, [r7, #13]
 800319c:	021b      	lsls	r3, r3, #8
 800319e:	b21a      	sxth	r2, r3
 80031a0:	7b3b      	ldrb	r3, [r7, #12]
 80031a2:	b21b      	sxth	r3, r3
 80031a4:	4313      	orrs	r3, r2
 80031a6:	b21b      	sxth	r3, r3
 80031a8:	ee07 3a90 	vmov	s15, r3
 80031ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d102      	bne.n	80031be <bno055_gyro_x+0x62>
 80031b8:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80031bc:	e001      	b.n	80031c2 <bno055_gyro_x+0x66>
 80031be:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80031d8 <bno055_gyro_x+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 80031c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80031cc:	2300      	movs	r3, #0
};
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd90      	pop	{r4, r7, pc}
 80031d6:	bf00      	nop
 80031d8:	44610000 	.word	0x44610000

080031dc <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 80031dc:	b590      	push	{r4, r7, lr}
 80031de:	b0af      	sub	sp, #188	@ 0xbc
 80031e0:	af2a      	add	r7, sp, #168	@ 0xa8
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80031e6:	687c      	ldr	r4, [r7, #4]
 80031e8:	2302      	movs	r3, #2
 80031ea:	9329      	str	r3, [sp, #164]	@ 0xa4
 80031ec:	f107 030c 	add.w	r3, r7, #12
 80031f0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80031f2:	2316      	movs	r3, #22
 80031f4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80031f6:	4668      	mov	r0, sp
 80031f8:	f104 0310 	add.w	r3, r4, #16
 80031fc:	229c      	movs	r2, #156	@ 0x9c
 80031fe:	4619      	mov	r1, r3
 8003200:	f005 fd5a 	bl	8008cb8 <memcpy>
 8003204:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003208:	f000 ffd9 	bl	80041be <bno055_read_regs>
 800320c:	4603      	mov	r3, r0
 800320e:	73fb      	strb	r3, [r7, #15]
 8003210:	7bfb      	ldrb	r3, [r7, #15]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <bno055_gyro_y+0x3e>
        return err;
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	e019      	b.n	800324e <bno055_gyro_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800321a:	7b7b      	ldrb	r3, [r7, #13]
 800321c:	021b      	lsls	r3, r3, #8
 800321e:	b21a      	sxth	r2, r3
 8003220:	7b3b      	ldrb	r3, [r7, #12]
 8003222:	b21b      	sxth	r3, r3
 8003224:	4313      	orrs	r3, r2
 8003226:	b21b      	sxth	r3, r3
 8003228:	ee07 3a90 	vmov	s15, r3
 800322c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8003234:	2b00      	cmp	r3, #0
 8003236:	d102      	bne.n	800323e <bno055_gyro_y+0x62>
 8003238:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 800323c:	e001      	b.n	8003242 <bno055_gyro_y+0x66>
 800323e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8003258 <bno055_gyro_y+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8003242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800324c:	2300      	movs	r3, #0
};
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	bd90      	pop	{r4, r7, pc}
 8003256:	bf00      	nop
 8003258:	44610000 	.word	0x44610000

0800325c <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 800325c:	b590      	push	{r4, r7, lr}
 800325e:	b0af      	sub	sp, #188	@ 0xbc
 8003260:	af2a      	add	r7, sp, #168	@ 0xa8
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8003266:	687c      	ldr	r4, [r7, #4]
 8003268:	2302      	movs	r3, #2
 800326a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800326c:	f107 030c 	add.w	r3, r7, #12
 8003270:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003272:	2318      	movs	r3, #24
 8003274:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003276:	4668      	mov	r0, sp
 8003278:	f104 0310 	add.w	r3, r4, #16
 800327c:	229c      	movs	r2, #156	@ 0x9c
 800327e:	4619      	mov	r1, r3
 8003280:	f005 fd1a 	bl	8008cb8 <memcpy>
 8003284:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003288:	f000 ff99 	bl	80041be <bno055_read_regs>
 800328c:	4603      	mov	r3, r0
 800328e:	73fb      	strb	r3, [r7, #15]
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <bno055_gyro_z+0x3e>
        return err;
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	e019      	b.n	80032ce <bno055_gyro_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800329a:	7b7b      	ldrb	r3, [r7, #13]
 800329c:	021b      	lsls	r3, r3, #8
 800329e:	b21a      	sxth	r2, r3
 80032a0:	7b3b      	ldrb	r3, [r7, #12]
 80032a2:	b21b      	sxth	r3, r3
 80032a4:	4313      	orrs	r3, r2
 80032a6:	b21b      	sxth	r3, r3
 80032a8:	ee07 3a90 	vmov	s15, r3
 80032ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d102      	bne.n	80032be <bno055_gyro_z+0x62>
 80032b8:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80032bc:	e001      	b.n	80032c2 <bno055_gyro_z+0x66>
 80032be:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80032d8 <bno055_gyro_z+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 80032c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80032cc:	2300      	movs	r3, #0
};
 80032ce:	4618      	mov	r0, r3
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd90      	pop	{r4, r7, pc}
 80032d6:	bf00      	nop
 80032d8:	44610000 	.word	0x44610000

080032dc <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 80032dc:	b590      	push	{r4, r7, lr}
 80032de:	b0b1      	sub	sp, #196	@ 0xc4
 80032e0:	af2a      	add	r7, sp, #168	@ 0xa8
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 80032e6:	687c      	ldr	r4, [r7, #4]
 80032e8:	2306      	movs	r3, #6
 80032ea:	9329      	str	r3, [sp, #164]	@ 0xa4
 80032ec:	f107 0308 	add.w	r3, r7, #8
 80032f0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80032f2:	2314      	movs	r3, #20
 80032f4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80032f6:	4668      	mov	r0, sp
 80032f8:	f104 0310 	add.w	r3, r4, #16
 80032fc:	229c      	movs	r2, #156	@ 0x9c
 80032fe:	4619      	mov	r1, r3
 8003300:	f005 fcda 	bl	8008cb8 <memcpy>
 8003304:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003308:	f000 ff59 	bl	80041be <bno055_read_regs>
 800330c:	4603      	mov	r3, r0
 800330e:	75fb      	strb	r3, [r7, #23]
 8003310:	7dfb      	ldrb	r3, [r7, #23]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <bno055_gyro+0x3e>
        return err;
 8003316:	7dfb      	ldrb	r3, [r7, #23]
 8003318:	e03f      	b.n	800339a <bno055_gyro+0xbe>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 800331e:	2b00      	cmp	r3, #0
 8003320:	d102      	bne.n	8003328 <bno055_gyro+0x4c>
 8003322:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003326:	e000      	b.n	800332a <bno055_gyro+0x4e>
 8003328:	4b1e      	ldr	r3, [pc, #120]	@ (80033a4 <bno055_gyro+0xc8>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 800332a:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 800332c:	7a7b      	ldrb	r3, [r7, #9]
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	b21a      	sxth	r2, r3
 8003332:	7a3b      	ldrb	r3, [r7, #8]
 8003334:	b21b      	sxth	r3, r3
 8003336:	4313      	orrs	r3, r2
 8003338:	b21b      	sxth	r3, r3
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003342:	ed97 7a04 	vldr	s14, [r7, #16]
 8003346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8003350:	7afb      	ldrb	r3, [r7, #11]
 8003352:	021b      	lsls	r3, r3, #8
 8003354:	b21a      	sxth	r2, r3
 8003356:	7abb      	ldrb	r3, [r7, #10]
 8003358:	b21b      	sxth	r3, r3
 800335a:	4313      	orrs	r3, r2
 800335c:	b21b      	sxth	r3, r3
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003366:	ed97 7a04 	vldr	s14, [r7, #16]
 800336a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8003374:	7b7b      	ldrb	r3, [r7, #13]
 8003376:	021b      	lsls	r3, r3, #8
 8003378:	b21a      	sxth	r2, r3
 800337a:	7b3b      	ldrb	r3, [r7, #12]
 800337c:	b21b      	sxth	r3, r3
 800337e:	4313      	orrs	r3, r2
 8003380:	b21b      	sxth	r3, r3
 8003382:	ee07 3a90 	vmov	s15, r3
 8003386:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800338a:	ed97 7a04 	vldr	s14, [r7, #16]
 800338e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	371c      	adds	r7, #28
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd90      	pop	{r4, r7, pc}
 80033a2:	bf00      	nop
 80033a4:	44610000 	.word	0x44610000

080033a8 <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 80033a8:	b590      	push	{r4, r7, lr}
 80033aa:	b0af      	sub	sp, #188	@ 0xbc
 80033ac:	af2a      	add	r7, sp, #168	@ 0xa8
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 80033b2:	687c      	ldr	r4, [r7, #4]
 80033b4:	2302      	movs	r3, #2
 80033b6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80033b8:	f107 030c 	add.w	r3, r7, #12
 80033bc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80033be:	230e      	movs	r3, #14
 80033c0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80033c2:	4668      	mov	r0, sp
 80033c4:	f104 0310 	add.w	r3, r4, #16
 80033c8:	229c      	movs	r2, #156	@ 0x9c
 80033ca:	4619      	mov	r1, r3
 80033cc:	f005 fc74 	bl	8008cb8 <memcpy>
 80033d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80033d4:	f000 fef3 	bl	80041be <bno055_read_regs>
 80033d8:	4603      	mov	r3, r0
 80033da:	73fb      	strb	r3, [r7, #15]
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <bno055_mag_x+0x3e>
        return err;
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	e012      	b.n	800340c <bno055_mag_x+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80033e6:	7b7b      	ldrb	r3, [r7, #13]
 80033e8:	021b      	lsls	r3, r3, #8
 80033ea:	b21a      	sxth	r2, r3
 80033ec:	7b3b      	ldrb	r3, [r7, #12]
 80033ee:	b21b      	sxth	r3, r3
 80033f0:	4313      	orrs	r3, r2
 80033f2:	b21b      	sxth	r3, r3
 80033f4:	ee07 3a90 	vmov	s15, r3
 80033f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033fc:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8003400:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	bd90      	pop	{r4, r7, pc}

08003414 <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 8003414:	b590      	push	{r4, r7, lr}
 8003416:	b0af      	sub	sp, #188	@ 0xbc
 8003418:	af2a      	add	r7, sp, #168	@ 0xa8
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800341e:	687c      	ldr	r4, [r7, #4]
 8003420:	2302      	movs	r3, #2
 8003422:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003424:	f107 030c 	add.w	r3, r7, #12
 8003428:	9328      	str	r3, [sp, #160]	@ 0xa0
 800342a:	2310      	movs	r3, #16
 800342c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800342e:	4668      	mov	r0, sp
 8003430:	f104 0310 	add.w	r3, r4, #16
 8003434:	229c      	movs	r2, #156	@ 0x9c
 8003436:	4619      	mov	r1, r3
 8003438:	f005 fc3e 	bl	8008cb8 <memcpy>
 800343c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003440:	f000 febd 	bl	80041be <bno055_read_regs>
 8003444:	4603      	mov	r3, r0
 8003446:	73fb      	strb	r3, [r7, #15]
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <bno055_mag_y+0x3e>
        return err;
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	e012      	b.n	8003478 <bno055_mag_y+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8003452:	7b7b      	ldrb	r3, [r7, #13]
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	b21a      	sxth	r2, r3
 8003458:	7b3b      	ldrb	r3, [r7, #12]
 800345a:	b21b      	sxth	r3, r3
 800345c:	4313      	orrs	r3, r2
 800345e:	b21b      	sxth	r3, r3
 8003460:	ee07 3a90 	vmov	s15, r3
 8003464:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003468:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800346c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	bd90      	pop	{r4, r7, pc}

08003480 <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b0af      	sub	sp, #188	@ 0xbc
 8003484:	af2a      	add	r7, sp, #168	@ 0xa8
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800348a:	687c      	ldr	r4, [r7, #4]
 800348c:	2302      	movs	r3, #2
 800348e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003490:	f107 030c 	add.w	r3, r7, #12
 8003494:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003496:	2312      	movs	r3, #18
 8003498:	9327      	str	r3, [sp, #156]	@ 0x9c
 800349a:	4668      	mov	r0, sp
 800349c:	f104 0310 	add.w	r3, r4, #16
 80034a0:	229c      	movs	r2, #156	@ 0x9c
 80034a2:	4619      	mov	r1, r3
 80034a4:	f005 fc08 	bl	8008cb8 <memcpy>
 80034a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80034ac:	f000 fe87 	bl	80041be <bno055_read_regs>
 80034b0:	4603      	mov	r3, r0
 80034b2:	73fb      	strb	r3, [r7, #15]
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <bno055_mag_z+0x3e>
        return err;
 80034ba:	7bfb      	ldrb	r3, [r7, #15]
 80034bc:	e012      	b.n	80034e4 <bno055_mag_z+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80034be:	7b7b      	ldrb	r3, [r7, #13]
 80034c0:	021b      	lsls	r3, r3, #8
 80034c2:	b21a      	sxth	r2, r3
 80034c4:	7b3b      	ldrb	r3, [r7, #12]
 80034c6:	b21b      	sxth	r3, r3
 80034c8:	4313      	orrs	r3, r2
 80034ca:	b21b      	sxth	r3, r3
 80034cc:	ee07 3a90 	vmov	s15, r3
 80034d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034d4:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80034d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd90      	pop	{r4, r7, pc}

080034ec <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 80034ec:	b590      	push	{r4, r7, lr}
 80034ee:	b0af      	sub	sp, #188	@ 0xbc
 80034f0:	af2a      	add	r7, sp, #168	@ 0xa8
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 80034f6:	687c      	ldr	r4, [r7, #4]
 80034f8:	2306      	movs	r3, #6
 80034fa:	9329      	str	r3, [sp, #164]	@ 0xa4
 80034fc:	f107 0308 	add.w	r3, r7, #8
 8003500:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003502:	230e      	movs	r3, #14
 8003504:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003506:	4668      	mov	r0, sp
 8003508:	f104 0310 	add.w	r3, r4, #16
 800350c:	229c      	movs	r2, #156	@ 0x9c
 800350e:	4619      	mov	r1, r3
 8003510:	f005 fbd2 	bl	8008cb8 <memcpy>
 8003514:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003518:	f000 fe51 	bl	80041be <bno055_read_regs>
 800351c:	4603      	mov	r3, r0
 800351e:	73fb      	strb	r3, [r7, #15]
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <bno055_mag+0x3e>
        return err;
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	e036      	b.n	8003598 <bno055_mag+0xac>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 800352a:	7a7b      	ldrb	r3, [r7, #9]
 800352c:	021b      	lsls	r3, r3, #8
 800352e:	b21a      	sxth	r2, r3
 8003530:	7a3b      	ldrb	r3, [r7, #8]
 8003532:	b21b      	sxth	r3, r3
 8003534:	4313      	orrs	r3, r2
 8003536:	b21b      	sxth	r3, r3
 8003538:	ee07 3a90 	vmov	s15, r3
 800353c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003540:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8003544:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 800354e:	7afb      	ldrb	r3, [r7, #11]
 8003550:	021b      	lsls	r3, r3, #8
 8003552:	b21a      	sxth	r2, r3
 8003554:	7abb      	ldrb	r3, [r7, #10]
 8003556:	b21b      	sxth	r3, r3
 8003558:	4313      	orrs	r3, r2
 800355a:	b21b      	sxth	r3, r3
 800355c:	ee07 3a90 	vmov	s15, r3
 8003560:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003564:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8003568:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 8003572:	7b7b      	ldrb	r3, [r7, #13]
 8003574:	021b      	lsls	r3, r3, #8
 8003576:	b21a      	sxth	r2, r3
 8003578:	7b3b      	ldrb	r3, [r7, #12]
 800357a:	b21b      	sxth	r3, r3
 800357c:	4313      	orrs	r3, r2
 800357e:	b21b      	sxth	r3, r3
 8003580:	ee07 3a90 	vmov	s15, r3
 8003584:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003588:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800358c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8003596:	2300      	movs	r3, #0
};
 8003598:	4618      	mov	r0, r3
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	bd90      	pop	{r4, r7, pc}

080035a0 <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b0b1      	sub	sp, #196	@ 0xc4
 80035a4:	af2a      	add	r7, sp, #168	@ 0xa8
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 80035aa:	687c      	ldr	r4, [r7, #4]
 80035ac:	2302      	movs	r3, #2
 80035ae:	9329      	str	r3, [sp, #164]	@ 0xa4
 80035b0:	f107 030c 	add.w	r3, r7, #12
 80035b4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80035b6:	232e      	movs	r3, #46	@ 0x2e
 80035b8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80035ba:	4668      	mov	r0, sp
 80035bc:	f104 0310 	add.w	r3, r4, #16
 80035c0:	229c      	movs	r2, #156	@ 0x9c
 80035c2:	4619      	mov	r1, r3
 80035c4:	f005 fb78 	bl	8008cb8 <memcpy>
 80035c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80035cc:	f000 fdf7 	bl	80041be <bno055_read_regs>
 80035d0:	4603      	mov	r3, r0
 80035d2:	75fb      	strb	r3, [r7, #23]
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <bno055_gravity_x+0x3e>
        return err;
 80035da:	7dfb      	ldrb	r3, [r7, #23]
 80035dc:	e01b      	b.n	8003616 <bno055_gravity_x+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <bno055_gravity_x+0x4a>
 80035e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003620 <bno055_gravity_x+0x80>)
 80035e8:	e001      	b.n	80035ee <bno055_gravity_x+0x4e>
 80035ea:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80035ee:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80035f0:	7b7b      	ldrb	r3, [r7, #13]
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	b21a      	sxth	r2, r3
 80035f6:	7b3b      	ldrb	r3, [r7, #12]
 80035f8:	b21b      	sxth	r3, r3
 80035fa:	4313      	orrs	r3, r2
 80035fc:	b21b      	sxth	r3, r3
 80035fe:	ee07 3a90 	vmov	s15, r3
 8003602:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003606:	ed97 7a04 	vldr	s14, [r7, #16]
 800360a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	bd90      	pop	{r4, r7, pc}
 800361e:	bf00      	nop
 8003620:	42c80000 	.word	0x42c80000

08003624 <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b0b1      	sub	sp, #196	@ 0xc4
 8003628:	af2a      	add	r7, sp, #168	@ 0xa8
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800362e:	687c      	ldr	r4, [r7, #4]
 8003630:	2302      	movs	r3, #2
 8003632:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003634:	f107 030c 	add.w	r3, r7, #12
 8003638:	9328      	str	r3, [sp, #160]	@ 0xa0
 800363a:	2330      	movs	r3, #48	@ 0x30
 800363c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800363e:	4668      	mov	r0, sp
 8003640:	f104 0310 	add.w	r3, r4, #16
 8003644:	229c      	movs	r2, #156	@ 0x9c
 8003646:	4619      	mov	r1, r3
 8003648:	f005 fb36 	bl	8008cb8 <memcpy>
 800364c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003650:	f000 fdb5 	bl	80041be <bno055_read_regs>
 8003654:	4603      	mov	r3, r0
 8003656:	75fb      	strb	r3, [r7, #23]
 8003658:	7dfb      	ldrb	r3, [r7, #23]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <bno055_gravity_y+0x3e>
        return err;
 800365e:	7dfb      	ldrb	r3, [r7, #23]
 8003660:	e01b      	b.n	800369a <bno055_gravity_y+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <bno055_gravity_y+0x4a>
 800366a:	4b0e      	ldr	r3, [pc, #56]	@ (80036a4 <bno055_gravity_y+0x80>)
 800366c:	e001      	b.n	8003672 <bno055_gravity_y+0x4e>
 800366e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8003672:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8003674:	7b7b      	ldrb	r3, [r7, #13]
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	b21a      	sxth	r2, r3
 800367a:	7b3b      	ldrb	r3, [r7, #12]
 800367c:	b21b      	sxth	r3, r3
 800367e:	4313      	orrs	r3, r2
 8003680:	b21b      	sxth	r3, r3
 8003682:	ee07 3a90 	vmov	s15, r3
 8003686:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800368a:	ed97 7a04 	vldr	s14, [r7, #16]
 800368e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd90      	pop	{r4, r7, pc}
 80036a2:	bf00      	nop
 80036a4:	42c80000 	.word	0x42c80000

080036a8 <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 80036a8:	b590      	push	{r4, r7, lr}
 80036aa:	b0b1      	sub	sp, #196	@ 0xc4
 80036ac:	af2a      	add	r7, sp, #168	@ 0xa8
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80036b2:	687c      	ldr	r4, [r7, #4]
 80036b4:	2302      	movs	r3, #2
 80036b6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80036b8:	f107 030c 	add.w	r3, r7, #12
 80036bc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80036be:	2332      	movs	r3, #50	@ 0x32
 80036c0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80036c2:	4668      	mov	r0, sp
 80036c4:	f104 0310 	add.w	r3, r4, #16
 80036c8:	229c      	movs	r2, #156	@ 0x9c
 80036ca:	4619      	mov	r1, r3
 80036cc:	f005 faf4 	bl	8008cb8 <memcpy>
 80036d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80036d4:	f000 fd73 	bl	80041be <bno055_read_regs>
 80036d8:	4603      	mov	r3, r0
 80036da:	75fb      	strb	r3, [r7, #23]
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <bno055_gravity_z+0x3e>
        return err;
 80036e2:	7dfb      	ldrb	r3, [r7, #23]
 80036e4:	e01b      	b.n	800371e <bno055_gravity_z+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <bno055_gravity_z+0x4a>
 80036ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003728 <bno055_gravity_z+0x80>)
 80036f0:	e001      	b.n	80036f6 <bno055_gravity_z+0x4e>
 80036f2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80036f6:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80036f8:	7b7b      	ldrb	r3, [r7, #13]
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	b21a      	sxth	r2, r3
 80036fe:	7b3b      	ldrb	r3, [r7, #12]
 8003700:	b21b      	sxth	r3, r3
 8003702:	4313      	orrs	r3, r2
 8003704:	b21b      	sxth	r3, r3
 8003706:	ee07 3a90 	vmov	s15, r3
 800370a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800370e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	bd90      	pop	{r4, r7, pc}
 8003726:	bf00      	nop
 8003728:	42c80000 	.word	0x42c80000

0800372c <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 800372c:	b590      	push	{r4, r7, lr}
 800372e:	b0b1      	sub	sp, #196	@ 0xc4
 8003730:	af2a      	add	r7, sp, #168	@ 0xa8
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 8003736:	687c      	ldr	r4, [r7, #4]
 8003738:	2306      	movs	r3, #6
 800373a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800373c:	f107 0308 	add.w	r3, r7, #8
 8003740:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003742:	232e      	movs	r3, #46	@ 0x2e
 8003744:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003746:	4668      	mov	r0, sp
 8003748:	f104 0310 	add.w	r3, r4, #16
 800374c:	229c      	movs	r2, #156	@ 0x9c
 800374e:	4619      	mov	r1, r3
 8003750:	f005 fab2 	bl	8008cb8 <memcpy>
 8003754:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003758:	f000 fd31 	bl	80041be <bno055_read_regs>
 800375c:	4603      	mov	r3, r0
 800375e:	75fb      	strb	r3, [r7, #23]
 8003760:	7dfb      	ldrb	r3, [r7, #23]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <bno055_gravity+0x3e>
        return err;
 8003766:	7dfb      	ldrb	r3, [r7, #23]
 8003768:	e03f      	b.n	80037ea <bno055_gravity+0xbe>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <bno055_gravity+0x4a>
 8003772:	4b20      	ldr	r3, [pc, #128]	@ (80037f4 <bno055_gravity+0xc8>)
 8003774:	e001      	b.n	800377a <bno055_gravity+0x4e>
 8003776:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800377a:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 800377c:	7a7b      	ldrb	r3, [r7, #9]
 800377e:	021b      	lsls	r3, r3, #8
 8003780:	b21a      	sxth	r2, r3
 8003782:	7a3b      	ldrb	r3, [r7, #8]
 8003784:	b21b      	sxth	r3, r3
 8003786:	4313      	orrs	r3, r2
 8003788:	b21b      	sxth	r3, r3
 800378a:	ee07 3a90 	vmov	s15, r3
 800378e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003792:	ed97 7a04 	vldr	s14, [r7, #16]
 8003796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 80037a0:	7afb      	ldrb	r3, [r7, #11]
 80037a2:	021b      	lsls	r3, r3, #8
 80037a4:	b21a      	sxth	r2, r3
 80037a6:	7abb      	ldrb	r3, [r7, #10]
 80037a8:	b21b      	sxth	r3, r3
 80037aa:	4313      	orrs	r3, r2
 80037ac:	b21b      	sxth	r3, r3
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80037b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80037ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 80037c4:	7b7b      	ldrb	r3, [r7, #13]
 80037c6:	021b      	lsls	r3, r3, #8
 80037c8:	b21a      	sxth	r2, r3
 80037ca:	7b3b      	ldrb	r3, [r7, #12]
 80037cc:	b21b      	sxth	r3, r3
 80037ce:	4313      	orrs	r3, r2
 80037d0:	b21b      	sxth	r3, r3
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80037da:	ed97 7a04 	vldr	s14, [r7, #16]
 80037de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	371c      	adds	r7, #28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd90      	pop	{r4, r7, pc}
 80037f2:	bf00      	nop
 80037f4:	42c80000 	.word	0x42c80000

080037f8 <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 80037f8:	b590      	push	{r4, r7, lr}
 80037fa:	b0b1      	sub	sp, #196	@ 0xc4
 80037fc:	af2a      	add	r7, sp, #168	@ 0xa8
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 8003802:	687c      	ldr	r4, [r7, #4]
 8003804:	2302      	movs	r3, #2
 8003806:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003808:	f107 030c 	add.w	r3, r7, #12
 800380c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800380e:	231a      	movs	r3, #26
 8003810:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003812:	4668      	mov	r0, sp
 8003814:	f104 0310 	add.w	r3, r4, #16
 8003818:	229c      	movs	r2, #156	@ 0x9c
 800381a:	4619      	mov	r1, r3
 800381c:	f005 fa4c 	bl	8008cb8 <memcpy>
 8003820:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003824:	f000 fccb 	bl	80041be <bno055_read_regs>
 8003828:	4603      	mov	r3, r0
 800382a:	75fb      	strb	r3, [r7, #23]
 800382c:	7dfb      	ldrb	r3, [r7, #23]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 8003832:	7dfb      	ldrb	r3, [r7, #23]
 8003834:	e01b      	b.n	800386e <bno055_euler_yaw+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 800383a:	2b00      	cmp	r3, #0
 800383c:	d102      	bne.n	8003844 <bno055_euler_yaw+0x4c>
 800383e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003842:	e000      	b.n	8003846 <bno055_euler_yaw+0x4e>
 8003844:	4b0c      	ldr	r3, [pc, #48]	@ (8003878 <bno055_euler_yaw+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8003846:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8003848:	7b7b      	ldrb	r3, [r7, #13]
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	b21a      	sxth	r2, r3
 800384e:	7b3b      	ldrb	r3, [r7, #12]
 8003850:	b21b      	sxth	r3, r3
 8003852:	4313      	orrs	r3, r2
 8003854:	b21b      	sxth	r3, r3
 8003856:	ee07 3a90 	vmov	s15, r3
 800385a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800385e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	371c      	adds	r7, #28
 8003872:	46bd      	mov	sp, r7
 8003874:	bd90      	pop	{r4, r7, pc}
 8003876:	bf00      	nop
 8003878:	44610000 	.word	0x44610000

0800387c <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 800387c:	b590      	push	{r4, r7, lr}
 800387e:	b0b1      	sub	sp, #196	@ 0xc4
 8003880:	af2a      	add	r7, sp, #168	@ 0xa8
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 8003886:	687c      	ldr	r4, [r7, #4]
 8003888:	2302      	movs	r3, #2
 800388a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800388c:	f107 030c 	add.w	r3, r7, #12
 8003890:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003892:	231c      	movs	r3, #28
 8003894:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003896:	4668      	mov	r0, sp
 8003898:	f104 0310 	add.w	r3, r4, #16
 800389c:	229c      	movs	r2, #156	@ 0x9c
 800389e:	4619      	mov	r1, r3
 80038a0:	f005 fa0a 	bl	8008cb8 <memcpy>
 80038a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80038a8:	f000 fc89 	bl	80041be <bno055_read_regs>
 80038ac:	4603      	mov	r3, r0
 80038ae:	75fb      	strb	r3, [r7, #23]
 80038b0:	7dfb      	ldrb	r3, [r7, #23]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <bno055_euler_roll+0x3e>
        return err;
 80038b6:	7dfb      	ldrb	r3, [r7, #23]
 80038b8:	e01b      	b.n	80038f2 <bno055_euler_roll+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d102      	bne.n	80038c8 <bno055_euler_roll+0x4c>
 80038c2:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80038c6:	e000      	b.n	80038ca <bno055_euler_roll+0x4e>
 80038c8:	4b0c      	ldr	r3, [pc, #48]	@ (80038fc <bno055_euler_roll+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80038ca:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80038cc:	7b7b      	ldrb	r3, [r7, #13]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	b21a      	sxth	r2, r3
 80038d2:	7b3b      	ldrb	r3, [r7, #12]
 80038d4:	b21b      	sxth	r3, r3
 80038d6:	4313      	orrs	r3, r2
 80038d8:	b21b      	sxth	r3, r3
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80038e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80038e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd90      	pop	{r4, r7, pc}
 80038fa:	bf00      	nop
 80038fc:	44610000 	.word	0x44610000

08003900 <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8003900:	b590      	push	{r4, r7, lr}
 8003902:	b0b1      	sub	sp, #196	@ 0xc4
 8003904:	af2a      	add	r7, sp, #168	@ 0xa8
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 800390a:	687c      	ldr	r4, [r7, #4]
 800390c:	2302      	movs	r3, #2
 800390e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003910:	f107 030c 	add.w	r3, r7, #12
 8003914:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003916:	231e      	movs	r3, #30
 8003918:	9327      	str	r3, [sp, #156]	@ 0x9c
 800391a:	4668      	mov	r0, sp
 800391c:	f104 0310 	add.w	r3, r4, #16
 8003920:	229c      	movs	r2, #156	@ 0x9c
 8003922:	4619      	mov	r1, r3
 8003924:	f005 f9c8 	bl	8008cb8 <memcpy>
 8003928:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800392c:	f000 fc47 	bl	80041be <bno055_read_regs>
 8003930:	4603      	mov	r3, r0
 8003932:	75fb      	strb	r3, [r7, #23]
 8003934:	7dfb      	ldrb	r3, [r7, #23]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <bno055_euler_pitch+0x3e>
        return err;
 800393a:	7dfb      	ldrb	r3, [r7, #23]
 800393c:	e01b      	b.n	8003976 <bno055_euler_pitch+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8003942:	2b00      	cmp	r3, #0
 8003944:	d102      	bne.n	800394c <bno055_euler_pitch+0x4c>
 8003946:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800394a:	e000      	b.n	800394e <bno055_euler_pitch+0x4e>
 800394c:	4b0c      	ldr	r3, [pc, #48]	@ (8003980 <bno055_euler_pitch+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800394e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8003950:	7b7b      	ldrb	r3, [r7, #13]
 8003952:	021b      	lsls	r3, r3, #8
 8003954:	b21a      	sxth	r2, r3
 8003956:	7b3b      	ldrb	r3, [r7, #12]
 8003958:	b21b      	sxth	r3, r3
 800395a:	4313      	orrs	r3, r2
 800395c:	b21b      	sxth	r3, r3
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003966:	ed97 7a04 	vldr	s14, [r7, #16]
 800396a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	371c      	adds	r7, #28
 800397a:	46bd      	mov	sp, r7
 800397c:	bd90      	pop	{r4, r7, pc}
 800397e:	bf00      	nop
 8003980:	44610000 	.word	0x44610000

08003984 <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 8003984:	b590      	push	{r4, r7, lr}
 8003986:	b0b1      	sub	sp, #196	@ 0xc4
 8003988:	af2a      	add	r7, sp, #168	@ 0xa8
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 800398e:	687c      	ldr	r4, [r7, #4]
 8003990:	2306      	movs	r3, #6
 8003992:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003994:	f107 0308 	add.w	r3, r7, #8
 8003998:	9328      	str	r3, [sp, #160]	@ 0xa0
 800399a:	231a      	movs	r3, #26
 800399c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800399e:	4668      	mov	r0, sp
 80039a0:	f104 0310 	add.w	r3, r4, #16
 80039a4:	229c      	movs	r2, #156	@ 0x9c
 80039a6:	4619      	mov	r1, r3
 80039a8:	f005 f986 	bl	8008cb8 <memcpy>
 80039ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80039b0:	f000 fc05 	bl	80041be <bno055_read_regs>
 80039b4:	4603      	mov	r3, r0
 80039b6:	75fb      	strb	r3, [r7, #23]
 80039b8:	7dfb      	ldrb	r3, [r7, #23]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 80039be:	7dfb      	ldrb	r3, [r7, #23]
 80039c0:	e03f      	b.n	8003a42 <bno055_euler+0xbe>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d102      	bne.n	80039d0 <bno055_euler+0x4c>
 80039ca:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80039ce:	e000      	b.n	80039d2 <bno055_euler+0x4e>
 80039d0:	4b1e      	ldr	r3, [pc, #120]	@ (8003a4c <bno055_euler+0xc8>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80039d2:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 80039d4:	7a7b      	ldrb	r3, [r7, #9]
 80039d6:	021b      	lsls	r3, r3, #8
 80039d8:	b21a      	sxth	r2, r3
 80039da:	7a3b      	ldrb	r3, [r7, #8]
 80039dc:	b21b      	sxth	r3, r3
 80039de:	4313      	orrs	r3, r2
 80039e0:	b21b      	sxth	r3, r3
 80039e2:	ee07 3a90 	vmov	s15, r3
 80039e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80039ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80039ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	edc3 7a02 	vstr	s15, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 80039f8:	7afb      	ldrb	r3, [r7, #11]
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	b21a      	sxth	r2, r3
 80039fe:	7abb      	ldrb	r3, [r7, #10]
 8003a00:	b21b      	sxth	r3, r3
 8003a02:	4313      	orrs	r3, r2
 8003a04:	b21b      	sxth	r3, r3
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a0e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	edc3 7a00 	vstr	s15, [r3]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 8003a1c:	7b7b      	ldrb	r3, [r7, #13]
 8003a1e:	021b      	lsls	r3, r3, #8
 8003a20:	b21a      	sxth	r2, r3
 8003a22:	7b3b      	ldrb	r3, [r7, #12]
 8003a24:	b21b      	sxth	r3, r3
 8003a26:	4313      	orrs	r3, r2
 8003a28:	b21b      	sxth	r3, r3
 8003a2a:	ee07 3a90 	vmov	s15, r3
 8003a2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a32:	ed97 7a04 	vldr	s14, [r7, #16]
 8003a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	edc3 7a01 	vstr	s15, [r3, #4]
    return BNO_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	371c      	adds	r7, #28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd90      	pop	{r4, r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	44610000 	.word	0x44610000

08003a50 <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 8003a50:	b590      	push	{r4, r7, lr}
 8003a52:	b0af      	sub	sp, #188	@ 0xbc
 8003a54:	af2a      	add	r7, sp, #168	@ 0xa8
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 8003a5a:	687c      	ldr	r4, [r7, #4]
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003a60:	f107 030c 	add.w	r3, r7, #12
 8003a64:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003a66:	2320      	movs	r3, #32
 8003a68:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003a6a:	4668      	mov	r0, sp
 8003a6c:	f104 0310 	add.w	r3, r4, #16
 8003a70:	229c      	movs	r2, #156	@ 0x9c
 8003a72:	4619      	mov	r1, r3
 8003a74:	f005 f920 	bl	8008cb8 <memcpy>
 8003a78:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003a7c:	f000 fb9f 	bl	80041be <bno055_read_regs>
 8003a80:	4603      	mov	r3, r0
 8003a82:	73fb      	strb	r3, [r7, #15]
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <bno055_quaternion_w+0x3e>
        return err;
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	e012      	b.n	8003ab4 <bno055_quaternion_w+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8003a8e:	7b7b      	ldrb	r3, [r7, #13]
 8003a90:	021b      	lsls	r3, r3, #8
 8003a92:	b21a      	sxth	r2, r3
 8003a94:	7b3b      	ldrb	r3, [r7, #12]
 8003a96:	b21b      	sxth	r3, r3
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	b21b      	sxth	r3, r3
 8003a9c:	ee07 3a90 	vmov	s15, r3
 8003aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aa4:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8003abc <bno055_quaternion_w+0x6c>
 8003aa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd90      	pop	{r4, r7, pc}
 8003abc:	46800000 	.word	0x46800000

08003ac0 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 8003ac0:	b590      	push	{r4, r7, lr}
 8003ac2:	b0af      	sub	sp, #188	@ 0xbc
 8003ac4:	af2a      	add	r7, sp, #168	@ 0xa8
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8003aca:	687c      	ldr	r4, [r7, #4]
 8003acc:	2302      	movs	r3, #2
 8003ace:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003ad0:	f107 030c 	add.w	r3, r7, #12
 8003ad4:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003ad6:	2322      	movs	r3, #34	@ 0x22
 8003ad8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003ada:	4668      	mov	r0, sp
 8003adc:	f104 0310 	add.w	r3, r4, #16
 8003ae0:	229c      	movs	r2, #156	@ 0x9c
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	f005 f8e8 	bl	8008cb8 <memcpy>
 8003ae8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003aec:	f000 fb67 	bl	80041be <bno055_read_regs>
 8003af0:	4603      	mov	r3, r0
 8003af2:	73fb      	strb	r3, [r7, #15]
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <bno055_quaternion_x+0x3e>
        return err;
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
 8003afc:	e012      	b.n	8003b24 <bno055_quaternion_x+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8003afe:	7b7b      	ldrb	r3, [r7, #13]
 8003b00:	021b      	lsls	r3, r3, #8
 8003b02:	b21a      	sxth	r2, r3
 8003b04:	7b3b      	ldrb	r3, [r7, #12]
 8003b06:	b21b      	sxth	r3, r3
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	b21b      	sxth	r3, r3
 8003b0c:	ee07 3a90 	vmov	s15, r3
 8003b10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b14:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8003b2c <bno055_quaternion_x+0x6c>
 8003b18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd90      	pop	{r4, r7, pc}
 8003b2c:	46800000 	.word	0x46800000

08003b30 <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 8003b30:	b590      	push	{r4, r7, lr}
 8003b32:	b0af      	sub	sp, #188	@ 0xbc
 8003b34:	af2a      	add	r7, sp, #168	@ 0xa8
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8003b3a:	687c      	ldr	r4, [r7, #4]
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003b40:	f107 030c 	add.w	r3, r7, #12
 8003b44:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003b46:	2324      	movs	r3, #36	@ 0x24
 8003b48:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003b4a:	4668      	mov	r0, sp
 8003b4c:	f104 0310 	add.w	r3, r4, #16
 8003b50:	229c      	movs	r2, #156	@ 0x9c
 8003b52:	4619      	mov	r1, r3
 8003b54:	f005 f8b0 	bl	8008cb8 <memcpy>
 8003b58:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003b5c:	f000 fb2f 	bl	80041be <bno055_read_regs>
 8003b60:	4603      	mov	r3, r0
 8003b62:	73fb      	strb	r3, [r7, #15]
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <bno055_quaternion_y+0x3e>
        return err;
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
 8003b6c:	e012      	b.n	8003b94 <bno055_quaternion_y+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8003b6e:	7b7b      	ldrb	r3, [r7, #13]
 8003b70:	021b      	lsls	r3, r3, #8
 8003b72:	b21a      	sxth	r2, r3
 8003b74:	7b3b      	ldrb	r3, [r7, #12]
 8003b76:	b21b      	sxth	r3, r3
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	b21b      	sxth	r3, r3
 8003b7c:	ee07 3a90 	vmov	s15, r3
 8003b80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b84:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8003b9c <bno055_quaternion_y+0x6c>
 8003b88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd90      	pop	{r4, r7, pc}
 8003b9c:	46800000 	.word	0x46800000

08003ba0 <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 8003ba0:	b590      	push	{r4, r7, lr}
 8003ba2:	b0af      	sub	sp, #188	@ 0xbc
 8003ba4:	af2a      	add	r7, sp, #168	@ 0xa8
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8003baa:	687c      	ldr	r4, [r7, #4]
 8003bac:	2302      	movs	r3, #2
 8003bae:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003bb0:	f107 030c 	add.w	r3, r7, #12
 8003bb4:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003bb6:	2326      	movs	r3, #38	@ 0x26
 8003bb8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003bba:	4668      	mov	r0, sp
 8003bbc:	f104 0310 	add.w	r3, r4, #16
 8003bc0:	229c      	movs	r2, #156	@ 0x9c
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	f005 f878 	bl	8008cb8 <memcpy>
 8003bc8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003bcc:	f000 faf7 	bl	80041be <bno055_read_regs>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	73fb      	strb	r3, [r7, #15]
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <bno055_quaternion_z+0x3e>
        return err;
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
 8003bdc:	e012      	b.n	8003c04 <bno055_quaternion_z+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8003bde:	7b7b      	ldrb	r3, [r7, #13]
 8003be0:	021b      	lsls	r3, r3, #8
 8003be2:	b21a      	sxth	r2, r3
 8003be4:	7b3b      	ldrb	r3, [r7, #12]
 8003be6:	b21b      	sxth	r3, r3
 8003be8:	4313      	orrs	r3, r2
 8003bea:	b21b      	sxth	r3, r3
 8003bec:	ee07 3a90 	vmov	s15, r3
 8003bf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bf4:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8003c0c <bno055_quaternion_z+0x6c>
 8003bf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd90      	pop	{r4, r7, pc}
 8003c0c:	46800000 	.word	0x46800000

08003c10 <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 8003c10:	b590      	push	{r4, r7, lr}
 8003c12:	b0b1      	sub	sp, #196	@ 0xc4
 8003c14:	af2a      	add	r7, sp, #168	@ 0xa8
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 8003c1a:	687c      	ldr	r4, [r7, #4]
 8003c1c:	2308      	movs	r3, #8
 8003c1e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003c20:	f107 030c 	add.w	r3, r7, #12
 8003c24:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003c26:	2320      	movs	r3, #32
 8003c28:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003c2a:	4668      	mov	r0, sp
 8003c2c:	f104 0310 	add.w	r3, r4, #16
 8003c30:	229c      	movs	r2, #156	@ 0x9c
 8003c32:	4619      	mov	r1, r3
 8003c34:	f005 f840 	bl	8008cb8 <memcpy>
 8003c38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003c3c:	f000 fabf 	bl	80041be <bno055_read_regs>
 8003c40:	4603      	mov	r3, r0
 8003c42:	75fb      	strb	r3, [r7, #23]
 8003c44:	7dfb      	ldrb	r3, [r7, #23]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <bno055_quaternion+0x3e>
        return err;
 8003c4a:	7dfb      	ldrb	r3, [r7, #23]
 8003c4c:	e048      	b.n	8003ce0 <bno055_quaternion+0xd0>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8003c4e:	7b7b      	ldrb	r3, [r7, #13]
 8003c50:	021b      	lsls	r3, r3, #8
 8003c52:	b21a      	sxth	r2, r3
 8003c54:	7b3b      	ldrb	r3, [r7, #12]
 8003c56:	b21b      	sxth	r3, r3
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	b21b      	sxth	r3, r3
 8003c5c:	ee07 3a90 	vmov	s15, r3
 8003c60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c64:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8003ce8 <bno055_quaternion+0xd8>
 8003c68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	edc3 7a03 	vstr	s15, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	b21a      	sxth	r2, r3
 8003c78:	7bbb      	ldrb	r3, [r7, #14]
 8003c7a:	b21b      	sxth	r3, r3
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	b21b      	sxth	r3, r3
 8003c80:	ee07 3a90 	vmov	s15, r3
 8003c84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c88:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8003ce8 <bno055_quaternion+0xd8>
 8003c8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 8003c96:	7c7b      	ldrb	r3, [r7, #17]
 8003c98:	021b      	lsls	r3, r3, #8
 8003c9a:	b21a      	sxth	r2, r3
 8003c9c:	7c3b      	ldrb	r3, [r7, #16]
 8003c9e:	b21b      	sxth	r3, r3
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	b21b      	sxth	r3, r3
 8003ca4:	ee07 3a90 	vmov	s15, r3
 8003ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cac:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8003ce8 <bno055_quaternion+0xd8>
 8003cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 8003cba:	7cfb      	ldrb	r3, [r7, #19]
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	b21a      	sxth	r2, r3
 8003cc0:	7cbb      	ldrb	r3, [r7, #18]
 8003cc2:	b21b      	sxth	r3, r3
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	b21b      	sxth	r3, r3
 8003cc8:	ee07 3a90 	vmov	s15, r3
 8003ccc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cd0:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8003ce8 <bno055_quaternion+0xd8>
 8003cd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	edc3 7a02 	vstr	s15, [r3, #8]
    return BNO_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	371c      	adds	r7, #28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd90      	pop	{r4, r7, pc}
 8003ce8:	46800000 	.word	0x46800000

08003cec <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 8003cec:	b590      	push	{r4, r7, lr}
 8003cee:	b0af      	sub	sp, #188	@ 0xbc
 8003cf0:	af2a      	add	r7, sp, #168	@ 0xa8
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	4608      	mov	r0, r1
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	70fb      	strb	r3, [r7, #3]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	70bb      	strb	r3, [r7, #2]
 8003d02:	4613      	mov	r3, r2
 8003d04:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8003d06:	2101      	movs	r1, #1
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fabc 	bl	8004286 <bno055_set_page>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	73fb      	strb	r3, [r7, #15]
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <bno055_acc_conf+0x30>
        return err;
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	e04b      	b.n	8003db4 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f91b 	bl	8003f5a <bno055_set_opmode>
 8003d24:	4603      	mov	r3, r0
 8003d26:	73fb      	strb	r3, [r7, #15]
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <bno055_acc_conf+0x46>
        return err;
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
 8003d30:	e040      	b.n	8003db4 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8003d32:	200c      	movs	r0, #12
 8003d34:	f000 feb0 	bl	8004a98 <HAL_Delay>
    u8 config = range | bandwidth | mode;
 8003d38:	78fa      	ldrb	r2, [r7, #3]
 8003d3a:	78bb      	ldrb	r3, [r7, #2]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	787b      	ldrb	r3, [r7, #1]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 8003d48:	687c      	ldr	r4, [r7, #4]
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003d4e:	f107 030e 	add.w	r3, r7, #14
 8003d52:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003d54:	2308      	movs	r3, #8
 8003d56:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003d58:	4668      	mov	r0, sp
 8003d5a:	f104 0310 	add.w	r3, r4, #16
 8003d5e:	229c      	movs	r2, #156	@ 0x9c
 8003d60:	4619      	mov	r1, r3
 8003d62:	f004 ffa9 	bl	8008cb8 <memcpy>
 8003d66:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003d6a:	f000 fa5e 	bl	800422a <bno055_write_regs>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	73fb      	strb	r3, [r7, #15]
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <bno055_acc_conf+0x90>
        return err;
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
 8003d7a:	e01b      	b.n	8003db4 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	791b      	ldrb	r3, [r3, #4]
 8003d80:	4619      	mov	r1, r3
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f8e9 	bl	8003f5a <bno055_set_opmode>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	73fb      	strb	r3, [r7, #15]
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <bno055_acc_conf+0xaa>
        return err;
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	e00e      	b.n	8003db4 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8003d96:	2018      	movs	r0, #24
 8003d98:	f000 fe7e 	bl	8004a98 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fa71 	bl	8004286 <bno055_set_page>
 8003da4:	4603      	mov	r3, r0
 8003da6:	73fb      	strb	r3, [r7, #15]
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <bno055_acc_conf+0xc6>
        return err;
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
 8003db0:	e000      	b.n	8003db4 <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd90      	pop	{r4, r7, pc}

08003dbc <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 8003dbc:	b590      	push	{r4, r7, lr}
 8003dbe:	b0af      	sub	sp, #188	@ 0xbc
 8003dc0:	af2a      	add	r7, sp, #168	@ 0xa8
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	4608      	mov	r0, r1
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	461a      	mov	r2, r3
 8003dca:	4603      	mov	r3, r0
 8003dcc:	70fb      	strb	r3, [r7, #3]
 8003dce:	460b      	mov	r3, r1
 8003dd0:	70bb      	strb	r3, [r7, #2]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 fa54 	bl	8004286 <bno055_set_page>
 8003dde:	4603      	mov	r3, r0
 8003de0:	73fb      	strb	r3, [r7, #15]
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <bno055_gyr_conf+0x30>
        return err;
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	e04a      	b.n	8003e82 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8003dec:	2100      	movs	r1, #0
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f8b3 	bl	8003f5a <bno055_set_opmode>
 8003df4:	4603      	mov	r3, r0
 8003df6:	73fb      	strb	r3, [r7, #15]
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <bno055_gyr_conf+0x46>
        return err;
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
 8003e00:	e03f      	b.n	8003e82 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8003e02:	200c      	movs	r0, #12
 8003e04:	f000 fe48 	bl	8004a98 <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 8003e08:	78fa      	ldrb	r2, [r7, #3]
 8003e0a:	78bb      	ldrb	r3, [r7, #2]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	733b      	strb	r3, [r7, #12]
 8003e12:	787b      	ldrb	r3, [r7, #1]
 8003e14:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 8003e16:	687c      	ldr	r4, [r7, #4]
 8003e18:	2302      	movs	r3, #2
 8003e1a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003e1c:	f107 030c 	add.w	r3, r7, #12
 8003e20:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003e22:	230a      	movs	r3, #10
 8003e24:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003e26:	4668      	mov	r0, sp
 8003e28:	f104 0310 	add.w	r3, r4, #16
 8003e2c:	229c      	movs	r2, #156	@ 0x9c
 8003e2e:	4619      	mov	r1, r3
 8003e30:	f004 ff42 	bl	8008cb8 <memcpy>
 8003e34:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003e38:	f000 f9f7 	bl	800422a <bno055_write_regs>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	73fb      	strb	r3, [r7, #15]
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	e01b      	b.n	8003e82 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	791b      	ldrb	r3, [r3, #4]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f882 	bl	8003f5a <bno055_set_opmode>
 8003e56:	4603      	mov	r3, r0
 8003e58:	73fb      	strb	r3, [r7, #15]
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <bno055_gyr_conf+0xa8>
        return err;
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	e00e      	b.n	8003e82 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8003e64:	2018      	movs	r0, #24
 8003e66:	f000 fe17 	bl	8004a98 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fa0a 	bl	8004286 <bno055_set_page>
 8003e72:	4603      	mov	r3, r0
 8003e74:	73fb      	strb	r3, [r7, #15]
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <bno055_gyr_conf+0xc4>
        return err;
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	e000      	b.n	8003e82 <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd90      	pop	{r4, r7, pc}

08003e8a <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 8003e8a:	b590      	push	{r4, r7, lr}
 8003e8c:	b0af      	sub	sp, #188	@ 0xbc
 8003e8e:	af2a      	add	r7, sp, #168	@ 0xa8
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	4608      	mov	r0, r1
 8003e94:	4611      	mov	r1, r2
 8003e96:	461a      	mov	r2, r3
 8003e98:	4603      	mov	r3, r0
 8003e9a:	70fb      	strb	r3, [r7, #3]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	70bb      	strb	r3, [r7, #2]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f9ed 	bl	8004286 <bno055_set_page>
 8003eac:	4603      	mov	r3, r0
 8003eae:	73fb      	strb	r3, [r7, #15]
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <bno055_mag_conf+0x30>
        return err;
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
 8003eb8:	e04b      	b.n	8003f52 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8003eba:	2100      	movs	r1, #0
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f84c 	bl	8003f5a <bno055_set_opmode>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	73fb      	strb	r3, [r7, #15]
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <bno055_mag_conf+0x46>
        return err;
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	e040      	b.n	8003f52 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8003ed0:	200c      	movs	r0, #12
 8003ed2:	f000 fde1 	bl	8004a98 <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 8003ed6:	78fa      	ldrb	r2, [r7, #3]
 8003ed8:	78bb      	ldrb	r3, [r7, #2]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	787b      	ldrb	r3, [r7, #1]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 8003ee6:	687c      	ldr	r4, [r7, #4]
 8003ee8:	2301      	movs	r3, #1
 8003eea:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003eec:	f107 030e 	add.w	r3, r7, #14
 8003ef0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003ef2:	2309      	movs	r3, #9
 8003ef4:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003ef6:	4668      	mov	r0, sp
 8003ef8:	f104 0310 	add.w	r3, r4, #16
 8003efc:	229c      	movs	r2, #156	@ 0x9c
 8003efe:	4619      	mov	r1, r3
 8003f00:	f004 feda 	bl	8008cb8 <memcpy>
 8003f04:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003f08:	f000 f98f 	bl	800422a <bno055_write_regs>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	73fb      	strb	r3, [r7, #15]
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <bno055_mag_conf+0x90>
        return err;
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	e01b      	b.n	8003f52 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	791b      	ldrb	r3, [r3, #4]
 8003f1e:	4619      	mov	r1, r3
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f81a 	bl	8003f5a <bno055_set_opmode>
 8003f26:	4603      	mov	r3, r0
 8003f28:	73fb      	strb	r3, [r7, #15]
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <bno055_mag_conf+0xaa>
        return err;
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	e00e      	b.n	8003f52 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8003f34:	2018      	movs	r0, #24
 8003f36:	f000 fdaf 	bl	8004a98 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f9a2 	bl	8004286 <bno055_set_page>
 8003f42:	4603      	mov	r3, r0
 8003f44:	73fb      	strb	r3, [r7, #15]
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <bno055_mag_conf+0xc6>
        return err;
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	e000      	b.n	8003f52 <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd90      	pop	{r4, r7, pc}

08003f5a <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 8003f5a:	b590      	push	{r4, r7, lr}
 8003f5c:	b0af      	sub	sp, #188	@ 0xbc
 8003f5e:	af2a      	add	r7, sp, #168	@ 0xa8
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	460b      	mov	r3, r1
 8003f64:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 8003f66:	687c      	ldr	r4, [r7, #4]
 8003f68:	2301      	movs	r3, #1
 8003f6a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003f6c:	1cfb      	adds	r3, r7, #3
 8003f6e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003f70:	233d      	movs	r3, #61	@ 0x3d
 8003f72:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003f74:	4668      	mov	r0, sp
 8003f76:	f104 0310 	add.w	r3, r4, #16
 8003f7a:	229c      	movs	r2, #156	@ 0x9c
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	f004 fe9b 	bl	8008cb8 <memcpy>
 8003f82:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003f86:	f000 f950 	bl	800422a <bno055_write_regs>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	73fb      	strb	r3, [r7, #15]
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
 8003f96:	e003      	b.n	8003fa0 <bno055_set_opmode+0x46>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8003f98:	2018      	movs	r0, #24
 8003f9a:	f000 fd7d 	bl	8004a98 <HAL_Delay>
    return BNO_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd90      	pop	{r4, r7, pc}

08003fa8 <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 8003fa8:	b590      	push	{r4, r7, lr}
 8003faa:	b0af      	sub	sp, #188	@ 0xbc
 8003fac:	af2a      	add	r7, sp, #168	@ 0xa8
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	70fb      	strb	r3, [r7, #3]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	70bb      	strb	r3, [r7, #2]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff ffc8 	bl	8003f5a <bno055_set_opmode>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	73fb      	strb	r3, [r7, #15]
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <bno055_set_unit+0x30>
        return err;
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	e04b      	b.n	8004070 <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8003fd8:	2100      	movs	r1, #0
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f953 	bl	8004286 <bno055_set_page>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	73fb      	strb	r3, [r7, #15]
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <bno055_set_unit+0x46>
        return err;
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	e040      	b.n	8004070 <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 8003fee:	78fa      	ldrb	r2, [r7, #3]
 8003ff0:	78bb      	ldrb	r3, [r7, #2]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	787b      	ldrb	r3, [r7, #1]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004000:	4313      	orrs	r3, r2
 8004002:	b2db      	uxtb	r3, r3
 8004004:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 8004006:	687c      	ldr	r4, [r7, #4]
 8004008:	2301      	movs	r3, #1
 800400a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800400c:	f107 030e 	add.w	r3, r7, #14
 8004010:	9328      	str	r3, [sp, #160]	@ 0xa0
 8004012:	233b      	movs	r3, #59	@ 0x3b
 8004014:	9327      	str	r3, [sp, #156]	@ 0x9c
 8004016:	4668      	mov	r0, sp
 8004018:	f104 0310 	add.w	r3, r4, #16
 800401c:	229c      	movs	r2, #156	@ 0x9c
 800401e:	4619      	mov	r1, r3
 8004020:	f004 fe4a 	bl	8008cb8 <memcpy>
 8004024:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004028:	f000 f8ff 	bl	800422a <bno055_write_regs>
 800402c:	4603      	mov	r3, r0
 800402e:	73fb      	strb	r3, [r7, #15]
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <bno055_set_unit+0x92>
        return err;
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	e01a      	b.n	8004070 <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	78ba      	ldrb	r2, [r7, #2]
 800403e:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	787a      	ldrb	r2, [r7, #1]
 8004044:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f897 2020 	ldrb.w	r2, [r7, #32]
 800404c:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	78fa      	ldrb	r2, [r7, #3]
 8004052:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	791b      	ldrb	r3, [r3, #4]
 8004058:	4619      	mov	r1, r3
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff ff7d 	bl	8003f5a <bno055_set_opmode>
 8004060:	4603      	mov	r3, r0
 8004062:	73fb      	strb	r3, [r7, #15]
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <bno055_set_unit+0xc6>
        return err;
 800406a:	7bfb      	ldrb	r3, [r7, #15]
 800406c:	e000      	b.n	8004070 <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	bd90      	pop	{r4, r7, pc}

08004078 <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 8004078:	b590      	push	{r4, r7, lr}
 800407a:	b0af      	sub	sp, #188	@ 0xbc
 800407c:	af2a      	add	r7, sp, #168	@ 0xa8
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 800408a:	2304      	movs	r3, #4
 800408c:	e04d      	b.n	800412a <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 800408e:	2100      	movs	r1, #0
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff ff62 	bl	8003f5a <bno055_set_opmode>
 8004096:	4603      	mov	r3, r0
 8004098:	73fb      	strb	r3, [r7, #15]
 800409a:	7bfb      	ldrb	r3, [r7, #15]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <bno055_set_pwr_mode+0x2c>
        return err;
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	e042      	b.n	800412a <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80040a4:	2100      	movs	r1, #0
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f8ed 	bl	8004286 <bno055_set_page>
 80040ac:	4603      	mov	r3, r0
 80040ae:	73fb      	strb	r3, [r7, #15]
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <bno055_set_pwr_mode+0x42>
        return err;
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
 80040b8:	e037      	b.n	800412a <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 80040ba:	687c      	ldr	r4, [r7, #4]
 80040bc:	2301      	movs	r3, #1
 80040be:	9329      	str	r3, [sp, #164]	@ 0xa4
 80040c0:	1cfb      	adds	r3, r7, #3
 80040c2:	9328      	str	r3, [sp, #160]	@ 0xa0
 80040c4:	233e      	movs	r3, #62	@ 0x3e
 80040c6:	9327      	str	r3, [sp, #156]	@ 0x9c
 80040c8:	4668      	mov	r0, sp
 80040ca:	f104 0310 	add.w	r3, r4, #16
 80040ce:	229c      	movs	r2, #156	@ 0x9c
 80040d0:	4619      	mov	r1, r3
 80040d2:	f004 fdf1 	bl	8008cb8 <memcpy>
 80040d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80040da:	f000 f8a6 	bl	800422a <bno055_write_regs>
 80040de:	4603      	mov	r3, r0
 80040e0:	73fb      	strb	r3, [r7, #15]
 80040e2:	7bfb      	ldrb	r3, [r7, #15]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	e01e      	b.n	800412a <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 80040ec:	78fa      	ldrb	r2, [r7, #3]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80040f2:	2100      	movs	r1, #0
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f8c6 	bl	8004286 <bno055_set_page>
 80040fa:	4603      	mov	r3, r0
 80040fc:	73fb      	strb	r3, [r7, #15]
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <bno055_set_pwr_mode+0x90>
        return err;
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	e010      	b.n	800412a <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	791b      	ldrb	r3, [r3, #4]
 800410c:	4619      	mov	r1, r3
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7ff ff23 	bl	8003f5a <bno055_set_opmode>
 8004114:	4603      	mov	r3, r0
 8004116:	73fb      	strb	r3, [r7, #15]
 8004118:	7bfb      	ldrb	r3, [r7, #15]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <bno055_set_pwr_mode+0xaa>
        return err;
 800411e:	7bfb      	ldrb	r3, [r7, #15]
 8004120:	e003      	b.n	800412a <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 8004122:	2002      	movs	r0, #2
 8004124:	f000 fcb8 	bl	8004a98 <HAL_Delay>
    return BNO_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	bd90      	pop	{r4, r7, pc}

08004132 <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 8004132:	b590      	push	{r4, r7, lr}
 8004134:	b0af      	sub	sp, #188	@ 0xbc
 8004136:	af2a      	add	r7, sp, #168	@ 0xa8
 8004138:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 800413a:	2320      	movs	r3, #32
 800413c:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 800413e:	687c      	ldr	r4, [r7, #4]
 8004140:	2301      	movs	r3, #1
 8004142:	9329      	str	r3, [sp, #164]	@ 0xa4
 8004144:	f107 030f 	add.w	r3, r7, #15
 8004148:	9328      	str	r3, [sp, #160]	@ 0xa0
 800414a:	233f      	movs	r3, #63	@ 0x3f
 800414c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800414e:	4668      	mov	r0, sp
 8004150:	f104 0310 	add.w	r3, r4, #16
 8004154:	229c      	movs	r2, #156	@ 0x9c
 8004156:	4619      	mov	r1, r3
 8004158:	f004 fdae 	bl	8008cb8 <memcpy>
 800415c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004160:	f000 f863 	bl	800422a <bno055_write_regs>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <bno055_reset+0x3e>
    }
    return BNO_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	bd90      	pop	{r4, r7, pc}

08004178 <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 8004178:	b590      	push	{r4, r7, lr}
 800417a:	b0af      	sub	sp, #188	@ 0xbc
 800417c:	af2a      	add	r7, sp, #168	@ 0xa8
 800417e:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 8004180:	2300      	movs	r3, #0
 8004182:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8004184:	687c      	ldr	r4, [r7, #4]
 8004186:	2301      	movs	r3, #1
 8004188:	9329      	str	r3, [sp, #164]	@ 0xa4
 800418a:	f107 030f 	add.w	r3, r7, #15
 800418e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8004190:	233f      	movs	r3, #63	@ 0x3f
 8004192:	9327      	str	r3, [sp, #156]	@ 0x9c
 8004194:	4668      	mov	r0, sp
 8004196:	f104 0310 	add.w	r3, r4, #16
 800419a:	229c      	movs	r2, #156	@ 0x9c
 800419c:	4619      	mov	r1, r3
 800419e:	f004 fd8b 	bl	8008cb8 <memcpy>
 80041a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80041a6:	f000 f840 	bl	800422a <bno055_write_regs>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <bno055_on+0x3c>
        return BNO_ERR_I2C;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e000      	b.n	80041b6 <bno055_on+0x3e>
    }
    return BNO_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd90      	pop	{r4, r7, pc}

080041be <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 80041be:	b084      	sub	sp, #16
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af02      	add	r7, sp, #8
 80041c6:	f107 0c10 	add.w	ip, r7, #16
 80041ca:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 80041ce:	6938      	ldr	r0, [r7, #16]
 80041d0:	7dbb      	ldrb	r3, [r7, #22]
 80041d2:	4619      	mov	r1, r3
 80041d4:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 80041d8:	f04f 33ff 	mov.w	r3, #4294967295
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	2301      	movs	r3, #1
 80041e0:	f001 f8d4 	bl	800538c <HAL_I2C_Master_Transmit>
 80041e4:	4603      	mov	r3, r0
 80041e6:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 80041e8:	79fb      	ldrb	r3, [r7, #7]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e014      	b.n	800421c <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 80041f2:	6938      	ldr	r0, [r7, #16]
 80041f4:	7dbb      	ldrb	r3, [r7, #22]
 80041f6:	4619      	mov	r1, r3
 80041f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004202:	9200      	str	r2, [sp, #0]
 8004204:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004208:	f001 f9be 	bl	8005588 <HAL_I2C_Master_Receive>
 800420c:	4603      	mov	r3, r0
 800420e:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8004210:	79fb      	ldrb	r3, [r7, #7]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004226:	b004      	add	sp, #16
 8004228:	4770      	bx	lr

0800422a <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 800422a:	b084      	sub	sp, #16
 800422c:	b5b0      	push	{r4, r5, r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af04      	add	r7, sp, #16
 8004232:	f107 0418 	add.w	r4, r7, #24
 8004236:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 800423a:	69b8      	ldr	r0, [r7, #24]
 800423c:	7fbb      	ldrb	r3, [r7, #30]
 800423e:	461d      	mov	r5, r3
 8004240:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004244:	b29a      	uxth	r2, r3
 8004246:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800424a:	b299      	uxth	r1, r3
 800424c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004250:	b29b      	uxth	r3, r3
 8004252:	f04f 34ff 	mov.w	r4, #4294967295
 8004256:	9402      	str	r4, [sp, #8]
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	460b      	mov	r3, r1
 8004262:	4629      	mov	r1, r5
 8004264:	f001 fbc2 	bl	80059ec <HAL_I2C_Mem_Write>
 8004268:	4603      	mov	r3, r0
 800426a:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <bno055_write_regs+0x4c>
        return BNO_ERR_I2C;
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <bno055_write_regs+0x4e>
    }
    return BNO_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8004282:	b004      	add	sp, #16
 8004284:	4770      	bx	lr

08004286 <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 8004286:	b590      	push	{r4, r7, lr}
 8004288:	b0af      	sub	sp, #188	@ 0xbc
 800428a:	af2a      	add	r7, sp, #168	@ 0xa8
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	460b      	mov	r3, r1
 8004290:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	7b5a      	ldrb	r2, [r3, #13]
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	429a      	cmp	r2, r3
 800429a:	d001      	beq.n	80042a0 <bno055_set_page+0x1a>
        return BNO_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	e024      	b.n	80042ea <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 80042a0:	78fb      	ldrb	r3, [r7, #3]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d901      	bls.n	80042aa <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 80042a6:	2302      	movs	r3, #2
 80042a8:	e01f      	b.n	80042ea <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 80042aa:	687c      	ldr	r4, [r7, #4]
 80042ac:	2301      	movs	r3, #1
 80042ae:	9329      	str	r3, [sp, #164]	@ 0xa4
 80042b0:	1cfb      	adds	r3, r7, #3
 80042b2:	9328      	str	r3, [sp, #160]	@ 0xa0
 80042b4:	2307      	movs	r3, #7
 80042b6:	9327      	str	r3, [sp, #156]	@ 0x9c
 80042b8:	4668      	mov	r0, sp
 80042ba:	f104 0310 	add.w	r3, r4, #16
 80042be:	229c      	movs	r2, #156	@ 0x9c
 80042c0:	4619      	mov	r1, r3
 80042c2:	f004 fcf9 	bl	8008cb8 <memcpy>
 80042c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80042ca:	f7ff ffae 	bl	800422a <bno055_write_regs>
 80042ce:	4603      	mov	r3, r0
 80042d0:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <bno055_set_page+0x56>
        return err;
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	e006      	b.n	80042ea <bno055_set_page+0x64>
    }
    imu->_page = page;
 80042dc:	78fa      	ldrb	r2, [r7, #3]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 80042e2:	2002      	movs	r0, #2
 80042e4:	f000 fbd8 	bl	8004a98 <HAL_Delay>
    return BNO_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd90      	pop	{r4, r7, pc}

080042f2 <_pack_data>:
 */

#include "config_data.h"

void _pack_data(uint8_t *data_array_out, data_t data)
{
 80042f2:	b084      	sub	sp, #16
 80042f4:	b480      	push	{r7}
 80042f6:	b08b      	sub	sp, #44	@ 0x2c
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8004300:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// Gán giá trị float vào mảng
	float  _eul_roll_deg, _eul_pitch_deg, _acc_x_filter, _omega_filter, _angle, _angle_pendulum, _SP_angle, _gyr_y_deg;
	_eul_roll_deg 		= data.eul_roll_deg;
 8004304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004306:	627b      	str	r3, [r7, #36]	@ 0x24
	_eul_pitch_deg 		= data.eul_pitch_deg;
 8004308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800430a:	623b      	str	r3, [r7, #32]
	_acc_x_filter 		= data.acc_x_filter ;
 800430c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800430e:	61fb      	str	r3, [r7, #28]
	_omega_filter 		= data.omega_filter;
 8004310:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004312:	61bb      	str	r3, [r7, #24]
	_angle 				= data.angle;
 8004314:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004316:	617b      	str	r3, [r7, #20]
	_angle_pendulum 	= data.angle_pendulum;
 8004318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800431a:	613b      	str	r3, [r7, #16]
	_SP_angle			= data.SP_angle;
 800431c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800431e:	60fb      	str	r3, [r7, #12]
	_gyr_y_deg 			= data.gyr_y_deg;
 8004320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004322:	60bb      	str	r3, [r7, #8]

	memcpy(&data_array_out[0],  &_eul_roll_deg , sizeof(float ));
 8004324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	601a      	str	r2, [r3, #0]
	memcpy(&data_array_out[4],  &_eul_pitch_deg, sizeof(float));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3304      	adds	r3, #4
 800432e:	6a3a      	ldr	r2, [r7, #32]
 8004330:	601a      	str	r2, [r3, #0]
	memcpy(&data_array_out[8],  &_acc_x_filter, sizeof(float));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3308      	adds	r3, #8
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	601a      	str	r2, [r3, #0]
	memcpy(&data_array_out[12], &_omega_filter, sizeof(float));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	330c      	adds	r3, #12
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	601a      	str	r2, [r3, #0]
    memcpy(&data_array_out[16], &_angle , sizeof(float));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3310      	adds	r3, #16
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	601a      	str	r2, [r3, #0]
    memcpy(&data_array_out[20], &_angle_pendulum, sizeof(float));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3314      	adds	r3, #20
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	601a      	str	r2, [r3, #0]
	memcpy(&data_array_out[24], &_SP_angle, sizeof(float));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3318      	adds	r3, #24
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	601a      	str	r2, [r3, #0]
	memcpy(&data_array_out[28], &_gyr_y_deg , sizeof(float ));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	331c      	adds	r3, #28
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	601a      	str	r2, [r3, #0]
}
 8004362:	bf00      	nop
 8004364:	372c      	adds	r7, #44	@ 0x2c
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	b004      	add	sp, #16
 800436e:	4770      	bx	lr

08004370 <esc_init>:
#include "tim.h"
#include "math.h"


void esc_init()
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_4); // khởi tạo pwm esc
 8004374:	210c      	movs	r1, #12
 8004376:	4805      	ldr	r0, [pc, #20]	@ (800438c <esc_init+0x1c>)
 8004378:	f003 fbb4 	bl	8007ae4 <HAL_TIM_PWM_Start_IT>
    HAL_Delay(100);
 800437c:	2064      	movs	r0, #100	@ 0x64
 800437e:	f000 fb8b 	bl	8004a98 <HAL_Delay>
    calib_esc();
 8004382:	f000 f805 	bl	8004390 <calib_esc>
}
 8004386:	bf00      	nop
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	20000440 	.word	0x20000440

08004390 <calib_esc>:

void calib_esc()
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 2000);
 8004394:	4b09      	ldr	r3, [pc, #36]	@ (80043bc <calib_esc+0x2c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800439c:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(2000);
 800439e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80043a2:	f000 fb79 	bl	8004a98 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 1000);
 80043a6:	4b05      	ldr	r3, [pc, #20]	@ (80043bc <calib_esc+0x2c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80043ae:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(2000);
 80043b0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80043b4:	f000 fb70 	bl	8004a98 <HAL_Delay>
}
 80043b8:	bf00      	nop
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20000440 	.word	0x20000440

080043c0 <MotorDriver>:

void MotorDriver (float Local_duty)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (Local_duty < 0)
 80043ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80043ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d6:	d511      	bpl.n	80043fc <MotorDriver+0x3c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);  // chieu am
 80043d8:	2200      	movs	r2, #0
 80043da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80043de:	4811      	ldr	r0, [pc, #68]	@ (8004424 <MotorDriver+0x64>)
 80043e0:	f000 fe44 	bl	800506c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, -Local_duty );
 80043e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80043e8:	eef1 7a67 	vneg.f32	s15, s15
 80043ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004428 <MotorDriver+0x68>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043f4:	ee17 2a90 	vmov	r2, s15
 80043f8:	641a      	str	r2, [r3, #64]	@ 0x40
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);  // chieu duong
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, Local_duty );
	}
}
 80043fa:	e00e      	b.n	800441a <MotorDriver+0x5a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);  // chieu duong
 80043fc:	2201      	movs	r2, #1
 80043fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004402:	4808      	ldr	r0, [pc, #32]	@ (8004424 <MotorDriver+0x64>)
 8004404:	f000 fe32 	bl	800506c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, Local_duty );
 8004408:	4b07      	ldr	r3, [pc, #28]	@ (8004428 <MotorDriver+0x68>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004414:	ee17 2a90 	vmov	r2, s15
 8004418:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40020400 	.word	0x40020400
 8004428:	200003f8 	.word	0x200003f8

0800442c <cs_high>:

#include "nrf24l01p.h"


static void cs_high()
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8004430:	2201      	movs	r2, #1
 8004432:	2180      	movs	r1, #128	@ 0x80
 8004434:	4802      	ldr	r0, [pc, #8]	@ (8004440 <cs_high+0x14>)
 8004436:	f000 fe19 	bl	800506c <HAL_GPIO_WritePin>
}
 800443a:	bf00      	nop
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40020c00 	.word	0x40020c00

08004444 <cs_low>:

static void cs_low()
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8004448:	2200      	movs	r2, #0
 800444a:	2180      	movs	r1, #128	@ 0x80
 800444c:	4802      	ldr	r0, [pc, #8]	@ (8004458 <cs_low+0x14>)
 800444e:	f000 fe0d 	bl	800506c <HAL_GPIO_WritePin>
}
 8004452:	bf00      	nop
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40020c00 	.word	0x40020c00

0800445c <ce_high>:

static void ce_high()
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8004460:	2201      	movs	r2, #1
 8004462:	2140      	movs	r1, #64	@ 0x40
 8004464:	4802      	ldr	r0, [pc, #8]	@ (8004470 <ce_high+0x14>)
 8004466:	f000 fe01 	bl	800506c <HAL_GPIO_WritePin>
}
 800446a:	bf00      	nop
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40020c00 	.word	0x40020c00

08004474 <ce_low>:

static void ce_low()
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8004478:	2200      	movs	r2, #0
 800447a:	2140      	movs	r1, #64	@ 0x40
 800447c:	4802      	ldr	r0, [pc, #8]	@ (8004488 <ce_low+0x14>)
 800447e:	f000 fdf5 	bl	800506c <HAL_GPIO_WritePin>
}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40020c00 	.word	0x40020c00

0800448c <read_register>:

static uint8_t read_register(uint8_t reg)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af02      	add	r7, sp, #8
 8004492:	4603      	mov	r3, r0
 8004494:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 800449a:	f7ff ffd3 	bl	8004444 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800449e:	f107 020e 	add.w	r2, r7, #14
 80044a2:	f107 010f 	add.w	r1, r7, #15
 80044a6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	2301      	movs	r3, #1
 80044ae:	4809      	ldr	r0, [pc, #36]	@ (80044d4 <read_register+0x48>)
 80044b0:	f002 ff1c 	bl	80072ec <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 80044b4:	f107 010d 	add.w	r1, r7, #13
 80044b8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80044bc:	2201      	movs	r2, #1
 80044be:	4805      	ldr	r0, [pc, #20]	@ (80044d4 <read_register+0x48>)
 80044c0:	f002 fdfb 	bl	80070ba <HAL_SPI_Receive>
    cs_high();
 80044c4:	f7ff ffb2 	bl	800442c <cs_high>

    return read_val;
 80044c8:	7b7b      	ldrb	r3, [r7, #13]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000310 	.word	0x20000310

080044d8 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af02      	add	r7, sp, #8
 80044de:	4603      	mov	r3, r0
 80044e0:	460a      	mov	r2, r1
 80044e2:	71fb      	strb	r3, [r7, #7]
 80044e4:	4613      	mov	r3, r2
 80044e6:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	f043 0320 	orr.w	r3, r3, #32
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 80044f2:	79bb      	ldrb	r3, [r7, #6]
 80044f4:	737b      	strb	r3, [r7, #13]

    cs_low();
 80044f6:	f7ff ffa5 	bl	8004444 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80044fa:	f107 020e 	add.w	r2, r7, #14
 80044fe:	f107 010f 	add.w	r1, r7, #15
 8004502:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	2301      	movs	r3, #1
 800450a:	4809      	ldr	r0, [pc, #36]	@ (8004530 <write_register+0x58>)
 800450c:	f002 feee 	bl	80072ec <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8004510:	f107 010d 	add.w	r1, r7, #13
 8004514:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004518:	2201      	movs	r2, #1
 800451a:	4805      	ldr	r0, [pc, #20]	@ (8004530 <write_register+0x58>)
 800451c:	f002 fc89 	bl	8006e32 <HAL_SPI_Transmit>
    cs_high();
 8004520:	f7ff ff84 	bl	800442c <cs_high>

    return write_val;
 8004524:	7b7b      	ldrb	r3, [r7, #13]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20000310 	.word	0x20000310

08004534 <nrf24l01p_tx_init>:
    
    ce_high();
}

void nrf24l01p_tx_init(channel MHz, air_data_rate bps)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	460a      	mov	r2, r1
 800453e:	80fb      	strh	r3, [r7, #6]
 8004540:	4613      	mov	r3, r2
 8004542:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 8004544:	f000 f850 	bl	80045e8 <nrf24l01p_reset>

    nrf24l01p_ptx_mode();
 8004548:	f000 f8a2 	bl	8004690 <nrf24l01p_ptx_mode>
    nrf24l01p_power_up();
 800454c:	f000 f94c 	bl	80047e8 <nrf24l01p_power_up>

    nrf24l01p_set_rf_channel(MHz);
 8004550:	88fb      	ldrh	r3, [r7, #6]
 8004552:	4618      	mov	r0, r3
 8004554:	f000 f9d4 	bl	8004900 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8004558:	797b      	ldrb	r3, [r7, #5]
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fa00 	bl	8004960 <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8004560:	2003      	movs	r0, #3
 8004562:	f000 f9e0 	bl	8004926 <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8004566:	2001      	movs	r0, #1
 8004568:	f000 f953 	bl	8004812 <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 800456c:	2005      	movs	r0, #5
 800456e:	f000 f973 	bl	8004858 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 8004572:	2003      	movs	r0, #3
 8004574:	f000 f980 	bl	8004878 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8004578:	20fa      	movs	r0, #250	@ 0xfa
 800457a:	f000 f999 	bl	80048b0 <nrf24l01p_auto_retransmit_delay>

    ce_high();
 800457e:	f7ff ff6d 	bl	800445c <ce_high>
}
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <nrf24l01p_tx_transmit>:

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}

void nrf24l01p_tx_transmit(uint8_t* tx_payload)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b082      	sub	sp, #8
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
    nrf24l01p_write_tx_fifo(tx_payload);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f892 	bl	80046bc <nrf24l01p_write_tx_fifo>
}
 8004598:	bf00      	nop
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <nrf24l01p_tx_irq>:

void nrf24l01p_tx_irq()
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
    uint8_t tx_ds = nrf24l01p_get_status();
 80045a6:	f000 f8dd 	bl	8004764 <nrf24l01p_get_status>
 80045aa:	4603      	mov	r3, r0
 80045ac:	71fb      	strb	r3, [r7, #7]
    tx_ds &= 0x20;
 80045ae:	79fb      	ldrb	r3, [r7, #7]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	71fb      	strb	r3, [r7, #7]

    if(tx_ds)
 80045b6:	79fb      	ldrb	r3, [r7, #7]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d007      	beq.n	80045cc <nrf24l01p_tx_irq+0x2c>
    {   
        // TX_DS
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80045bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80045c0:	4808      	ldr	r0, [pc, #32]	@ (80045e4 <nrf24l01p_tx_irq+0x44>)
 80045c2:	f000 fd6c 	bl	800509e <HAL_GPIO_TogglePin>
        nrf24l01p_clear_tx_ds();
 80045c6:	f000 f8e7 	bl	8004798 <nrf24l01p_clear_tx_ds>
    {
        // MAX_RT
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
        nrf24l01p_clear_max_rt();
    }
}
 80045ca:	e007      	b.n	80045dc <nrf24l01p_tx_irq+0x3c>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80045cc:	2201      	movs	r2, #1
 80045ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80045d2:	4804      	ldr	r0, [pc, #16]	@ (80045e4 <nrf24l01p_tx_irq+0x44>)
 80045d4:	f000 fd4a 	bl	800506c <HAL_GPIO_WritePin>
        nrf24l01p_clear_max_rt();
 80045d8:	f000 f8f2 	bl	80047c0 <nrf24l01p_clear_max_rt>
}
 80045dc:	bf00      	nop
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40020800 	.word	0x40020800

080045e8 <nrf24l01p_reset>:

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 80045ec:	f7ff ff1e 	bl	800442c <cs_high>
    ce_low();
 80045f0:	f7ff ff40 	bl	8004474 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 80045f4:	2108      	movs	r1, #8
 80045f6:	2000      	movs	r0, #0
 80045f8:	f7ff ff6e 	bl	80044d8 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 80045fc:	213f      	movs	r1, #63	@ 0x3f
 80045fe:	2001      	movs	r0, #1
 8004600:	f7ff ff6a 	bl	80044d8 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8004604:	2103      	movs	r1, #3
 8004606:	2002      	movs	r0, #2
 8004608:	f7ff ff66 	bl	80044d8 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 800460c:	2103      	movs	r1, #3
 800460e:	2003      	movs	r0, #3
 8004610:	f7ff ff62 	bl	80044d8 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8004614:	2103      	movs	r1, #3
 8004616:	2004      	movs	r0, #4
 8004618:	f7ff ff5e 	bl	80044d8 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 800461c:	2102      	movs	r1, #2
 800461e:	2005      	movs	r0, #5
 8004620:	f7ff ff5a 	bl	80044d8 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8004624:	2107      	movs	r1, #7
 8004626:	2006      	movs	r0, #6
 8004628:	f7ff ff56 	bl	80044d8 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 800462c:	217e      	movs	r1, #126	@ 0x7e
 800462e:	2007      	movs	r0, #7
 8004630:	f7ff ff52 	bl	80044d8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8004634:	2100      	movs	r1, #0
 8004636:	2011      	movs	r0, #17
 8004638:	f7ff ff4e 	bl	80044d8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 800463c:	2100      	movs	r1, #0
 800463e:	2011      	movs	r0, #17
 8004640:	f7ff ff4a 	bl	80044d8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8004644:	2100      	movs	r1, #0
 8004646:	2012      	movs	r0, #18
 8004648:	f7ff ff46 	bl	80044d8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 800464c:	2100      	movs	r1, #0
 800464e:	2013      	movs	r0, #19
 8004650:	f7ff ff42 	bl	80044d8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8004654:	2100      	movs	r1, #0
 8004656:	2014      	movs	r0, #20
 8004658:	f7ff ff3e 	bl	80044d8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 800465c:	2100      	movs	r1, #0
 800465e:	2015      	movs	r0, #21
 8004660:	f7ff ff3a 	bl	80044d8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8004664:	2100      	movs	r1, #0
 8004666:	2016      	movs	r0, #22
 8004668:	f7ff ff36 	bl	80044d8 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 800466c:	2111      	movs	r1, #17
 800466e:	2017      	movs	r0, #23
 8004670:	f7ff ff32 	bl	80044d8 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8004674:	2100      	movs	r1, #0
 8004676:	201c      	movs	r0, #28
 8004678:	f7ff ff2e 	bl	80044d8 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 800467c:	2100      	movs	r1, #0
 800467e:	201d      	movs	r0, #29
 8004680:	f7ff ff2a 	bl	80044d8 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 8004684:	f000 f83e 	bl	8004704 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 8004688:	f000 f854 	bl	8004734 <nrf24l01p_flush_tx_fifo>
}
 800468c:	bf00      	nop
 800468e:	bd80      	pop	{r7, pc}

08004690 <nrf24l01p_ptx_mode>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_ptx_mode()
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8004696:	2000      	movs	r0, #0
 8004698:	f7ff fef8 	bl	800448c <read_register>
 800469c:	4603      	mov	r3, r0
 800469e:	71fb      	strb	r3, [r7, #7]
    new_config &= 0xFE;
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	f023 0301 	bic.w	r3, r3, #1
 80046a6:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	4619      	mov	r1, r3
 80046ac:	2000      	movs	r0, #0
 80046ae:	f7ff ff13 	bl	80044d8 <write_register>
}
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <nrf24l01p_write_tx_fifo>:

    return status;
}

uint8_t nrf24l01p_write_tx_fifo(uint8_t* tx_payload)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 80046c4:	23a0      	movs	r3, #160	@ 0xa0
 80046c6:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 80046c8:	f7ff febc 	bl	8004444 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80046cc:	f107 020e 	add.w	r2, r7, #14
 80046d0:	f107 010f 	add.w	r1, r7, #15
 80046d4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	2301      	movs	r3, #1
 80046dc:	4808      	ldr	r0, [pc, #32]	@ (8004700 <nrf24l01p_write_tx_fifo+0x44>)
 80046de:	f002 fe05 	bl	80072ec <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 80046e2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80046e6:	2220      	movs	r2, #32
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	4805      	ldr	r0, [pc, #20]	@ (8004700 <nrf24l01p_write_tx_fifo+0x44>)
 80046ec:	f002 fba1 	bl	8006e32 <HAL_SPI_Transmit>
    cs_high(); 
 80046f0:	f7ff fe9c 	bl	800442c <cs_high>

    return status;
 80046f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20000310 	.word	0x20000310

08004704 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo()
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 800470a:	23e2      	movs	r3, #226	@ 0xe2
 800470c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 800470e:	f7ff fe99 	bl	8004444 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8004712:	1dba      	adds	r2, r7, #6
 8004714:	1df9      	adds	r1, r7, #7
 8004716:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	2301      	movs	r3, #1
 800471e:	4804      	ldr	r0, [pc, #16]	@ (8004730 <nrf24l01p_flush_rx_fifo+0x2c>)
 8004720:	f002 fde4 	bl	80072ec <HAL_SPI_TransmitReceive>
    cs_high();
 8004724:	f7ff fe82 	bl	800442c <cs_high>
}
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20000310 	.word	0x20000310

08004734 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 800473a:	23e1      	movs	r3, #225	@ 0xe1
 800473c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 800473e:	f7ff fe81 	bl	8004444 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8004742:	1dba      	adds	r2, r7, #6
 8004744:	1df9      	adds	r1, r7, #7
 8004746:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	2301      	movs	r3, #1
 800474e:	4804      	ldr	r0, [pc, #16]	@ (8004760 <nrf24l01p_flush_tx_fifo+0x2c>)
 8004750:	f002 fdcc 	bl	80072ec <HAL_SPI_TransmitReceive>
    cs_high();
 8004754:	f7ff fe6a 	bl	800442c <cs_high>
}
 8004758:	bf00      	nop
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	20000310 	.word	0x20000310

08004764 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 800476a:	23ff      	movs	r3, #255	@ 0xff
 800476c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 800476e:	f7ff fe69 	bl	8004444 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8004772:	1dba      	adds	r2, r7, #6
 8004774:	1df9      	adds	r1, r7, #7
 8004776:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	2301      	movs	r3, #1
 800477e:	4805      	ldr	r0, [pc, #20]	@ (8004794 <nrf24l01p_get_status+0x30>)
 8004780:	f002 fdb4 	bl	80072ec <HAL_SPI_TransmitReceive>
    cs_high(); 
 8004784:	f7ff fe52 	bl	800442c <cs_high>

    return status;
 8004788:	79bb      	ldrb	r3, [r7, #6]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20000310 	.word	0x20000310

08004798 <nrf24l01p_clear_tx_ds>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_clear_tx_ds()
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 800479e:	f7ff ffe1 	bl	8004764 <nrf24l01p_get_status>
 80047a2:	4603      	mov	r3, r0
 80047a4:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x20;
 80047a6:	79fb      	ldrb	r3, [r7, #7]
 80047a8:	f043 0320 	orr.w	r3, r3, #32
 80047ac:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);     
 80047ae:	79fb      	ldrb	r3, [r7, #7]
 80047b0:	4619      	mov	r1, r3
 80047b2:	2007      	movs	r0, #7
 80047b4:	f7ff fe90 	bl	80044d8 <write_register>
}
 80047b8:	bf00      	nop
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <nrf24l01p_clear_max_rt>:

void nrf24l01p_clear_max_rt()
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 80047c6:	f7ff ffcd 	bl	8004764 <nrf24l01p_get_status>
 80047ca:	4603      	mov	r3, r0
 80047cc:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x10;
 80047ce:	79fb      	ldrb	r3, [r7, #7]
 80047d0:	f043 0310 	orr.w	r3, r3, #16
 80047d4:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status); 
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	4619      	mov	r1, r3
 80047da:	2007      	movs	r0, #7
 80047dc:	f7ff fe7c 	bl	80044d8 <write_register>
}
 80047e0:	bf00      	nop
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <nrf24l01p_power_up>:

void nrf24l01p_power_up()
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80047ee:	2000      	movs	r0, #0
 80047f0:	f7ff fe4c 	bl	800448c <read_register>
 80047f4:	4603      	mov	r3, r0
 80047f6:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 80047f8:	79fb      	ldrb	r3, [r7, #7]
 80047fa:	f043 0302 	orr.w	r3, r3, #2
 80047fe:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	4619      	mov	r1, r3
 8004804:	2000      	movs	r0, #0
 8004806:	f7ff fe67 	bl	80044d8 <write_register>
}
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b084      	sub	sp, #16
 8004816:	af00      	add	r7, sp, #0
 8004818:	4603      	mov	r3, r0
 800481a:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800481c:	2000      	movs	r0, #0
 800481e:	f7ff fe35 	bl	800448c <read_register>
 8004822:	4603      	mov	r3, r0
 8004824:	73fb      	strb	r3, [r7, #15]
    
    switch(bytes)
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d002      	beq.n	8004832 <nrf24l01p_set_crc_length+0x20>
 800482c:	2b02      	cmp	r3, #2
 800482e:	d005      	beq.n	800483c <nrf24l01p_set_crc_length+0x2a>
 8004830:	e009      	b.n	8004846 <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	f023 0304 	bic.w	r3, r3, #4
 8004838:	73fb      	strb	r3, [r7, #15]
            break;
 800483a:	e004      	b.n	8004846 <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 800483c:	7bfb      	ldrb	r3, [r7, #15]
 800483e:	f043 0304 	orr.w	r3, r3, #4
 8004842:	73fb      	strb	r3, [r7, #15]
            break;
 8004844:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8004846:	7bfb      	ldrb	r3, [r7, #15]
 8004848:	4619      	mov	r1, r3
 800484a:	2000      	movs	r0, #0
 800484c:	f7ff fe44 	bl	80044d8 <write_register>
}
 8004850:	bf00      	nop
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	4603      	mov	r3, r0
 8004860:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	3b02      	subs	r3, #2
 8004866:	b2db      	uxtb	r3, r3
 8004868:	4619      	mov	r1, r3
 800486a:	2003      	movs	r0, #3
 800486c:	f7ff fe34 	bl	80044d8 <write_register>
}
 8004870:	bf00      	nop
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	4603      	mov	r3, r0
 8004880:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8004882:	2004      	movs	r0, #4
 8004884:	f7ff fe02 	bl	800448c <read_register>
 8004888:	4603      	mov	r3, r0
 800488a:	73fb      	strb	r3, [r7, #15]
    
    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 800488c:	7bfb      	ldrb	r3, [r7, #15]
 800488e:	f063 030f 	orn	r3, r3, #15
 8004892:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 8004894:	7bfa      	ldrb	r2, [r7, #15]
 8004896:	79fb      	ldrb	r3, [r7, #7]
 8004898:	4313      	orrs	r3, r2
 800489a:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	4619      	mov	r1, r3
 80048a0:	2004      	movs	r0, #4
 80048a2:	f7ff fe19 	bl	80044d8 <write_register>
}
 80048a6:	bf00      	nop
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
	...

080048b0 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 80048ba:	2004      	movs	r0, #4
 80048bc:	f7ff fde6 	bl	800448c <read_register>
 80048c0:	4603      	mov	r3, r0
 80048c2:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	f043 030f 	orr.w	r3, r3, #15
 80048ca:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 80048cc:	88fb      	ldrh	r3, [r7, #6]
 80048ce:	4a0b      	ldr	r2, [pc, #44]	@ (80048fc <nrf24l01p_auto_retransmit_delay+0x4c>)
 80048d0:	fba2 2303 	umull	r2, r3, r2, r3
 80048d4:	091b      	lsrs	r3, r3, #4
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	b25a      	sxtb	r2, r3
 80048de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	b25b      	sxtb	r3, r3
 80048e6:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
 80048ea:	4619      	mov	r1, r3
 80048ec:	2004      	movs	r0, #4
 80048ee:	f7ff fdf3 	bl	80044d8 <write_register>
}
 80048f2:	bf00      	nop
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	10624dd3 	.word	0x10624dd3

08004900 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	4603      	mov	r3, r0
 8004908:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 800490a:	88fb      	ldrh	r3, [r7, #6]
 800490c:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8004910:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8004912:	89fb      	ldrh	r3, [r7, #14]
 8004914:	b2db      	uxtb	r3, r3
 8004916:	4619      	mov	r1, r3
 8004918:	2005      	movs	r0, #5
 800491a:	f7ff fddd 	bl	80044d8 <write_register>
}
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	4603      	mov	r3, r0
 800492e:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8004930:	2006      	movs	r0, #6
 8004932:	f7ff fdab 	bl	800448c <read_register>
 8004936:	4603      	mov	r3, r0
 8004938:	f023 0306 	bic.w	r3, r3, #6
 800493c:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	b25a      	sxtb	r2, r3
 8004944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004948:	4313      	orrs	r3, r2
 800494a:	b25b      	sxtb	r3, r3
 800494c:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 800494e:	7bfb      	ldrb	r3, [r7, #15]
 8004950:	4619      	mov	r1, r3
 8004952:	2006      	movs	r0, #6
 8004954:	f7ff fdc0 	bl	80044d8 <write_register>
}
 8004958:	bf00      	nop
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	4603      	mov	r3, r0
 8004968:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 800496a:	2006      	movs	r0, #6
 800496c:	f7ff fd8e 	bl	800448c <read_register>
 8004970:	4603      	mov	r3, r0
 8004972:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8004976:	73fb      	strb	r3, [r7, #15]
    
    switch(bps)
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d00a      	beq.n	8004994 <nrf24l01p_set_rf_air_data_rate+0x34>
 800497e:	2b02      	cmp	r3, #2
 8004980:	dc0e      	bgt.n	80049a0 <nrf24l01p_set_rf_air_data_rate+0x40>
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00b      	beq.n	800499e <nrf24l01p_set_rf_air_data_rate+0x3e>
 8004986:	2b01      	cmp	r3, #1
 8004988:	d10a      	bne.n	80049a0 <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 800498a:	7bfb      	ldrb	r3, [r7, #15]
 800498c:	f043 0308 	orr.w	r3, r3, #8
 8004990:	73fb      	strb	r3, [r7, #15]
            break;
 8004992:	e005      	b.n	80049a0 <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	f043 0320 	orr.w	r3, r3, #32
 800499a:	73fb      	strb	r3, [r7, #15]
            break;
 800499c:	e000      	b.n	80049a0 <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 800499e:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	4619      	mov	r1, r3
 80049a4:	2006      	movs	r0, #6
 80049a6:	f7ff fd97 	bl	80044d8 <write_register>
 80049aa:	bf00      	nop
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049b8:	4b0e      	ldr	r3, [pc, #56]	@ (80049f4 <HAL_Init+0x40>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a0d      	ldr	r2, [pc, #52]	@ (80049f4 <HAL_Init+0x40>)
 80049be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049c4:	4b0b      	ldr	r3, [pc, #44]	@ (80049f4 <HAL_Init+0x40>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a0a      	ldr	r2, [pc, #40]	@ (80049f4 <HAL_Init+0x40>)
 80049ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049d0:	4b08      	ldr	r3, [pc, #32]	@ (80049f4 <HAL_Init+0x40>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a07      	ldr	r2, [pc, #28]	@ (80049f4 <HAL_Init+0x40>)
 80049d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049dc:	2003      	movs	r0, #3
 80049de:	f000 f94f 	bl	8004c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049e2:	200f      	movs	r0, #15
 80049e4:	f000 f808 	bl	80049f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049e8:	f7fd fc86 	bl	80022f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	40023c00 	.word	0x40023c00

080049f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a00:	4b12      	ldr	r3, [pc, #72]	@ (8004a4c <HAL_InitTick+0x54>)
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	4b12      	ldr	r3, [pc, #72]	@ (8004a50 <HAL_InitTick+0x58>)
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	4619      	mov	r1, r3
 8004a0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 f967 	bl	8004cea <HAL_SYSTICK_Config>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e00e      	b.n	8004a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b0f      	cmp	r3, #15
 8004a2a:	d80a      	bhi.n	8004a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	f04f 30ff 	mov.w	r0, #4294967295
 8004a34:	f000 f92f 	bl	8004c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a38:	4a06      	ldr	r2, [pc, #24]	@ (8004a54 <HAL_InitTick+0x5c>)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	e000      	b.n	8004a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	2000002c 	.word	0x2000002c
 8004a50:	20000034 	.word	0x20000034
 8004a54:	20000030 	.word	0x20000030

08004a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a5c:	4b06      	ldr	r3, [pc, #24]	@ (8004a78 <HAL_IncTick+0x20>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	461a      	mov	r2, r3
 8004a62:	4b06      	ldr	r3, [pc, #24]	@ (8004a7c <HAL_IncTick+0x24>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4413      	add	r3, r2
 8004a68:	4a04      	ldr	r2, [pc, #16]	@ (8004a7c <HAL_IncTick+0x24>)
 8004a6a:	6013      	str	r3, [r2, #0]
}
 8004a6c:	bf00      	nop
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	20000034 	.word	0x20000034
 8004a7c:	200004d0 	.word	0x200004d0

08004a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  return uwTick;
 8004a84:	4b03      	ldr	r3, [pc, #12]	@ (8004a94 <HAL_GetTick+0x14>)
 8004a86:	681b      	ldr	r3, [r3, #0]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	200004d0 	.word	0x200004d0

08004a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004aa0:	f7ff ffee 	bl	8004a80 <HAL_GetTick>
 8004aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab0:	d005      	beq.n	8004abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8004adc <HAL_Delay+0x44>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004abe:	bf00      	nop
 8004ac0:	f7ff ffde 	bl	8004a80 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d8f7      	bhi.n	8004ac0 <HAL_Delay+0x28>
  {
  }
}
 8004ad0:	bf00      	nop
 8004ad2:	bf00      	nop
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20000034 	.word	0x20000034

08004ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004af0:	4b0c      	ldr	r3, [pc, #48]	@ (8004b24 <__NVIC_SetPriorityGrouping+0x44>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004afc:	4013      	ands	r3, r2
 8004afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b12:	4a04      	ldr	r2, [pc, #16]	@ (8004b24 <__NVIC_SetPriorityGrouping+0x44>)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	60d3      	str	r3, [r2, #12]
}
 8004b18:	bf00      	nop
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	e000ed00 	.word	0xe000ed00

08004b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b2c:	4b04      	ldr	r3, [pc, #16]	@ (8004b40 <__NVIC_GetPriorityGrouping+0x18>)
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	0a1b      	lsrs	r3, r3, #8
 8004b32:	f003 0307 	and.w	r3, r3, #7
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	e000ed00 	.word	0xe000ed00

08004b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	db0b      	blt.n	8004b6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b56:	79fb      	ldrb	r3, [r7, #7]
 8004b58:	f003 021f 	and.w	r2, r3, #31
 8004b5c:	4907      	ldr	r1, [pc, #28]	@ (8004b7c <__NVIC_EnableIRQ+0x38>)
 8004b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b62:	095b      	lsrs	r3, r3, #5
 8004b64:	2001      	movs	r0, #1
 8004b66:	fa00 f202 	lsl.w	r2, r0, r2
 8004b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	e000e100 	.word	0xe000e100

08004b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	4603      	mov	r3, r0
 8004b88:	6039      	str	r1, [r7, #0]
 8004b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	db0a      	blt.n	8004baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	490c      	ldr	r1, [pc, #48]	@ (8004bcc <__NVIC_SetPriority+0x4c>)
 8004b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9e:	0112      	lsls	r2, r2, #4
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ba8:	e00a      	b.n	8004bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	4908      	ldr	r1, [pc, #32]	@ (8004bd0 <__NVIC_SetPriority+0x50>)
 8004bb0:	79fb      	ldrb	r3, [r7, #7]
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	3b04      	subs	r3, #4
 8004bb8:	0112      	lsls	r2, r2, #4
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	761a      	strb	r2, [r3, #24]
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	e000e100 	.word	0xe000e100
 8004bd0:	e000ed00 	.word	0xe000ed00

08004bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b089      	sub	sp, #36	@ 0x24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	f1c3 0307 	rsb	r3, r3, #7
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	bf28      	it	cs
 8004bf2:	2304      	movcs	r3, #4
 8004bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	2b06      	cmp	r3, #6
 8004bfc:	d902      	bls.n	8004c04 <NVIC_EncodePriority+0x30>
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	3b03      	subs	r3, #3
 8004c02:	e000      	b.n	8004c06 <NVIC_EncodePriority+0x32>
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c08:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	43da      	mvns	r2, r3
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	401a      	ands	r2, r3
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	fa01 f303 	lsl.w	r3, r1, r3
 8004c26:	43d9      	mvns	r1, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c2c:	4313      	orrs	r3, r2
         );
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3724      	adds	r7, #36	@ 0x24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
	...

08004c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c4c:	d301      	bcc.n	8004c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e00f      	b.n	8004c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c52:	4a0a      	ldr	r2, [pc, #40]	@ (8004c7c <SysTick_Config+0x40>)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c5a:	210f      	movs	r1, #15
 8004c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c60:	f7ff ff8e 	bl	8004b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c64:	4b05      	ldr	r3, [pc, #20]	@ (8004c7c <SysTick_Config+0x40>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c6a:	4b04      	ldr	r3, [pc, #16]	@ (8004c7c <SysTick_Config+0x40>)
 8004c6c:	2207      	movs	r2, #7
 8004c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	e000e010 	.word	0xe000e010

08004c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff ff29 	bl	8004ae0 <__NVIC_SetPriorityGrouping>
}
 8004c8e:	bf00      	nop
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b086      	sub	sp, #24
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	60b9      	str	r1, [r7, #8]
 8004ca0:	607a      	str	r2, [r7, #4]
 8004ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ca8:	f7ff ff3e 	bl	8004b28 <__NVIC_GetPriorityGrouping>
 8004cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	68b9      	ldr	r1, [r7, #8]
 8004cb2:	6978      	ldr	r0, [r7, #20]
 8004cb4:	f7ff ff8e 	bl	8004bd4 <NVIC_EncodePriority>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff ff5d 	bl	8004b80 <__NVIC_SetPriority>
}
 8004cc6:	bf00      	nop
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b082      	sub	sp, #8
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff ff31 	bl	8004b44 <__NVIC_EnableIRQ>
}
 8004ce2:	bf00      	nop
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b082      	sub	sp, #8
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7ff ffa2 	bl	8004c3c <SysTick_Config>
 8004cf8:	4603      	mov	r3, r0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b089      	sub	sp, #36	@ 0x24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61fb      	str	r3, [r7, #28]
 8004d1e:	e16b      	b.n	8004ff8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d20:	2201      	movs	r2, #1
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	4013      	ands	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	f040 815a 	bne.w	8004ff2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d005      	beq.n	8004d56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d130      	bne.n	8004db8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	2203      	movs	r2, #3
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	43db      	mvns	r3, r3
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	43db      	mvns	r3, r3
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	091b      	lsrs	r3, r3, #4
 8004da2:	f003 0201 	and.w	r2, r3, #1
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f003 0303 	and.w	r3, r3, #3
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d017      	beq.n	8004df4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	2203      	movs	r2, #3
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f003 0303 	and.w	r3, r3, #3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d123      	bne.n	8004e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	08da      	lsrs	r2, r3, #3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3208      	adds	r2, #8
 8004e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	220f      	movs	r2, #15
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	4013      	ands	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	08da      	lsrs	r2, r3, #3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3208      	adds	r2, #8
 8004e42:	69b9      	ldr	r1, [r7, #24]
 8004e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	2203      	movs	r2, #3
 8004e54:	fa02 f303 	lsl.w	r3, r2, r3
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f003 0203 	and.w	r2, r3, #3
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 80b4 	beq.w	8004ff2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	4b60      	ldr	r3, [pc, #384]	@ (8005010 <HAL_GPIO_Init+0x30c>)
 8004e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e92:	4a5f      	ldr	r2, [pc, #380]	@ (8005010 <HAL_GPIO_Init+0x30c>)
 8004e94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e9a:	4b5d      	ldr	r3, [pc, #372]	@ (8005010 <HAL_GPIO_Init+0x30c>)
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ea6:	4a5b      	ldr	r2, [pc, #364]	@ (8005014 <HAL_GPIO_Init+0x310>)
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	089b      	lsrs	r3, r3, #2
 8004eac:	3302      	adds	r3, #2
 8004eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	220f      	movs	r2, #15
 8004ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a52      	ldr	r2, [pc, #328]	@ (8005018 <HAL_GPIO_Init+0x314>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d02b      	beq.n	8004f2a <HAL_GPIO_Init+0x226>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a51      	ldr	r2, [pc, #324]	@ (800501c <HAL_GPIO_Init+0x318>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d025      	beq.n	8004f26 <HAL_GPIO_Init+0x222>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a50      	ldr	r2, [pc, #320]	@ (8005020 <HAL_GPIO_Init+0x31c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d01f      	beq.n	8004f22 <HAL_GPIO_Init+0x21e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a4f      	ldr	r2, [pc, #316]	@ (8005024 <HAL_GPIO_Init+0x320>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d019      	beq.n	8004f1e <HAL_GPIO_Init+0x21a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a4e      	ldr	r2, [pc, #312]	@ (8005028 <HAL_GPIO_Init+0x324>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d013      	beq.n	8004f1a <HAL_GPIO_Init+0x216>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a4d      	ldr	r2, [pc, #308]	@ (800502c <HAL_GPIO_Init+0x328>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00d      	beq.n	8004f16 <HAL_GPIO_Init+0x212>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a4c      	ldr	r2, [pc, #304]	@ (8005030 <HAL_GPIO_Init+0x32c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d007      	beq.n	8004f12 <HAL_GPIO_Init+0x20e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a4b      	ldr	r2, [pc, #300]	@ (8005034 <HAL_GPIO_Init+0x330>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d101      	bne.n	8004f0e <HAL_GPIO_Init+0x20a>
 8004f0a:	2307      	movs	r3, #7
 8004f0c:	e00e      	b.n	8004f2c <HAL_GPIO_Init+0x228>
 8004f0e:	2308      	movs	r3, #8
 8004f10:	e00c      	b.n	8004f2c <HAL_GPIO_Init+0x228>
 8004f12:	2306      	movs	r3, #6
 8004f14:	e00a      	b.n	8004f2c <HAL_GPIO_Init+0x228>
 8004f16:	2305      	movs	r3, #5
 8004f18:	e008      	b.n	8004f2c <HAL_GPIO_Init+0x228>
 8004f1a:	2304      	movs	r3, #4
 8004f1c:	e006      	b.n	8004f2c <HAL_GPIO_Init+0x228>
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e004      	b.n	8004f2c <HAL_GPIO_Init+0x228>
 8004f22:	2302      	movs	r3, #2
 8004f24:	e002      	b.n	8004f2c <HAL_GPIO_Init+0x228>
 8004f26:	2301      	movs	r3, #1
 8004f28:	e000      	b.n	8004f2c <HAL_GPIO_Init+0x228>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	69fa      	ldr	r2, [r7, #28]
 8004f2e:	f002 0203 	and.w	r2, r2, #3
 8004f32:	0092      	lsls	r2, r2, #2
 8004f34:	4093      	lsls	r3, r2
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f3c:	4935      	ldr	r1, [pc, #212]	@ (8005014 <HAL_GPIO_Init+0x310>)
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	089b      	lsrs	r3, r3, #2
 8004f42:	3302      	adds	r3, #2
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f4a:	4b3b      	ldr	r3, [pc, #236]	@ (8005038 <HAL_GPIO_Init+0x334>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	43db      	mvns	r3, r3
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	4013      	ands	r3, r2
 8004f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f6e:	4a32      	ldr	r2, [pc, #200]	@ (8005038 <HAL_GPIO_Init+0x334>)
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f74:	4b30      	ldr	r3, [pc, #192]	@ (8005038 <HAL_GPIO_Init+0x334>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	43db      	mvns	r3, r3
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	4013      	ands	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f98:	4a27      	ldr	r2, [pc, #156]	@ (8005038 <HAL_GPIO_Init+0x334>)
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f9e:	4b26      	ldr	r3, [pc, #152]	@ (8005038 <HAL_GPIO_Init+0x334>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	4013      	ands	r3, r2
 8004fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fc2:	4a1d      	ldr	r2, [pc, #116]	@ (8005038 <HAL_GPIO_Init+0x334>)
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8005038 <HAL_GPIO_Init+0x334>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fec:	4a12      	ldr	r2, [pc, #72]	@ (8005038 <HAL_GPIO_Init+0x334>)
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	61fb      	str	r3, [r7, #28]
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	2b0f      	cmp	r3, #15
 8004ffc:	f67f ae90 	bls.w	8004d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005000:	bf00      	nop
 8005002:	bf00      	nop
 8005004:	3724      	adds	r7, #36	@ 0x24
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	40023800 	.word	0x40023800
 8005014:	40013800 	.word	0x40013800
 8005018:	40020000 	.word	0x40020000
 800501c:	40020400 	.word	0x40020400
 8005020:	40020800 	.word	0x40020800
 8005024:	40020c00 	.word	0x40020c00
 8005028:	40021000 	.word	0x40021000
 800502c:	40021400 	.word	0x40021400
 8005030:	40021800 	.word	0x40021800
 8005034:	40021c00 	.word	0x40021c00
 8005038:	40013c00 	.word	0x40013c00

0800503c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	460b      	mov	r3, r1
 8005046:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	887b      	ldrh	r3, [r7, #2]
 800504e:	4013      	ands	r3, r2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005054:	2301      	movs	r3, #1
 8005056:	73fb      	strb	r3, [r7, #15]
 8005058:	e001      	b.n	800505e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800505a:	2300      	movs	r3, #0
 800505c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800505e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	807b      	strh	r3, [r7, #2]
 8005078:	4613      	mov	r3, r2
 800507a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800507c:	787b      	ldrb	r3, [r7, #1]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005082:	887a      	ldrh	r2, [r7, #2]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005088:	e003      	b.n	8005092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800508a:	887b      	ldrh	r3, [r7, #2]
 800508c:	041a      	lsls	r2, r3, #16
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	619a      	str	r2, [r3, #24]
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800509e:	b480      	push	{r7}
 80050a0:	b085      	sub	sp, #20
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	460b      	mov	r3, r1
 80050a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050b0:	887a      	ldrh	r2, [r7, #2]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4013      	ands	r3, r2
 80050b6:	041a      	lsls	r2, r3, #16
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	43d9      	mvns	r1, r3
 80050bc:	887b      	ldrh	r3, [r7, #2]
 80050be:	400b      	ands	r3, r1
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	619a      	str	r2, [r3, #24]
}
 80050c6:	bf00      	nop
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
	...

080050d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80050de:	4b08      	ldr	r3, [pc, #32]	@ (8005100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050e0:	695a      	ldr	r2, [r3, #20]
 80050e2:	88fb      	ldrh	r3, [r7, #6]
 80050e4:	4013      	ands	r3, r2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d006      	beq.n	80050f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050ea:	4a05      	ldr	r2, [pc, #20]	@ (8005100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050ec:	88fb      	ldrh	r3, [r7, #6]
 80050ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050f0:	88fb      	ldrh	r3, [r7, #6]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fc ff2a 	bl	8001f4c <HAL_GPIO_EXTI_Callback>
  }
}
 80050f8:	bf00      	nop
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40013c00 	.word	0x40013c00

08005104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e12b      	b.n	800536e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fb ff8c 	bl	8001048 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2224      	movs	r2, #36	@ 0x24
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0201 	bic.w	r2, r2, #1
 8005146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005168:	f001 fdc6 	bl	8006cf8 <HAL_RCC_GetPCLK1Freq>
 800516c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	4a81      	ldr	r2, [pc, #516]	@ (8005378 <HAL_I2C_Init+0x274>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d807      	bhi.n	8005188 <HAL_I2C_Init+0x84>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4a80      	ldr	r2, [pc, #512]	@ (800537c <HAL_I2C_Init+0x278>)
 800517c:	4293      	cmp	r3, r2
 800517e:	bf94      	ite	ls
 8005180:	2301      	movls	r3, #1
 8005182:	2300      	movhi	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	e006      	b.n	8005196 <HAL_I2C_Init+0x92>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4a7d      	ldr	r2, [pc, #500]	@ (8005380 <HAL_I2C_Init+0x27c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	bf94      	ite	ls
 8005190:	2301      	movls	r3, #1
 8005192:	2300      	movhi	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e0e7      	b.n	800536e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4a78      	ldr	r2, [pc, #480]	@ (8005384 <HAL_I2C_Init+0x280>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	0c9b      	lsrs	r3, r3, #18
 80051a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	4a6a      	ldr	r2, [pc, #424]	@ (8005378 <HAL_I2C_Init+0x274>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d802      	bhi.n	80051d8 <HAL_I2C_Init+0xd4>
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	3301      	adds	r3, #1
 80051d6:	e009      	b.n	80051ec <HAL_I2C_Init+0xe8>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80051de:	fb02 f303 	mul.w	r3, r2, r3
 80051e2:	4a69      	ldr	r2, [pc, #420]	@ (8005388 <HAL_I2C_Init+0x284>)
 80051e4:	fba2 2303 	umull	r2, r3, r2, r3
 80051e8:	099b      	lsrs	r3, r3, #6
 80051ea:	3301      	adds	r3, #1
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6812      	ldr	r2, [r2, #0]
 80051f0:	430b      	orrs	r3, r1
 80051f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80051fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	495c      	ldr	r1, [pc, #368]	@ (8005378 <HAL_I2C_Init+0x274>)
 8005208:	428b      	cmp	r3, r1
 800520a:	d819      	bhi.n	8005240 <HAL_I2C_Init+0x13c>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	1e59      	subs	r1, r3, #1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	fbb1 f3f3 	udiv	r3, r1, r3
 800521a:	1c59      	adds	r1, r3, #1
 800521c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005220:	400b      	ands	r3, r1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <HAL_I2C_Init+0x138>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	1e59      	subs	r1, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	fbb1 f3f3 	udiv	r3, r1, r3
 8005234:	3301      	adds	r3, #1
 8005236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800523a:	e051      	b.n	80052e0 <HAL_I2C_Init+0x1dc>
 800523c:	2304      	movs	r3, #4
 800523e:	e04f      	b.n	80052e0 <HAL_I2C_Init+0x1dc>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d111      	bne.n	800526c <HAL_I2C_Init+0x168>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	1e58      	subs	r0, r3, #1
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6859      	ldr	r1, [r3, #4]
 8005250:	460b      	mov	r3, r1
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	440b      	add	r3, r1
 8005256:	fbb0 f3f3 	udiv	r3, r0, r3
 800525a:	3301      	adds	r3, #1
 800525c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005260:	2b00      	cmp	r3, #0
 8005262:	bf0c      	ite	eq
 8005264:	2301      	moveq	r3, #1
 8005266:	2300      	movne	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	e012      	b.n	8005292 <HAL_I2C_Init+0x18e>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	1e58      	subs	r0, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6859      	ldr	r1, [r3, #4]
 8005274:	460b      	mov	r3, r1
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	440b      	add	r3, r1
 800527a:	0099      	lsls	r1, r3, #2
 800527c:	440b      	add	r3, r1
 800527e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005282:	3301      	adds	r3, #1
 8005284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005288:	2b00      	cmp	r3, #0
 800528a:	bf0c      	ite	eq
 800528c:	2301      	moveq	r3, #1
 800528e:	2300      	movne	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <HAL_I2C_Init+0x196>
 8005296:	2301      	movs	r3, #1
 8005298:	e022      	b.n	80052e0 <HAL_I2C_Init+0x1dc>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10e      	bne.n	80052c0 <HAL_I2C_Init+0x1bc>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1e58      	subs	r0, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6859      	ldr	r1, [r3, #4]
 80052aa:	460b      	mov	r3, r1
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	440b      	add	r3, r1
 80052b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80052b4:	3301      	adds	r3, #1
 80052b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052be:	e00f      	b.n	80052e0 <HAL_I2C_Init+0x1dc>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	1e58      	subs	r0, r3, #1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6859      	ldr	r1, [r3, #4]
 80052c8:	460b      	mov	r3, r1
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	0099      	lsls	r1, r3, #2
 80052d0:	440b      	add	r3, r1
 80052d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80052d6:	3301      	adds	r3, #1
 80052d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	6809      	ldr	r1, [r1, #0]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69da      	ldr	r2, [r3, #28]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800530e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6911      	ldr	r1, [r2, #16]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	68d2      	ldr	r2, [r2, #12]
 800531a:	4311      	orrs	r1, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	430b      	orrs	r3, r1
 8005322:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	695a      	ldr	r2, [r3, #20]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	000186a0 	.word	0x000186a0
 800537c:	001e847f 	.word	0x001e847f
 8005380:	003d08ff 	.word	0x003d08ff
 8005384:	431bde83 	.word	0x431bde83
 8005388:	10624dd3 	.word	0x10624dd3

0800538c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af02      	add	r7, sp, #8
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	607a      	str	r2, [r7, #4]
 8005396:	461a      	mov	r2, r3
 8005398:	460b      	mov	r3, r1
 800539a:	817b      	strh	r3, [r7, #10]
 800539c:	4613      	mov	r3, r2
 800539e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053a0:	f7ff fb6e 	bl	8004a80 <HAL_GetTick>
 80053a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b20      	cmp	r3, #32
 80053b0:	f040 80e0 	bne.w	8005574 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	2319      	movs	r3, #25
 80053ba:	2201      	movs	r2, #1
 80053bc:	4970      	ldr	r1, [pc, #448]	@ (8005580 <HAL_I2C_Master_Transmit+0x1f4>)
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 fdf4 	bl	8005fac <I2C_WaitOnFlagUntilTimeout>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80053ca:	2302      	movs	r3, #2
 80053cc:	e0d3      	b.n	8005576 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d101      	bne.n	80053dc <HAL_I2C_Master_Transmit+0x50>
 80053d8:	2302      	movs	r3, #2
 80053da:	e0cc      	b.n	8005576 <HAL_I2C_Master_Transmit+0x1ea>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d007      	beq.n	8005402 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0201 	orr.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005410:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2221      	movs	r2, #33	@ 0x21
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2210      	movs	r2, #16
 800541e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	893a      	ldrh	r2, [r7, #8]
 8005432:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005438:	b29a      	uxth	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4a50      	ldr	r2, [pc, #320]	@ (8005584 <HAL_I2C_Master_Transmit+0x1f8>)
 8005442:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005444:	8979      	ldrh	r1, [r7, #10]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	6a3a      	ldr	r2, [r7, #32]
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 fbc8 	bl	8005be0 <I2C_MasterRequestWrite>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e08d      	b.n	8005576 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800545a:	2300      	movs	r3, #0
 800545c:	613b      	str	r3, [r7, #16]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	613b      	str	r3, [r7, #16]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	613b      	str	r3, [r7, #16]
 800546e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005470:	e066      	b.n	8005540 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	6a39      	ldr	r1, [r7, #32]
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 feb2 	bl	80061e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00d      	beq.n	800549e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005486:	2b04      	cmp	r3, #4
 8005488:	d107      	bne.n	800549a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005498:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e06b      	b.n	8005576 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a2:	781a      	ldrb	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d11b      	bne.n	8005514 <HAL_I2C_Master_Transmit+0x188>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d017      	beq.n	8005514 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e8:	781a      	ldrb	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800550c:	3b01      	subs	r3, #1
 800550e:	b29a      	uxth	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	6a39      	ldr	r1, [r7, #32]
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 fea9 	bl	8006270 <I2C_WaitOnBTFFlagUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00d      	beq.n	8005540 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005528:	2b04      	cmp	r3, #4
 800552a:	d107      	bne.n	800553c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800553a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e01a      	b.n	8005576 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005544:	2b00      	cmp	r3, #0
 8005546:	d194      	bne.n	8005472 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2220      	movs	r2, #32
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	e000      	b.n	8005576 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005574:	2302      	movs	r3, #2
  }
}
 8005576:	4618      	mov	r0, r3
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	00100002 	.word	0x00100002
 8005584:	ffff0000 	.word	0xffff0000

08005588 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08c      	sub	sp, #48	@ 0x30
 800558c:	af02      	add	r7, sp, #8
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	607a      	str	r2, [r7, #4]
 8005592:	461a      	mov	r2, r3
 8005594:	460b      	mov	r3, r1
 8005596:	817b      	strh	r3, [r7, #10]
 8005598:	4613      	mov	r3, r2
 800559a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800559c:	f7ff fa70 	bl	8004a80 <HAL_GetTick>
 80055a0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b20      	cmp	r3, #32
 80055ac:	f040 8217 	bne.w	80059de <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	2319      	movs	r3, #25
 80055b6:	2201      	movs	r2, #1
 80055b8:	497c      	ldr	r1, [pc, #496]	@ (80057ac <HAL_I2C_Master_Receive+0x224>)
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 fcf6 	bl	8005fac <I2C_WaitOnFlagUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80055c6:	2302      	movs	r3, #2
 80055c8:	e20a      	b.n	80059e0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d101      	bne.n	80055d8 <HAL_I2C_Master_Receive+0x50>
 80055d4:	2302      	movs	r3, #2
 80055d6:	e203      	b.n	80059e0 <HAL_I2C_Master_Receive+0x458>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d007      	beq.n	80055fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f042 0201 	orr.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800560c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2222      	movs	r2, #34	@ 0x22
 8005612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2210      	movs	r2, #16
 800561a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	893a      	ldrh	r2, [r7, #8]
 800562e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005634:	b29a      	uxth	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4a5c      	ldr	r2, [pc, #368]	@ (80057b0 <HAL_I2C_Master_Receive+0x228>)
 800563e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005640:	8979      	ldrh	r1, [r7, #10]
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 fb4c 	bl	8005ce4 <I2C_MasterRequestRead>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e1c4      	b.n	80059e0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800565a:	2b00      	cmp	r3, #0
 800565c:	d113      	bne.n	8005686 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800565e:	2300      	movs	r3, #0
 8005660:	623b      	str	r3, [r7, #32]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	623b      	str	r3, [r7, #32]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	623b      	str	r3, [r7, #32]
 8005672:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	e198      	b.n	80059b8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800568a:	2b01      	cmp	r3, #1
 800568c:	d11b      	bne.n	80056c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800569c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800569e:	2300      	movs	r3, #0
 80056a0:	61fb      	str	r3, [r7, #28]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	61fb      	str	r3, [r7, #28]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	61fb      	str	r3, [r7, #28]
 80056b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	e178      	b.n	80059b8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d11b      	bne.n	8005706 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ee:	2300      	movs	r3, #0
 80056f0:	61bb      	str	r3, [r7, #24]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	61bb      	str	r3, [r7, #24]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	61bb      	str	r3, [r7, #24]
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	e158      	b.n	80059b8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005714:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005716:	2300      	movs	r3, #0
 8005718:	617b      	str	r3, [r7, #20]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800572c:	e144      	b.n	80059b8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005732:	2b03      	cmp	r3, #3
 8005734:	f200 80f1 	bhi.w	800591a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800573c:	2b01      	cmp	r3, #1
 800573e:	d123      	bne.n	8005788 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005742:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 fddb 	bl	8006300 <I2C_WaitOnRXNEFlagUntilTimeout>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e145      	b.n	80059e0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	691a      	ldr	r2, [r3, #16]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005770:	3b01      	subs	r3, #1
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800577c:	b29b      	uxth	r3, r3
 800577e:	3b01      	subs	r3, #1
 8005780:	b29a      	uxth	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005786:	e117      	b.n	80059b8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800578c:	2b02      	cmp	r3, #2
 800578e:	d14e      	bne.n	800582e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005796:	2200      	movs	r2, #0
 8005798:	4906      	ldr	r1, [pc, #24]	@ (80057b4 <HAL_I2C_Master_Receive+0x22c>)
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 fc06 	bl	8005fac <I2C_WaitOnFlagUntilTimeout>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d008      	beq.n	80057b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e11a      	b.n	80059e0 <HAL_I2C_Master_Receive+0x458>
 80057aa:	bf00      	nop
 80057ac:	00100002 	.word	0x00100002
 80057b0:	ffff0000 	.word	0xffff0000
 80057b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691a      	ldr	r2, [r3, #16]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d2:	b2d2      	uxtb	r2, r2
 80057d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057e4:	3b01      	subs	r3, #1
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	691a      	ldr	r2, [r3, #16]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005816:	3b01      	subs	r3, #1
 8005818:	b29a      	uxth	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005822:	b29b      	uxth	r3, r3
 8005824:	3b01      	subs	r3, #1
 8005826:	b29a      	uxth	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800582c:	e0c4      	b.n	80059b8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800582e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005834:	2200      	movs	r2, #0
 8005836:	496c      	ldr	r1, [pc, #432]	@ (80059e8 <HAL_I2C_Master_Receive+0x460>)
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 fbb7 	bl	8005fac <I2C_WaitOnFlagUntilTimeout>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e0cb      	b.n	80059e0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005856:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691a      	ldr	r2, [r3, #16]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005874:	3b01      	subs	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005880:	b29b      	uxth	r3, r3
 8005882:	3b01      	subs	r3, #1
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800588a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005890:	2200      	movs	r2, #0
 8005892:	4955      	ldr	r1, [pc, #340]	@ (80059e8 <HAL_I2C_Master_Receive+0x460>)
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 fb89 	bl	8005fac <I2C_WaitOnFlagUntilTimeout>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e09d      	b.n	80059e0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691a      	ldr	r2, [r3, #16]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058d0:	3b01      	subs	r3, #1
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058dc:	b29b      	uxth	r3, r3
 80058de:	3b01      	subs	r3, #1
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	691a      	ldr	r2, [r3, #16]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f0:	b2d2      	uxtb	r2, r2
 80058f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005902:	3b01      	subs	r3, #1
 8005904:	b29a      	uxth	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800590e:	b29b      	uxth	r3, r3
 8005910:	3b01      	subs	r3, #1
 8005912:	b29a      	uxth	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005918:	e04e      	b.n	80059b8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800591a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800591c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f000 fcee 	bl	8006300 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e058      	b.n	80059e0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	691a      	ldr	r2, [r3, #16]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005938:	b2d2      	uxtb	r2, r2
 800593a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800594a:	3b01      	subs	r3, #1
 800594c:	b29a      	uxth	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005956:	b29b      	uxth	r3, r3
 8005958:	3b01      	subs	r3, #1
 800595a:	b29a      	uxth	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	f003 0304 	and.w	r3, r3, #4
 800596a:	2b04      	cmp	r3, #4
 800596c:	d124      	bne.n	80059b8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005972:	2b03      	cmp	r3, #3
 8005974:	d107      	bne.n	8005986 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005984:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005990:	b2d2      	uxtb	r2, r2
 8005992:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059a2:	3b01      	subs	r3, #1
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f47f aeb6 	bne.w	800572e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2220      	movs	r2, #32
 80059c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80059da:	2300      	movs	r3, #0
 80059dc:	e000      	b.n	80059e0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80059de:	2302      	movs	r3, #2
  }
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3728      	adds	r7, #40	@ 0x28
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	00010004 	.word	0x00010004

080059ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	4608      	mov	r0, r1
 80059f6:	4611      	mov	r1, r2
 80059f8:	461a      	mov	r2, r3
 80059fa:	4603      	mov	r3, r0
 80059fc:	817b      	strh	r3, [r7, #10]
 80059fe:	460b      	mov	r3, r1
 8005a00:	813b      	strh	r3, [r7, #8]
 8005a02:	4613      	mov	r3, r2
 8005a04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a06:	f7ff f83b 	bl	8004a80 <HAL_GetTick>
 8005a0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b20      	cmp	r3, #32
 8005a16:	f040 80d9 	bne.w	8005bcc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	2319      	movs	r3, #25
 8005a20:	2201      	movs	r2, #1
 8005a22:	496d      	ldr	r1, [pc, #436]	@ (8005bd8 <HAL_I2C_Mem_Write+0x1ec>)
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f000 fac1 	bl	8005fac <I2C_WaitOnFlagUntilTimeout>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d001      	beq.n	8005a34 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005a30:	2302      	movs	r3, #2
 8005a32:	e0cc      	b.n	8005bce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d101      	bne.n	8005a42 <HAL_I2C_Mem_Write+0x56>
 8005a3e:	2302      	movs	r3, #2
 8005a40:	e0c5      	b.n	8005bce <HAL_I2C_Mem_Write+0x1e2>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d007      	beq.n	8005a68 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0201 	orr.w	r2, r2, #1
 8005a66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2221      	movs	r2, #33	@ 0x21
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2240      	movs	r2, #64	@ 0x40
 8005a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6a3a      	ldr	r2, [r7, #32]
 8005a92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005a98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4a4d      	ldr	r2, [pc, #308]	@ (8005bdc <HAL_I2C_Mem_Write+0x1f0>)
 8005aa8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005aaa:	88f8      	ldrh	r0, [r7, #6]
 8005aac:	893a      	ldrh	r2, [r7, #8]
 8005aae:	8979      	ldrh	r1, [r7, #10]
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	9301      	str	r3, [sp, #4]
 8005ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	4603      	mov	r3, r0
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 f9e0 	bl	8005e80 <I2C_RequestMemoryWrite>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d052      	beq.n	8005b6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e081      	b.n	8005bce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 fb86 	bl	80061e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00d      	beq.n	8005af6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	d107      	bne.n	8005af2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005af0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e06b      	b.n	8005bce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afa:	781a      	ldrb	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	2b04      	cmp	r3, #4
 8005b32:	d11b      	bne.n	8005b6c <HAL_I2C_Mem_Write+0x180>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d017      	beq.n	8005b6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b40:	781a      	ldrb	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	3b01      	subs	r3, #1
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1aa      	bne.n	8005aca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 fb79 	bl	8006270 <I2C_WaitOnBTFFlagUntilTimeout>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00d      	beq.n	8005ba0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d107      	bne.n	8005b9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e016      	b.n	8005bce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	e000      	b.n	8005bce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005bcc:	2302      	movs	r3, #2
  }
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3718      	adds	r7, #24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	00100002 	.word	0x00100002
 8005bdc:	ffff0000 	.word	0xffff0000

08005be0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b088      	sub	sp, #32
 8005be4:	af02      	add	r7, sp, #8
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	607a      	str	r2, [r7, #4]
 8005bea:	603b      	str	r3, [r7, #0]
 8005bec:	460b      	mov	r3, r1
 8005bee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	d006      	beq.n	8005c0a <I2C_MasterRequestWrite+0x2a>
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d003      	beq.n	8005c0a <I2C_MasterRequestWrite+0x2a>
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005c08:	d108      	bne.n	8005c1c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	e00b      	b.n	8005c34 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c20:	2b12      	cmp	r3, #18
 8005c22:	d107      	bne.n	8005c34 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 f9b3 	bl	8005fac <I2C_WaitOnFlagUntilTimeout>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00d      	beq.n	8005c68 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c5a:	d103      	bne.n	8005c64 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e035      	b.n	8005cd4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c70:	d108      	bne.n	8005c84 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c72:	897b      	ldrh	r3, [r7, #10]
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	461a      	mov	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005c80:	611a      	str	r2, [r3, #16]
 8005c82:	e01b      	b.n	8005cbc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c84:	897b      	ldrh	r3, [r7, #10]
 8005c86:	11db      	asrs	r3, r3, #7
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	f003 0306 	and.w	r3, r3, #6
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	f063 030f 	orn	r3, r3, #15
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	490e      	ldr	r1, [pc, #56]	@ (8005cdc <I2C_MasterRequestWrite+0xfc>)
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 f9fc 	bl	80060a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e010      	b.n	8005cd4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005cb2:	897b      	ldrh	r3, [r7, #10]
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	4907      	ldr	r1, [pc, #28]	@ (8005ce0 <I2C_MasterRequestWrite+0x100>)
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 f9ec 	bl	80060a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e000      	b.n	8005cd4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3718      	adds	r7, #24
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	00010008 	.word	0x00010008
 8005ce0:	00010002 	.word	0x00010002

08005ce4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b088      	sub	sp, #32
 8005ce8:	af02      	add	r7, sp, #8
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	607a      	str	r2, [r7, #4]
 8005cee:	603b      	str	r3, [r7, #0]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d08:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2b08      	cmp	r3, #8
 8005d0e:	d006      	beq.n	8005d1e <I2C_MasterRequestRead+0x3a>
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d003      	beq.n	8005d1e <I2C_MasterRequestRead+0x3a>
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d1c:	d108      	bne.n	8005d30 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	e00b      	b.n	8005d48 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d34:	2b11      	cmp	r3, #17
 8005d36:	d107      	bne.n	8005d48 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 f929 	bl	8005fac <I2C_WaitOnFlagUntilTimeout>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00d      	beq.n	8005d7c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d6e:	d103      	bne.n	8005d78 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e079      	b.n	8005e70 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d84:	d108      	bne.n	8005d98 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d86:	897b      	ldrh	r3, [r7, #10]
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	f043 0301 	orr.w	r3, r3, #1
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	611a      	str	r2, [r3, #16]
 8005d96:	e05f      	b.n	8005e58 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d98:	897b      	ldrh	r3, [r7, #10]
 8005d9a:	11db      	asrs	r3, r3, #7
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	f003 0306 	and.w	r3, r3, #6
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	f063 030f 	orn	r3, r3, #15
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	4930      	ldr	r1, [pc, #192]	@ (8005e78 <I2C_MasterRequestRead+0x194>)
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 f972 	bl	80060a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e054      	b.n	8005e70 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005dc6:	897b      	ldrh	r3, [r7, #10]
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	4929      	ldr	r1, [pc, #164]	@ (8005e7c <I2C_MasterRequestRead+0x198>)
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 f962 	bl	80060a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e044      	b.n	8005e70 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005de6:	2300      	movs	r3, #0
 8005de8:	613b      	str	r3, [r7, #16]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	613b      	str	r3, [r7, #16]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e0a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 f8c7 	bl	8005fac <I2C_WaitOnFlagUntilTimeout>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00d      	beq.n	8005e40 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e32:	d103      	bne.n	8005e3c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e3a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e017      	b.n	8005e70 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005e40:	897b      	ldrh	r3, [r7, #10]
 8005e42:	11db      	asrs	r3, r3, #7
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	f003 0306 	and.w	r3, r3, #6
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	f063 030e 	orn	r3, r3, #14
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	4907      	ldr	r1, [pc, #28]	@ (8005e7c <I2C_MasterRequestRead+0x198>)
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 f91e 	bl	80060a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e000      	b.n	8005e70 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3718      	adds	r7, #24
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	00010008 	.word	0x00010008
 8005e7c:	00010002 	.word	0x00010002

08005e80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b088      	sub	sp, #32
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	4608      	mov	r0, r1
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	4603      	mov	r3, r0
 8005e90:	817b      	strh	r3, [r7, #10]
 8005e92:	460b      	mov	r3, r1
 8005e94:	813b      	strh	r3, [r7, #8]
 8005e96:	4613      	mov	r3, r2
 8005e98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ea8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 f878 	bl	8005fac <I2C_WaitOnFlagUntilTimeout>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00d      	beq.n	8005ede <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ed0:	d103      	bne.n	8005eda <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ed8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e05f      	b.n	8005f9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ede:	897b      	ldrh	r3, [r7, #10]
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005eec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef0:	6a3a      	ldr	r2, [r7, #32]
 8005ef2:	492d      	ldr	r1, [pc, #180]	@ (8005fa8 <I2C_RequestMemoryWrite+0x128>)
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f8d3 	bl	80060a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e04c      	b.n	8005f9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f04:	2300      	movs	r3, #0
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f1c:	6a39      	ldr	r1, [r7, #32]
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 f95e 	bl	80061e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00d      	beq.n	8005f46 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	d107      	bne.n	8005f42 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e02b      	b.n	8005f9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f46:	88fb      	ldrh	r3, [r7, #6]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d105      	bne.n	8005f58 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f4c:	893b      	ldrh	r3, [r7, #8]
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	611a      	str	r2, [r3, #16]
 8005f56:	e021      	b.n	8005f9c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f58:	893b      	ldrh	r3, [r7, #8]
 8005f5a:	0a1b      	lsrs	r3, r3, #8
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f68:	6a39      	ldr	r1, [r7, #32]
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 f938 	bl	80061e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00d      	beq.n	8005f92 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	d107      	bne.n	8005f8e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e005      	b.n	8005f9e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f92:	893b      	ldrh	r3, [r7, #8]
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	00010002 	.word	0x00010002

08005fac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	603b      	str	r3, [r7, #0]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fbc:	e048      	b.n	8006050 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc4:	d044      	beq.n	8006050 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fc6:	f7fe fd5b 	bl	8004a80 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d302      	bcc.n	8005fdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d139      	bne.n	8006050 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	0c1b      	lsrs	r3, r3, #16
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d10d      	bne.n	8006002 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	43da      	mvns	r2, r3
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	bf0c      	ite	eq
 8005ff8:	2301      	moveq	r3, #1
 8005ffa:	2300      	movne	r3, #0
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	461a      	mov	r2, r3
 8006000:	e00c      	b.n	800601c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	43da      	mvns	r2, r3
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	4013      	ands	r3, r2
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	bf0c      	ite	eq
 8006014:	2301      	moveq	r3, #1
 8006016:	2300      	movne	r3, #0
 8006018:	b2db      	uxtb	r3, r3
 800601a:	461a      	mov	r2, r3
 800601c:	79fb      	ldrb	r3, [r7, #7]
 800601e:	429a      	cmp	r2, r3
 8006020:	d116      	bne.n	8006050 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603c:	f043 0220 	orr.w	r2, r3, #32
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e023      	b.n	8006098 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	0c1b      	lsrs	r3, r3, #16
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b01      	cmp	r3, #1
 8006058:	d10d      	bne.n	8006076 <I2C_WaitOnFlagUntilTimeout+0xca>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	43da      	mvns	r2, r3
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	4013      	ands	r3, r2
 8006066:	b29b      	uxth	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	bf0c      	ite	eq
 800606c:	2301      	moveq	r3, #1
 800606e:	2300      	movne	r3, #0
 8006070:	b2db      	uxtb	r3, r3
 8006072:	461a      	mov	r2, r3
 8006074:	e00c      	b.n	8006090 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	43da      	mvns	r2, r3
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	4013      	ands	r3, r2
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	bf0c      	ite	eq
 8006088:	2301      	moveq	r3, #1
 800608a:	2300      	movne	r3, #0
 800608c:	b2db      	uxtb	r3, r3
 800608e:	461a      	mov	r2, r3
 8006090:	79fb      	ldrb	r3, [r7, #7]
 8006092:	429a      	cmp	r2, r3
 8006094:	d093      	beq.n	8005fbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060ae:	e071      	b.n	8006194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060be:	d123      	bne.n	8006108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80060d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f4:	f043 0204 	orr.w	r2, r3, #4
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e067      	b.n	80061d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610e:	d041      	beq.n	8006194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006110:	f7fe fcb6 	bl	8004a80 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	429a      	cmp	r2, r3
 800611e:	d302      	bcc.n	8006126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d136      	bne.n	8006194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	0c1b      	lsrs	r3, r3, #16
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b01      	cmp	r3, #1
 800612e:	d10c      	bne.n	800614a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	43da      	mvns	r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4013      	ands	r3, r2
 800613c:	b29b      	uxth	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	bf14      	ite	ne
 8006142:	2301      	movne	r3, #1
 8006144:	2300      	moveq	r3, #0
 8006146:	b2db      	uxtb	r3, r3
 8006148:	e00b      	b.n	8006162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	43da      	mvns	r2, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	4013      	ands	r3, r2
 8006156:	b29b      	uxth	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	bf14      	ite	ne
 800615c:	2301      	movne	r3, #1
 800615e:	2300      	moveq	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d016      	beq.n	8006194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2220      	movs	r2, #32
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006180:	f043 0220 	orr.w	r2, r3, #32
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e021      	b.n	80061d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	0c1b      	lsrs	r3, r3, #16
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b01      	cmp	r3, #1
 800619c:	d10c      	bne.n	80061b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	43da      	mvns	r2, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	4013      	ands	r3, r2
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	bf14      	ite	ne
 80061b0:	2301      	movne	r3, #1
 80061b2:	2300      	moveq	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	e00b      	b.n	80061d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	43da      	mvns	r2, r3
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	4013      	ands	r3, r2
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	bf14      	ite	ne
 80061ca:	2301      	movne	r3, #1
 80061cc:	2300      	moveq	r3, #0
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f47f af6d 	bne.w	80060b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061ec:	e034      	b.n	8006258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 f8e3 	bl	80063ba <I2C_IsAcknowledgeFailed>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e034      	b.n	8006268 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006204:	d028      	beq.n	8006258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006206:	f7fe fc3b 	bl	8004a80 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	429a      	cmp	r2, r3
 8006214:	d302      	bcc.n	800621c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d11d      	bne.n	8006258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006226:	2b80      	cmp	r3, #128	@ 0x80
 8006228:	d016      	beq.n	8006258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2220      	movs	r2, #32
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006244:	f043 0220 	orr.w	r2, r3, #32
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e007      	b.n	8006268 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006262:	2b80      	cmp	r3, #128	@ 0x80
 8006264:	d1c3      	bne.n	80061ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800627c:	e034      	b.n	80062e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 f89b 	bl	80063ba <I2C_IsAcknowledgeFailed>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e034      	b.n	80062f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006294:	d028      	beq.n	80062e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006296:	f7fe fbf3 	bl	8004a80 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d302      	bcc.n	80062ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d11d      	bne.n	80062e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	f003 0304 	and.w	r3, r3, #4
 80062b6:	2b04      	cmp	r3, #4
 80062b8:	d016      	beq.n	80062e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d4:	f043 0220 	orr.w	r2, r3, #32
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e007      	b.n	80062f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	2b04      	cmp	r3, #4
 80062f4:	d1c3      	bne.n	800627e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800630c:	e049      	b.n	80063a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	f003 0310 	and.w	r3, r3, #16
 8006318:	2b10      	cmp	r3, #16
 800631a:	d119      	bne.n	8006350 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f06f 0210 	mvn.w	r2, #16
 8006324:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2220      	movs	r2, #32
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e030      	b.n	80063b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006350:	f7fe fb96 	bl	8004a80 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	429a      	cmp	r2, r3
 800635e:	d302      	bcc.n	8006366 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d11d      	bne.n	80063a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006370:	2b40      	cmp	r3, #64	@ 0x40
 8006372:	d016      	beq.n	80063a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2220      	movs	r2, #32
 800637e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800638e:	f043 0220 	orr.w	r2, r3, #32
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e007      	b.n	80063b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ac:	2b40      	cmp	r3, #64	@ 0x40
 80063ae:	d1ae      	bne.n	800630e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b083      	sub	sp, #12
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063d0:	d11b      	bne.n	800640a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80063da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2220      	movs	r2, #32
 80063e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f6:	f043 0204 	orr.w	r2, r3, #4
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e000      	b.n	800640c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e267      	b.n	80068fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b00      	cmp	r3, #0
 8006434:	d075      	beq.n	8006522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006436:	4b88      	ldr	r3, [pc, #544]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f003 030c 	and.w	r3, r3, #12
 800643e:	2b04      	cmp	r3, #4
 8006440:	d00c      	beq.n	800645c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006442:	4b85      	ldr	r3, [pc, #532]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800644a:	2b08      	cmp	r3, #8
 800644c:	d112      	bne.n	8006474 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800644e:	4b82      	ldr	r3, [pc, #520]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006456:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800645a:	d10b      	bne.n	8006474 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800645c:	4b7e      	ldr	r3, [pc, #504]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d05b      	beq.n	8006520 <HAL_RCC_OscConfig+0x108>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d157      	bne.n	8006520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e242      	b.n	80068fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800647c:	d106      	bne.n	800648c <HAL_RCC_OscConfig+0x74>
 800647e:	4b76      	ldr	r3, [pc, #472]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a75      	ldr	r2, [pc, #468]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 8006484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006488:	6013      	str	r3, [r2, #0]
 800648a:	e01d      	b.n	80064c8 <HAL_RCC_OscConfig+0xb0>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006494:	d10c      	bne.n	80064b0 <HAL_RCC_OscConfig+0x98>
 8006496:	4b70      	ldr	r3, [pc, #448]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a6f      	ldr	r2, [pc, #444]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 800649c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	4b6d      	ldr	r3, [pc, #436]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a6c      	ldr	r2, [pc, #432]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 80064a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064ac:	6013      	str	r3, [r2, #0]
 80064ae:	e00b      	b.n	80064c8 <HAL_RCC_OscConfig+0xb0>
 80064b0:	4b69      	ldr	r3, [pc, #420]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a68      	ldr	r2, [pc, #416]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 80064b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	4b66      	ldr	r3, [pc, #408]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a65      	ldr	r2, [pc, #404]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 80064c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d013      	beq.n	80064f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064d0:	f7fe fad6 	bl	8004a80 <HAL_GetTick>
 80064d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064d6:	e008      	b.n	80064ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064d8:	f7fe fad2 	bl	8004a80 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b64      	cmp	r3, #100	@ 0x64
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e207      	b.n	80068fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ea:	4b5b      	ldr	r3, [pc, #364]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d0f0      	beq.n	80064d8 <HAL_RCC_OscConfig+0xc0>
 80064f6:	e014      	b.n	8006522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f8:	f7fe fac2 	bl	8004a80 <HAL_GetTick>
 80064fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064fe:	e008      	b.n	8006512 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006500:	f7fe fabe 	bl	8004a80 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b64      	cmp	r3, #100	@ 0x64
 800650c:	d901      	bls.n	8006512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e1f3      	b.n	80068fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006512:	4b51      	ldr	r3, [pc, #324]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1f0      	bne.n	8006500 <HAL_RCC_OscConfig+0xe8>
 800651e:	e000      	b.n	8006522 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d063      	beq.n	80065f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800652e:	4b4a      	ldr	r3, [pc, #296]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f003 030c 	and.w	r3, r3, #12
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00b      	beq.n	8006552 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800653a:	4b47      	ldr	r3, [pc, #284]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006542:	2b08      	cmp	r3, #8
 8006544:	d11c      	bne.n	8006580 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006546:	4b44      	ldr	r3, [pc, #272]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d116      	bne.n	8006580 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006552:	4b41      	ldr	r3, [pc, #260]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d005      	beq.n	800656a <HAL_RCC_OscConfig+0x152>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d001      	beq.n	800656a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e1c7      	b.n	80068fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800656a:	4b3b      	ldr	r3, [pc, #236]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	4937      	ldr	r1, [pc, #220]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 800657a:	4313      	orrs	r3, r2
 800657c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800657e:	e03a      	b.n	80065f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d020      	beq.n	80065ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006588:	4b34      	ldr	r3, [pc, #208]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 800658a:	2201      	movs	r2, #1
 800658c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658e:	f7fe fa77 	bl	8004a80 <HAL_GetTick>
 8006592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006594:	e008      	b.n	80065a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006596:	f7fe fa73 	bl	8004a80 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d901      	bls.n	80065a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e1a8      	b.n	80068fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0f0      	beq.n	8006596 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065b4:	4b28      	ldr	r3, [pc, #160]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	4925      	ldr	r1, [pc, #148]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	600b      	str	r3, [r1, #0]
 80065c8:	e015      	b.n	80065f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065ca:	4b24      	ldr	r3, [pc, #144]	@ (800665c <HAL_RCC_OscConfig+0x244>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d0:	f7fe fa56 	bl	8004a80 <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065d8:	f7fe fa52 	bl	8004a80 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e187      	b.n	80068fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1f0      	bne.n	80065d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0308 	and.w	r3, r3, #8
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d036      	beq.n	8006670 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d016      	beq.n	8006638 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800660a:	4b15      	ldr	r3, [pc, #84]	@ (8006660 <HAL_RCC_OscConfig+0x248>)
 800660c:	2201      	movs	r2, #1
 800660e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006610:	f7fe fa36 	bl	8004a80 <HAL_GetTick>
 8006614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006616:	e008      	b.n	800662a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006618:	f7fe fa32 	bl	8004a80 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d901      	bls.n	800662a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e167      	b.n	80068fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800662a:	4b0b      	ldr	r3, [pc, #44]	@ (8006658 <HAL_RCC_OscConfig+0x240>)
 800662c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0f0      	beq.n	8006618 <HAL_RCC_OscConfig+0x200>
 8006636:	e01b      	b.n	8006670 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006638:	4b09      	ldr	r3, [pc, #36]	@ (8006660 <HAL_RCC_OscConfig+0x248>)
 800663a:	2200      	movs	r2, #0
 800663c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800663e:	f7fe fa1f 	bl	8004a80 <HAL_GetTick>
 8006642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006644:	e00e      	b.n	8006664 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006646:	f7fe fa1b 	bl	8004a80 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d907      	bls.n	8006664 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e150      	b.n	80068fa <HAL_RCC_OscConfig+0x4e2>
 8006658:	40023800 	.word	0x40023800
 800665c:	42470000 	.word	0x42470000
 8006660:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006664:	4b88      	ldr	r3, [pc, #544]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 8006666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1ea      	bne.n	8006646 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 8097 	beq.w	80067ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800667e:	2300      	movs	r3, #0
 8006680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006682:	4b81      	ldr	r3, [pc, #516]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 8006684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10f      	bne.n	80066ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800668e:	2300      	movs	r3, #0
 8006690:	60bb      	str	r3, [r7, #8]
 8006692:	4b7d      	ldr	r3, [pc, #500]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 8006694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006696:	4a7c      	ldr	r2, [pc, #496]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 8006698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800669c:	6413      	str	r3, [r2, #64]	@ 0x40
 800669e:	4b7a      	ldr	r3, [pc, #488]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 80066a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066a6:	60bb      	str	r3, [r7, #8]
 80066a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066aa:	2301      	movs	r3, #1
 80066ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ae:	4b77      	ldr	r3, [pc, #476]	@ (800688c <HAL_RCC_OscConfig+0x474>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d118      	bne.n	80066ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066ba:	4b74      	ldr	r3, [pc, #464]	@ (800688c <HAL_RCC_OscConfig+0x474>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a73      	ldr	r2, [pc, #460]	@ (800688c <HAL_RCC_OscConfig+0x474>)
 80066c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066c6:	f7fe f9db 	bl	8004a80 <HAL_GetTick>
 80066ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066cc:	e008      	b.n	80066e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066ce:	f7fe f9d7 	bl	8004a80 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d901      	bls.n	80066e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e10c      	b.n	80068fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066e0:	4b6a      	ldr	r3, [pc, #424]	@ (800688c <HAL_RCC_OscConfig+0x474>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d0f0      	beq.n	80066ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d106      	bne.n	8006702 <HAL_RCC_OscConfig+0x2ea>
 80066f4:	4b64      	ldr	r3, [pc, #400]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 80066f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066f8:	4a63      	ldr	r2, [pc, #396]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 80066fa:	f043 0301 	orr.w	r3, r3, #1
 80066fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006700:	e01c      	b.n	800673c <HAL_RCC_OscConfig+0x324>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	2b05      	cmp	r3, #5
 8006708:	d10c      	bne.n	8006724 <HAL_RCC_OscConfig+0x30c>
 800670a:	4b5f      	ldr	r3, [pc, #380]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 800670c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800670e:	4a5e      	ldr	r2, [pc, #376]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 8006710:	f043 0304 	orr.w	r3, r3, #4
 8006714:	6713      	str	r3, [r2, #112]	@ 0x70
 8006716:	4b5c      	ldr	r3, [pc, #368]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 8006718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800671a:	4a5b      	ldr	r2, [pc, #364]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 800671c:	f043 0301 	orr.w	r3, r3, #1
 8006720:	6713      	str	r3, [r2, #112]	@ 0x70
 8006722:	e00b      	b.n	800673c <HAL_RCC_OscConfig+0x324>
 8006724:	4b58      	ldr	r3, [pc, #352]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 8006726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006728:	4a57      	ldr	r2, [pc, #348]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 800672a:	f023 0301 	bic.w	r3, r3, #1
 800672e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006730:	4b55      	ldr	r3, [pc, #340]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 8006732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006734:	4a54      	ldr	r2, [pc, #336]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 8006736:	f023 0304 	bic.w	r3, r3, #4
 800673a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d015      	beq.n	8006770 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006744:	f7fe f99c 	bl	8004a80 <HAL_GetTick>
 8006748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800674a:	e00a      	b.n	8006762 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800674c:	f7fe f998 	bl	8004a80 <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800675a:	4293      	cmp	r3, r2
 800675c:	d901      	bls.n	8006762 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e0cb      	b.n	80068fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006762:	4b49      	ldr	r3, [pc, #292]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 8006764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0ee      	beq.n	800674c <HAL_RCC_OscConfig+0x334>
 800676e:	e014      	b.n	800679a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006770:	f7fe f986 	bl	8004a80 <HAL_GetTick>
 8006774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006776:	e00a      	b.n	800678e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006778:	f7fe f982 	bl	8004a80 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006786:	4293      	cmp	r3, r2
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e0b5      	b.n	80068fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800678e:	4b3e      	ldr	r3, [pc, #248]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 8006790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1ee      	bne.n	8006778 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800679a:	7dfb      	ldrb	r3, [r7, #23]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d105      	bne.n	80067ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067a0:	4b39      	ldr	r3, [pc, #228]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 80067a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a4:	4a38      	ldr	r2, [pc, #224]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 80067a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 80a1 	beq.w	80068f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067b6:	4b34      	ldr	r3, [pc, #208]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f003 030c 	and.w	r3, r3, #12
 80067be:	2b08      	cmp	r3, #8
 80067c0:	d05c      	beq.n	800687c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d141      	bne.n	800684e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ca:	4b31      	ldr	r3, [pc, #196]	@ (8006890 <HAL_RCC_OscConfig+0x478>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067d0:	f7fe f956 	bl	8004a80 <HAL_GetTick>
 80067d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067d6:	e008      	b.n	80067ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067d8:	f7fe f952 	bl	8004a80 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d901      	bls.n	80067ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e087      	b.n	80068fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ea:	4b27      	ldr	r3, [pc, #156]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1f0      	bne.n	80067d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	69da      	ldr	r2, [r3, #28]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	431a      	orrs	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006804:	019b      	lsls	r3, r3, #6
 8006806:	431a      	orrs	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680c:	085b      	lsrs	r3, r3, #1
 800680e:	3b01      	subs	r3, #1
 8006810:	041b      	lsls	r3, r3, #16
 8006812:	431a      	orrs	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006818:	061b      	lsls	r3, r3, #24
 800681a:	491b      	ldr	r1, [pc, #108]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 800681c:	4313      	orrs	r3, r2
 800681e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006820:	4b1b      	ldr	r3, [pc, #108]	@ (8006890 <HAL_RCC_OscConfig+0x478>)
 8006822:	2201      	movs	r2, #1
 8006824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006826:	f7fe f92b 	bl	8004a80 <HAL_GetTick>
 800682a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800682c:	e008      	b.n	8006840 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800682e:	f7fe f927 	bl	8004a80 <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	2b02      	cmp	r3, #2
 800683a:	d901      	bls.n	8006840 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e05c      	b.n	80068fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006840:	4b11      	ldr	r3, [pc, #68]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d0f0      	beq.n	800682e <HAL_RCC_OscConfig+0x416>
 800684c:	e054      	b.n	80068f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800684e:	4b10      	ldr	r3, [pc, #64]	@ (8006890 <HAL_RCC_OscConfig+0x478>)
 8006850:	2200      	movs	r2, #0
 8006852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006854:	f7fe f914 	bl	8004a80 <HAL_GetTick>
 8006858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800685a:	e008      	b.n	800686e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800685c:	f7fe f910 	bl	8004a80 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b02      	cmp	r3, #2
 8006868:	d901      	bls.n	800686e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e045      	b.n	80068fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800686e:	4b06      	ldr	r3, [pc, #24]	@ (8006888 <HAL_RCC_OscConfig+0x470>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1f0      	bne.n	800685c <HAL_RCC_OscConfig+0x444>
 800687a:	e03d      	b.n	80068f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d107      	bne.n	8006894 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e038      	b.n	80068fa <HAL_RCC_OscConfig+0x4e2>
 8006888:	40023800 	.word	0x40023800
 800688c:	40007000 	.word	0x40007000
 8006890:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006894:	4b1b      	ldr	r3, [pc, #108]	@ (8006904 <HAL_RCC_OscConfig+0x4ec>)
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d028      	beq.n	80068f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d121      	bne.n	80068f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d11a      	bne.n	80068f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80068c4:	4013      	ands	r3, r2
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80068ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d111      	bne.n	80068f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068da:	085b      	lsrs	r3, r3, #1
 80068dc:	3b01      	subs	r3, #1
 80068de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d107      	bne.n	80068f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d001      	beq.n	80068f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e000      	b.n	80068fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3718      	adds	r7, #24
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	40023800 	.word	0x40023800

08006908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d101      	bne.n	800691c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e0cc      	b.n	8006ab6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800691c:	4b68      	ldr	r3, [pc, #416]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0307 	and.w	r3, r3, #7
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	429a      	cmp	r2, r3
 8006928:	d90c      	bls.n	8006944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800692a:	4b65      	ldr	r3, [pc, #404]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	b2d2      	uxtb	r2, r2
 8006930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006932:	4b63      	ldr	r3, [pc, #396]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	429a      	cmp	r2, r3
 800693e:	d001      	beq.n	8006944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e0b8      	b.n	8006ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d020      	beq.n	8006992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	2b00      	cmp	r3, #0
 800695a:	d005      	beq.n	8006968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800695c:	4b59      	ldr	r3, [pc, #356]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	4a58      	ldr	r2, [pc, #352]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8006962:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006966:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0308 	and.w	r3, r3, #8
 8006970:	2b00      	cmp	r3, #0
 8006972:	d005      	beq.n	8006980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006974:	4b53      	ldr	r3, [pc, #332]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	4a52      	ldr	r2, [pc, #328]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800697a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800697e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006980:	4b50      	ldr	r3, [pc, #320]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	494d      	ldr	r1, [pc, #308]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800698e:	4313      	orrs	r3, r2
 8006990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d044      	beq.n	8006a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d107      	bne.n	80069b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069a6:	4b47      	ldr	r3, [pc, #284]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d119      	bne.n	80069e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e07f      	b.n	8006ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d003      	beq.n	80069c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069c2:	2b03      	cmp	r3, #3
 80069c4:	d107      	bne.n	80069d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069c6:	4b3f      	ldr	r3, [pc, #252]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d109      	bne.n	80069e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e06f      	b.n	8006ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069d6:	4b3b      	ldr	r3, [pc, #236]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e067      	b.n	8006ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069e6:	4b37      	ldr	r3, [pc, #220]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f023 0203 	bic.w	r2, r3, #3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	4934      	ldr	r1, [pc, #208]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80069f4:	4313      	orrs	r3, r2
 80069f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069f8:	f7fe f842 	bl	8004a80 <HAL_GetTick>
 80069fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069fe:	e00a      	b.n	8006a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a00:	f7fe f83e 	bl	8004a80 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d901      	bls.n	8006a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e04f      	b.n	8006ab6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a16:	4b2b      	ldr	r3, [pc, #172]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f003 020c 	and.w	r2, r3, #12
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d1eb      	bne.n	8006a00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a28:	4b25      	ldr	r3, [pc, #148]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0307 	and.w	r3, r3, #7
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d20c      	bcs.n	8006a50 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a36:	4b22      	ldr	r3, [pc, #136]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	b2d2      	uxtb	r2, r2
 8006a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a3e:	4b20      	ldr	r3, [pc, #128]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0307 	and.w	r3, r3, #7
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d001      	beq.n	8006a50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e032      	b.n	8006ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d008      	beq.n	8006a6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a5c:	4b19      	ldr	r3, [pc, #100]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	4916      	ldr	r1, [pc, #88]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0308 	and.w	r3, r3, #8
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d009      	beq.n	8006a8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a7a:	4b12      	ldr	r3, [pc, #72]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	490e      	ldr	r1, [pc, #56]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a8e:	f000 f821 	bl	8006ad4 <HAL_RCC_GetSysClockFreq>
 8006a92:	4602      	mov	r2, r0
 8006a94:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	091b      	lsrs	r3, r3, #4
 8006a9a:	f003 030f 	and.w	r3, r3, #15
 8006a9e:	490a      	ldr	r1, [pc, #40]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8006aa0:	5ccb      	ldrb	r3, [r1, r3]
 8006aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa6:	4a09      	ldr	r2, [pc, #36]	@ (8006acc <HAL_RCC_ClockConfig+0x1c4>)
 8006aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006aaa:	4b09      	ldr	r3, [pc, #36]	@ (8006ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fd ffa2 	bl	80049f8 <HAL_InitTick>

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	40023c00 	.word	0x40023c00
 8006ac4:	40023800 	.word	0x40023800
 8006ac8:	0800a850 	.word	0x0800a850
 8006acc:	2000002c 	.word	0x2000002c
 8006ad0:	20000030 	.word	0x20000030

08006ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ad8:	b094      	sub	sp, #80	@ 0x50
 8006ada:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006aec:	4b79      	ldr	r3, [pc, #484]	@ (8006cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f003 030c 	and.w	r3, r3, #12
 8006af4:	2b08      	cmp	r3, #8
 8006af6:	d00d      	beq.n	8006b14 <HAL_RCC_GetSysClockFreq+0x40>
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	f200 80e1 	bhi.w	8006cc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d002      	beq.n	8006b08 <HAL_RCC_GetSysClockFreq+0x34>
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d003      	beq.n	8006b0e <HAL_RCC_GetSysClockFreq+0x3a>
 8006b06:	e0db      	b.n	8006cc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b08:	4b73      	ldr	r3, [pc, #460]	@ (8006cd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b0c:	e0db      	b.n	8006cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b0e:	4b73      	ldr	r3, [pc, #460]	@ (8006cdc <HAL_RCC_GetSysClockFreq+0x208>)
 8006b10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b12:	e0d8      	b.n	8006cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b14:	4b6f      	ldr	r3, [pc, #444]	@ (8006cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b1e:	4b6d      	ldr	r3, [pc, #436]	@ (8006cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d063      	beq.n	8006bf2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b2a:	4b6a      	ldr	r3, [pc, #424]	@ (8006cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	099b      	lsrs	r3, r3, #6
 8006b30:	2200      	movs	r2, #0
 8006b32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b3e:	2300      	movs	r3, #0
 8006b40:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006b46:	4622      	mov	r2, r4
 8006b48:	462b      	mov	r3, r5
 8006b4a:	f04f 0000 	mov.w	r0, #0
 8006b4e:	f04f 0100 	mov.w	r1, #0
 8006b52:	0159      	lsls	r1, r3, #5
 8006b54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b58:	0150      	lsls	r0, r2, #5
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4621      	mov	r1, r4
 8006b60:	1a51      	subs	r1, r2, r1
 8006b62:	6139      	str	r1, [r7, #16]
 8006b64:	4629      	mov	r1, r5
 8006b66:	eb63 0301 	sbc.w	r3, r3, r1
 8006b6a:	617b      	str	r3, [r7, #20]
 8006b6c:	f04f 0200 	mov.w	r2, #0
 8006b70:	f04f 0300 	mov.w	r3, #0
 8006b74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b78:	4659      	mov	r1, fp
 8006b7a:	018b      	lsls	r3, r1, #6
 8006b7c:	4651      	mov	r1, sl
 8006b7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b82:	4651      	mov	r1, sl
 8006b84:	018a      	lsls	r2, r1, #6
 8006b86:	4651      	mov	r1, sl
 8006b88:	ebb2 0801 	subs.w	r8, r2, r1
 8006b8c:	4659      	mov	r1, fp
 8006b8e:	eb63 0901 	sbc.w	r9, r3, r1
 8006b92:	f04f 0200 	mov.w	r2, #0
 8006b96:	f04f 0300 	mov.w	r3, #0
 8006b9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ba2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ba6:	4690      	mov	r8, r2
 8006ba8:	4699      	mov	r9, r3
 8006baa:	4623      	mov	r3, r4
 8006bac:	eb18 0303 	adds.w	r3, r8, r3
 8006bb0:	60bb      	str	r3, [r7, #8]
 8006bb2:	462b      	mov	r3, r5
 8006bb4:	eb49 0303 	adc.w	r3, r9, r3
 8006bb8:	60fb      	str	r3, [r7, #12]
 8006bba:	f04f 0200 	mov.w	r2, #0
 8006bbe:	f04f 0300 	mov.w	r3, #0
 8006bc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	024b      	lsls	r3, r1, #9
 8006bca:	4621      	mov	r1, r4
 8006bcc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	024a      	lsls	r2, r1, #9
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bda:	2200      	movs	r2, #0
 8006bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006be0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006be4:	f7f9 ffd4 	bl	8000b90 <__aeabi_uldivmod>
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4613      	mov	r3, r2
 8006bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bf0:	e058      	b.n	8006ca4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bf2:	4b38      	ldr	r3, [pc, #224]	@ (8006cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	099b      	lsrs	r3, r3, #6
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	4611      	mov	r1, r2
 8006bfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c02:	623b      	str	r3, [r7, #32]
 8006c04:	2300      	movs	r3, #0
 8006c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006c0c:	4642      	mov	r2, r8
 8006c0e:	464b      	mov	r3, r9
 8006c10:	f04f 0000 	mov.w	r0, #0
 8006c14:	f04f 0100 	mov.w	r1, #0
 8006c18:	0159      	lsls	r1, r3, #5
 8006c1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c1e:	0150      	lsls	r0, r2, #5
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	4641      	mov	r1, r8
 8006c26:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c2a:	4649      	mov	r1, r9
 8006c2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c30:	f04f 0200 	mov.w	r2, #0
 8006c34:	f04f 0300 	mov.w	r3, #0
 8006c38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c44:	ebb2 040a 	subs.w	r4, r2, sl
 8006c48:	eb63 050b 	sbc.w	r5, r3, fp
 8006c4c:	f04f 0200 	mov.w	r2, #0
 8006c50:	f04f 0300 	mov.w	r3, #0
 8006c54:	00eb      	lsls	r3, r5, #3
 8006c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c5a:	00e2      	lsls	r2, r4, #3
 8006c5c:	4614      	mov	r4, r2
 8006c5e:	461d      	mov	r5, r3
 8006c60:	4643      	mov	r3, r8
 8006c62:	18e3      	adds	r3, r4, r3
 8006c64:	603b      	str	r3, [r7, #0]
 8006c66:	464b      	mov	r3, r9
 8006c68:	eb45 0303 	adc.w	r3, r5, r3
 8006c6c:	607b      	str	r3, [r7, #4]
 8006c6e:	f04f 0200 	mov.w	r2, #0
 8006c72:	f04f 0300 	mov.w	r3, #0
 8006c76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c7a:	4629      	mov	r1, r5
 8006c7c:	028b      	lsls	r3, r1, #10
 8006c7e:	4621      	mov	r1, r4
 8006c80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c84:	4621      	mov	r1, r4
 8006c86:	028a      	lsls	r2, r1, #10
 8006c88:	4610      	mov	r0, r2
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c8e:	2200      	movs	r2, #0
 8006c90:	61bb      	str	r3, [r7, #24]
 8006c92:	61fa      	str	r2, [r7, #28]
 8006c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c98:	f7f9 ff7a 	bl	8000b90 <__aeabi_uldivmod>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	0c1b      	lsrs	r3, r3, #16
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	3301      	adds	r3, #1
 8006cb0:	005b      	lsls	r3, r3, #1
 8006cb2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006cb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006cb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006cbe:	e002      	b.n	8006cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cc0:	4b05      	ldr	r3, [pc, #20]	@ (8006cd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3750      	adds	r7, #80	@ 0x50
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cd2:	bf00      	nop
 8006cd4:	40023800 	.word	0x40023800
 8006cd8:	00f42400 	.word	0x00f42400
 8006cdc:	007a1200 	.word	0x007a1200

08006ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ce4:	4b03      	ldr	r3, [pc, #12]	@ (8006cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	2000002c 	.word	0x2000002c

08006cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006cfc:	f7ff fff0 	bl	8006ce0 <HAL_RCC_GetHCLKFreq>
 8006d00:	4602      	mov	r2, r0
 8006d02:	4b05      	ldr	r3, [pc, #20]	@ (8006d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	0a9b      	lsrs	r3, r3, #10
 8006d08:	f003 0307 	and.w	r3, r3, #7
 8006d0c:	4903      	ldr	r1, [pc, #12]	@ (8006d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d0e:	5ccb      	ldrb	r3, [r1, r3]
 8006d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	40023800 	.word	0x40023800
 8006d1c:	0800a860 	.word	0x0800a860

08006d20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e07b      	b.n	8006e2a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d108      	bne.n	8006d4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d42:	d009      	beq.n	8006d58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	61da      	str	r2, [r3, #28]
 8006d4a:	e005      	b.n	8006d58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d106      	bne.n	8006d78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7fb fa78 	bl	8002268 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006da0:	431a      	orrs	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006daa:	431a      	orrs	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	431a      	orrs	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ddc:	ea42 0103 	orr.w	r1, r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	430a      	orrs	r2, r1
 8006dee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	0c1b      	lsrs	r3, r3, #16
 8006df6:	f003 0104 	and.w	r1, r3, #4
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfe:	f003 0210 	and.w	r2, r3, #16
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	69da      	ldr	r2, [r3, #28]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b088      	sub	sp, #32
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	60f8      	str	r0, [r7, #12]
 8006e3a:	60b9      	str	r1, [r7, #8]
 8006e3c:	603b      	str	r3, [r7, #0]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e42:	f7fd fe1d 	bl	8004a80 <HAL_GetTick>
 8006e46:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006e48:	88fb      	ldrh	r3, [r7, #6]
 8006e4a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d001      	beq.n	8006e5c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006e58:	2302      	movs	r3, #2
 8006e5a:	e12a      	b.n	80070b2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d002      	beq.n	8006e68 <HAL_SPI_Transmit+0x36>
 8006e62:	88fb      	ldrh	r3, [r7, #6]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e122      	b.n	80070b2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d101      	bne.n	8006e7a <HAL_SPI_Transmit+0x48>
 8006e76:	2302      	movs	r3, #2
 8006e78:	e11b      	b.n	80070b2 <HAL_SPI_Transmit+0x280>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2203      	movs	r2, #3
 8006e86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	88fa      	ldrh	r2, [r7, #6]
 8006e9a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	88fa      	ldrh	r2, [r7, #6]
 8006ea0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ec8:	d10f      	bne.n	8006eea <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ed8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ee8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef4:	2b40      	cmp	r3, #64	@ 0x40
 8006ef6:	d007      	beq.n	8006f08 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f10:	d152      	bne.n	8006fb8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d002      	beq.n	8006f20 <HAL_SPI_Transmit+0xee>
 8006f1a:	8b7b      	ldrh	r3, [r7, #26]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d145      	bne.n	8006fac <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f24:	881a      	ldrh	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f30:	1c9a      	adds	r2, r3, #2
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f44:	e032      	b.n	8006fac <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f003 0302 	and.w	r3, r3, #2
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d112      	bne.n	8006f7a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f58:	881a      	ldrh	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f64:	1c9a      	adds	r2, r3, #2
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	3b01      	subs	r3, #1
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006f78:	e018      	b.n	8006fac <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f7a:	f7fd fd81 	bl	8004a80 <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d803      	bhi.n	8006f92 <HAL_SPI_Transmit+0x160>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f90:	d102      	bne.n	8006f98 <HAL_SPI_Transmit+0x166>
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d109      	bne.n	8006fac <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e082      	b.n	80070b2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1c7      	bne.n	8006f46 <HAL_SPI_Transmit+0x114>
 8006fb6:	e053      	b.n	8007060 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <HAL_SPI_Transmit+0x194>
 8006fc0:	8b7b      	ldrh	r3, [r7, #26]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d147      	bne.n	8007056 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	330c      	adds	r3, #12
 8006fd0:	7812      	ldrb	r2, [r2, #0]
 8006fd2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd8:	1c5a      	adds	r2, r3, #1
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006fec:	e033      	b.n	8007056 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f003 0302 	and.w	r3, r3, #2
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d113      	bne.n	8007024 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	330c      	adds	r3, #12
 8007006:	7812      	ldrb	r2, [r2, #0]
 8007008:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800700e:	1c5a      	adds	r2, r3, #1
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007018:	b29b      	uxth	r3, r3
 800701a:	3b01      	subs	r3, #1
 800701c:	b29a      	uxth	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007022:	e018      	b.n	8007056 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007024:	f7fd fd2c 	bl	8004a80 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	429a      	cmp	r2, r3
 8007032:	d803      	bhi.n	800703c <HAL_SPI_Transmit+0x20a>
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703a:	d102      	bne.n	8007042 <HAL_SPI_Transmit+0x210>
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d109      	bne.n	8007056 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e02d      	b.n	80070b2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800705a:	b29b      	uxth	r3, r3
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1c6      	bne.n	8006fee <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007060:	69fa      	ldr	r2, [r7, #28]
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 fbd9 	bl	800781c <SPI_EndRxTxTransaction>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2220      	movs	r2, #32
 8007074:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10a      	bne.n	8007094 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800707e:	2300      	movs	r3, #0
 8007080:	617b      	str	r3, [r7, #20]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	617b      	str	r3, [r7, #20]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	617b      	str	r3, [r7, #20]
 8007092:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e000      	b.n	80070b2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80070b0:	2300      	movs	r3, #0
  }
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3720      	adds	r7, #32
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b088      	sub	sp, #32
 80070be:	af02      	add	r7, sp, #8
 80070c0:	60f8      	str	r0, [r7, #12]
 80070c2:	60b9      	str	r1, [r7, #8]
 80070c4:	603b      	str	r3, [r7, #0]
 80070c6:	4613      	mov	r3, r2
 80070c8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d001      	beq.n	80070da <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80070d6:	2302      	movs	r3, #2
 80070d8:	e104      	b.n	80072e4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070e2:	d112      	bne.n	800710a <HAL_SPI_Receive+0x50>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10e      	bne.n	800710a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2204      	movs	r2, #4
 80070f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80070f4:	88fa      	ldrh	r2, [r7, #6]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	4613      	mov	r3, r2
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	68b9      	ldr	r1, [r7, #8]
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f000 f8f3 	bl	80072ec <HAL_SPI_TransmitReceive>
 8007106:	4603      	mov	r3, r0
 8007108:	e0ec      	b.n	80072e4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800710a:	f7fd fcb9 	bl	8004a80 <HAL_GetTick>
 800710e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d002      	beq.n	800711c <HAL_SPI_Receive+0x62>
 8007116:	88fb      	ldrh	r3, [r7, #6]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e0e1      	b.n	80072e4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007126:	2b01      	cmp	r3, #1
 8007128:	d101      	bne.n	800712e <HAL_SPI_Receive+0x74>
 800712a:	2302      	movs	r3, #2
 800712c:	e0da      	b.n	80072e4 <HAL_SPI_Receive+0x22a>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2204      	movs	r2, #4
 800713a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	88fa      	ldrh	r2, [r7, #6]
 800714e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	88fa      	ldrh	r2, [r7, #6]
 8007154:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800717c:	d10f      	bne.n	800719e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800718c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800719c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071a8:	2b40      	cmp	r3, #64	@ 0x40
 80071aa:	d007      	beq.n	80071bc <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d170      	bne.n	80072a6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80071c4:	e035      	b.n	8007232 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d115      	bne.n	8007200 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f103 020c 	add.w	r2, r3, #12
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e0:	7812      	ldrb	r2, [r2, #0]
 80071e2:	b2d2      	uxtb	r2, r2
 80071e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ea:	1c5a      	adds	r2, r3, #1
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	3b01      	subs	r3, #1
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80071fe:	e018      	b.n	8007232 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007200:	f7fd fc3e 	bl	8004a80 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	429a      	cmp	r2, r3
 800720e:	d803      	bhi.n	8007218 <HAL_SPI_Receive+0x15e>
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007216:	d102      	bne.n	800721e <HAL_SPI_Receive+0x164>
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d109      	bne.n	8007232 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e058      	b.n	80072e4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007236:	b29b      	uxth	r3, r3
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1c4      	bne.n	80071c6 <HAL_SPI_Receive+0x10c>
 800723c:	e038      	b.n	80072b0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	2b01      	cmp	r3, #1
 800724a:	d113      	bne.n	8007274 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68da      	ldr	r2, [r3, #12]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007256:	b292      	uxth	r2, r2
 8007258:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725e:	1c9a      	adds	r2, r3, #2
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007268:	b29b      	uxth	r3, r3
 800726a:	3b01      	subs	r3, #1
 800726c:	b29a      	uxth	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007272:	e018      	b.n	80072a6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007274:	f7fd fc04 	bl	8004a80 <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	429a      	cmp	r2, r3
 8007282:	d803      	bhi.n	800728c <HAL_SPI_Receive+0x1d2>
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728a:	d102      	bne.n	8007292 <HAL_SPI_Receive+0x1d8>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d109      	bne.n	80072a6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e01e      	b.n	80072e4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1c6      	bne.n	800723e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 fa4b 	bl	8007750 <SPI_EndRxTransaction>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2220      	movs	r2, #32
 80072c4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e000      	b.n	80072e4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80072e2:	2300      	movs	r3, #0
  }
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3718      	adds	r7, #24
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08a      	sub	sp, #40	@ 0x28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
 80072f8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80072fa:	2301      	movs	r3, #1
 80072fc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072fe:	f7fd fbbf 	bl	8004a80 <HAL_GetTick>
 8007302:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800730a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007312:	887b      	ldrh	r3, [r7, #2]
 8007314:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007316:	7ffb      	ldrb	r3, [r7, #31]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d00c      	beq.n	8007336 <HAL_SPI_TransmitReceive+0x4a>
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007322:	d106      	bne.n	8007332 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d102      	bne.n	8007332 <HAL_SPI_TransmitReceive+0x46>
 800732c:	7ffb      	ldrb	r3, [r7, #31]
 800732e:	2b04      	cmp	r3, #4
 8007330:	d001      	beq.n	8007336 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007332:	2302      	movs	r3, #2
 8007334:	e17f      	b.n	8007636 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d005      	beq.n	8007348 <HAL_SPI_TransmitReceive+0x5c>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d002      	beq.n	8007348 <HAL_SPI_TransmitReceive+0x5c>
 8007342:	887b      	ldrh	r3, [r7, #2]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e174      	b.n	8007636 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007352:	2b01      	cmp	r3, #1
 8007354:	d101      	bne.n	800735a <HAL_SPI_TransmitReceive+0x6e>
 8007356:	2302      	movs	r3, #2
 8007358:	e16d      	b.n	8007636 <HAL_SPI_TransmitReceive+0x34a>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b04      	cmp	r3, #4
 800736c:	d003      	beq.n	8007376 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2205      	movs	r2, #5
 8007372:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	887a      	ldrh	r2, [r7, #2]
 8007386:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	887a      	ldrh	r2, [r7, #2]
 800738c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	887a      	ldrh	r2, [r7, #2]
 8007398:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	887a      	ldrh	r2, [r7, #2]
 800739e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073b6:	2b40      	cmp	r3, #64	@ 0x40
 80073b8:	d007      	beq.n	80073ca <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073d2:	d17e      	bne.n	80074d2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d002      	beq.n	80073e2 <HAL_SPI_TransmitReceive+0xf6>
 80073dc:	8afb      	ldrh	r3, [r7, #22]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d16c      	bne.n	80074bc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e6:	881a      	ldrh	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f2:	1c9a      	adds	r2, r3, #2
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	3b01      	subs	r3, #1
 8007400:	b29a      	uxth	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007406:	e059      	b.n	80074bc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f003 0302 	and.w	r3, r3, #2
 8007412:	2b02      	cmp	r3, #2
 8007414:	d11b      	bne.n	800744e <HAL_SPI_TransmitReceive+0x162>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800741a:	b29b      	uxth	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d016      	beq.n	800744e <HAL_SPI_TransmitReceive+0x162>
 8007420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007422:	2b01      	cmp	r3, #1
 8007424:	d113      	bne.n	800744e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800742a:	881a      	ldrh	r2, [r3, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007436:	1c9a      	adds	r2, r3, #2
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007440:	b29b      	uxth	r3, r3
 8007442:	3b01      	subs	r3, #1
 8007444:	b29a      	uxth	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800744a:	2300      	movs	r3, #0
 800744c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b01      	cmp	r3, #1
 800745a:	d119      	bne.n	8007490 <HAL_SPI_TransmitReceive+0x1a4>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007460:	b29b      	uxth	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d014      	beq.n	8007490 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68da      	ldr	r2, [r3, #12]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007470:	b292      	uxth	r2, r2
 8007472:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007478:	1c9a      	adds	r2, r3, #2
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007482:	b29b      	uxth	r3, r3
 8007484:	3b01      	subs	r3, #1
 8007486:	b29a      	uxth	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800748c:	2301      	movs	r3, #1
 800748e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007490:	f7fd faf6 	bl	8004a80 <HAL_GetTick>
 8007494:	4602      	mov	r2, r0
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800749c:	429a      	cmp	r2, r3
 800749e:	d80d      	bhi.n	80074bc <HAL_SPI_TransmitReceive+0x1d0>
 80074a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a6:	d009      	beq.n	80074bc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e0bc      	b.n	8007636 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1a0      	bne.n	8007408 <HAL_SPI_TransmitReceive+0x11c>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d19b      	bne.n	8007408 <HAL_SPI_TransmitReceive+0x11c>
 80074d0:	e082      	b.n	80075d8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <HAL_SPI_TransmitReceive+0x1f4>
 80074da:	8afb      	ldrh	r3, [r7, #22]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d171      	bne.n	80075c4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	330c      	adds	r3, #12
 80074ea:	7812      	ldrb	r2, [r2, #0]
 80074ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	3b01      	subs	r3, #1
 8007500:	b29a      	uxth	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007506:	e05d      	b.n	80075c4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	2b02      	cmp	r3, #2
 8007514:	d11c      	bne.n	8007550 <HAL_SPI_TransmitReceive+0x264>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800751a:	b29b      	uxth	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	d017      	beq.n	8007550 <HAL_SPI_TransmitReceive+0x264>
 8007520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007522:	2b01      	cmp	r3, #1
 8007524:	d114      	bne.n	8007550 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	330c      	adds	r3, #12
 8007530:	7812      	ldrb	r2, [r2, #0]
 8007532:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007538:	1c5a      	adds	r2, r3, #1
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007542:	b29b      	uxth	r3, r3
 8007544:	3b01      	subs	r3, #1
 8007546:	b29a      	uxth	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800754c:	2300      	movs	r3, #0
 800754e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b01      	cmp	r3, #1
 800755c:	d119      	bne.n	8007592 <HAL_SPI_TransmitReceive+0x2a6>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007562:	b29b      	uxth	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d014      	beq.n	8007592 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68da      	ldr	r2, [r3, #12]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007572:	b2d2      	uxtb	r2, r2
 8007574:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007584:	b29b      	uxth	r3, r3
 8007586:	3b01      	subs	r3, #1
 8007588:	b29a      	uxth	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800758e:	2301      	movs	r3, #1
 8007590:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007592:	f7fd fa75 	bl	8004a80 <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800759e:	429a      	cmp	r2, r3
 80075a0:	d803      	bhi.n	80075aa <HAL_SPI_TransmitReceive+0x2be>
 80075a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a8:	d102      	bne.n	80075b0 <HAL_SPI_TransmitReceive+0x2c4>
 80075aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d109      	bne.n	80075c4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e038      	b.n	8007636 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d19c      	bne.n	8007508 <HAL_SPI_TransmitReceive+0x21c>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d197      	bne.n	8007508 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075d8:	6a3a      	ldr	r2, [r7, #32]
 80075da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f000 f91d 	bl	800781c <SPI_EndRxTxTransaction>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d008      	beq.n	80075fa <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2220      	movs	r2, #32
 80075ec:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e01d      	b.n	8007636 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10a      	bne.n	8007618 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007602:	2300      	movs	r3, #0
 8007604:	613b      	str	r3, [r7, #16]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	613b      	str	r3, [r7, #16]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	613b      	str	r3, [r7, #16]
 8007616:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e000      	b.n	8007636 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007634:	2300      	movs	r3, #0
  }
}
 8007636:	4618      	mov	r0, r3
 8007638:	3728      	adds	r7, #40	@ 0x28
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
	...

08007640 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b088      	sub	sp, #32
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	603b      	str	r3, [r7, #0]
 800764c:	4613      	mov	r3, r2
 800764e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007650:	f7fd fa16 	bl	8004a80 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007658:	1a9b      	subs	r3, r3, r2
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	4413      	add	r3, r2
 800765e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007660:	f7fd fa0e 	bl	8004a80 <HAL_GetTick>
 8007664:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007666:	4b39      	ldr	r3, [pc, #228]	@ (800774c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	015b      	lsls	r3, r3, #5
 800766c:	0d1b      	lsrs	r3, r3, #20
 800766e:	69fa      	ldr	r2, [r7, #28]
 8007670:	fb02 f303 	mul.w	r3, r2, r3
 8007674:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007676:	e054      	b.n	8007722 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767e:	d050      	beq.n	8007722 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007680:	f7fd f9fe 	bl	8004a80 <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	69fa      	ldr	r2, [r7, #28]
 800768c:	429a      	cmp	r2, r3
 800768e:	d902      	bls.n	8007696 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d13d      	bne.n	8007712 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80076a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076ae:	d111      	bne.n	80076d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076b8:	d004      	beq.n	80076c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076c2:	d107      	bne.n	80076d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076dc:	d10f      	bne.n	80076fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e017      	b.n	8007742 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d101      	bne.n	800771c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007718:	2300      	movs	r3, #0
 800771a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	3b01      	subs	r3, #1
 8007720:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689a      	ldr	r2, [r3, #8]
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	4013      	ands	r3, r2
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	429a      	cmp	r2, r3
 8007730:	bf0c      	ite	eq
 8007732:	2301      	moveq	r3, #1
 8007734:	2300      	movne	r3, #0
 8007736:	b2db      	uxtb	r3, r3
 8007738:	461a      	mov	r2, r3
 800773a:	79fb      	ldrb	r3, [r7, #7]
 800773c:	429a      	cmp	r2, r3
 800773e:	d19b      	bne.n	8007678 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3720      	adds	r7, #32
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	2000002c 	.word	0x2000002c

08007750 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af02      	add	r7, sp, #8
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007764:	d111      	bne.n	800778a <SPI_EndRxTransaction+0x3a>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800776e:	d004      	beq.n	800777a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007778:	d107      	bne.n	800778a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007788:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007792:	d12a      	bne.n	80077ea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800779c:	d012      	beq.n	80077c4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	2200      	movs	r2, #0
 80077a6:	2180      	movs	r1, #128	@ 0x80
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f7ff ff49 	bl	8007640 <SPI_WaitFlagStateUntilTimeout>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d02d      	beq.n	8007810 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077b8:	f043 0220 	orr.w	r2, r3, #32
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e026      	b.n	8007812 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	2200      	movs	r2, #0
 80077cc:	2101      	movs	r1, #1
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f7ff ff36 	bl	8007640 <SPI_WaitFlagStateUntilTimeout>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d01a      	beq.n	8007810 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077de:	f043 0220 	orr.w	r2, r3, #32
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e013      	b.n	8007812 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2200      	movs	r2, #0
 80077f2:	2101      	movs	r1, #1
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f7ff ff23 	bl	8007640 <SPI_WaitFlagStateUntilTimeout>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d007      	beq.n	8007810 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007804:	f043 0220 	orr.w	r2, r3, #32
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	e000      	b.n	8007812 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
	...

0800781c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b088      	sub	sp, #32
 8007820:	af02      	add	r7, sp, #8
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2201      	movs	r2, #1
 8007830:	2102      	movs	r1, #2
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f7ff ff04 	bl	8007640 <SPI_WaitFlagStateUntilTimeout>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d007      	beq.n	800784e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007842:	f043 0220 	orr.w	r2, r3, #32
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e032      	b.n	80078b4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800784e:	4b1b      	ldr	r3, [pc, #108]	@ (80078bc <SPI_EndRxTxTransaction+0xa0>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a1b      	ldr	r2, [pc, #108]	@ (80078c0 <SPI_EndRxTxTransaction+0xa4>)
 8007854:	fba2 2303 	umull	r2, r3, r2, r3
 8007858:	0d5b      	lsrs	r3, r3, #21
 800785a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800785e:	fb02 f303 	mul.w	r3, r2, r3
 8007862:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800786c:	d112      	bne.n	8007894 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2200      	movs	r2, #0
 8007876:	2180      	movs	r1, #128	@ 0x80
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f7ff fee1 	bl	8007640 <SPI_WaitFlagStateUntilTimeout>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d016      	beq.n	80078b2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007888:	f043 0220 	orr.w	r2, r3, #32
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e00f      	b.n	80078b4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00a      	beq.n	80078b0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	3b01      	subs	r3, #1
 800789e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078aa:	2b80      	cmp	r3, #128	@ 0x80
 80078ac:	d0f2      	beq.n	8007894 <SPI_EndRxTxTransaction+0x78>
 80078ae:	e000      	b.n	80078b2 <SPI_EndRxTxTransaction+0x96>
        break;
 80078b0:	bf00      	nop
  }

  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3718      	adds	r7, #24
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	2000002c 	.word	0x2000002c
 80078c0:	165e9f81 	.word	0x165e9f81

080078c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d101      	bne.n	80078d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e041      	b.n	800795a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d106      	bne.n	80078f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7fa ff2a 	bl	8002744 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2202      	movs	r2, #2
 80078f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3304      	adds	r3, #4
 8007900:	4619      	mov	r1, r3
 8007902:	4610      	mov	r0, r2
 8007904:	f000 fdfa 	bl	80084fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
	...

08007964 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b01      	cmp	r3, #1
 8007976:	d001      	beq.n	800797c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	e04e      	b.n	8007a1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2202      	movs	r2, #2
 8007980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68da      	ldr	r2, [r3, #12]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f042 0201 	orr.w	r2, r2, #1
 8007992:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a23      	ldr	r2, [pc, #140]	@ (8007a28 <HAL_TIM_Base_Start_IT+0xc4>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d022      	beq.n	80079e4 <HAL_TIM_Base_Start_IT+0x80>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079a6:	d01d      	beq.n	80079e4 <HAL_TIM_Base_Start_IT+0x80>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a1f      	ldr	r2, [pc, #124]	@ (8007a2c <HAL_TIM_Base_Start_IT+0xc8>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d018      	beq.n	80079e4 <HAL_TIM_Base_Start_IT+0x80>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a1e      	ldr	r2, [pc, #120]	@ (8007a30 <HAL_TIM_Base_Start_IT+0xcc>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d013      	beq.n	80079e4 <HAL_TIM_Base_Start_IT+0x80>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007a34 <HAL_TIM_Base_Start_IT+0xd0>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d00e      	beq.n	80079e4 <HAL_TIM_Base_Start_IT+0x80>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a1b      	ldr	r2, [pc, #108]	@ (8007a38 <HAL_TIM_Base_Start_IT+0xd4>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d009      	beq.n	80079e4 <HAL_TIM_Base_Start_IT+0x80>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a19      	ldr	r2, [pc, #100]	@ (8007a3c <HAL_TIM_Base_Start_IT+0xd8>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d004      	beq.n	80079e4 <HAL_TIM_Base_Start_IT+0x80>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a18      	ldr	r2, [pc, #96]	@ (8007a40 <HAL_TIM_Base_Start_IT+0xdc>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d111      	bne.n	8007a08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f003 0307 	and.w	r3, r3, #7
 80079ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2b06      	cmp	r3, #6
 80079f4:	d010      	beq.n	8007a18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f042 0201 	orr.w	r2, r2, #1
 8007a04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a06:	e007      	b.n	8007a18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f042 0201 	orr.w	r2, r2, #1
 8007a16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	40010000 	.word	0x40010000
 8007a2c:	40000400 	.word	0x40000400
 8007a30:	40000800 	.word	0x40000800
 8007a34:	40000c00 	.word	0x40000c00
 8007a38:	40010400 	.word	0x40010400
 8007a3c:	40014000 	.word	0x40014000
 8007a40:	40001800 	.word	0x40001800

08007a44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d101      	bne.n	8007a56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e041      	b.n	8007ada <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d106      	bne.n	8007a70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7fa ff0e 	bl	800288c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2202      	movs	r2, #2
 8007a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	3304      	adds	r3, #4
 8007a80:	4619      	mov	r1, r3
 8007a82:	4610      	mov	r0, r2
 8007a84:	f000 fd3a 	bl	80084fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
	...

08007ae4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d109      	bne.n	8007b0c <HAL_TIM_PWM_Start_IT+0x28>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	bf14      	ite	ne
 8007b04:	2301      	movne	r3, #1
 8007b06:	2300      	moveq	r3, #0
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	e022      	b.n	8007b52 <HAL_TIM_PWM_Start_IT+0x6e>
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d109      	bne.n	8007b26 <HAL_TIM_PWM_Start_IT+0x42>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	bf14      	ite	ne
 8007b1e:	2301      	movne	r3, #1
 8007b20:	2300      	moveq	r3, #0
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	e015      	b.n	8007b52 <HAL_TIM_PWM_Start_IT+0x6e>
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	2b08      	cmp	r3, #8
 8007b2a:	d109      	bne.n	8007b40 <HAL_TIM_PWM_Start_IT+0x5c>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	bf14      	ite	ne
 8007b38:	2301      	movne	r3, #1
 8007b3a:	2300      	moveq	r3, #0
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	e008      	b.n	8007b52 <HAL_TIM_PWM_Start_IT+0x6e>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	bf14      	ite	ne
 8007b4c:	2301      	movne	r3, #1
 8007b4e:	2300      	moveq	r3, #0
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e0c7      	b.n	8007cea <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d104      	bne.n	8007b6a <HAL_TIM_PWM_Start_IT+0x86>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b68:	e013      	b.n	8007b92 <HAL_TIM_PWM_Start_IT+0xae>
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2b04      	cmp	r3, #4
 8007b6e:	d104      	bne.n	8007b7a <HAL_TIM_PWM_Start_IT+0x96>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b78:	e00b      	b.n	8007b92 <HAL_TIM_PWM_Start_IT+0xae>
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	2b08      	cmp	r3, #8
 8007b7e:	d104      	bne.n	8007b8a <HAL_TIM_PWM_Start_IT+0xa6>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2202      	movs	r2, #2
 8007b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b88:	e003      	b.n	8007b92 <HAL_TIM_PWM_Start_IT+0xae>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	2b0c      	cmp	r3, #12
 8007b96:	d841      	bhi.n	8007c1c <HAL_TIM_PWM_Start_IT+0x138>
 8007b98:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba0 <HAL_TIM_PWM_Start_IT+0xbc>)
 8007b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9e:	bf00      	nop
 8007ba0:	08007bd5 	.word	0x08007bd5
 8007ba4:	08007c1d 	.word	0x08007c1d
 8007ba8:	08007c1d 	.word	0x08007c1d
 8007bac:	08007c1d 	.word	0x08007c1d
 8007bb0:	08007be7 	.word	0x08007be7
 8007bb4:	08007c1d 	.word	0x08007c1d
 8007bb8:	08007c1d 	.word	0x08007c1d
 8007bbc:	08007c1d 	.word	0x08007c1d
 8007bc0:	08007bf9 	.word	0x08007bf9
 8007bc4:	08007c1d 	.word	0x08007c1d
 8007bc8:	08007c1d 	.word	0x08007c1d
 8007bcc:	08007c1d 	.word	0x08007c1d
 8007bd0:	08007c0b 	.word	0x08007c0b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68da      	ldr	r2, [r3, #12]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f042 0202 	orr.w	r2, r2, #2
 8007be2:	60da      	str	r2, [r3, #12]
      break;
 8007be4:	e01d      	b.n	8007c22 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68da      	ldr	r2, [r3, #12]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f042 0204 	orr.w	r2, r2, #4
 8007bf4:	60da      	str	r2, [r3, #12]
      break;
 8007bf6:	e014      	b.n	8007c22 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68da      	ldr	r2, [r3, #12]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f042 0208 	orr.w	r2, r2, #8
 8007c06:	60da      	str	r2, [r3, #12]
      break;
 8007c08:	e00b      	b.n	8007c22 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68da      	ldr	r2, [r3, #12]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f042 0210 	orr.w	r2, r2, #16
 8007c18:	60da      	str	r2, [r3, #12]
      break;
 8007c1a:	e002      	b.n	8007c22 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c20:	bf00      	nop
  }

  if (status == HAL_OK)
 8007c22:	7bfb      	ldrb	r3, [r7, #15]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d15f      	bne.n	8007ce8 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 ff59 	bl	8008ae8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a2e      	ldr	r2, [pc, #184]	@ (8007cf4 <HAL_TIM_PWM_Start_IT+0x210>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d004      	beq.n	8007c4a <HAL_TIM_PWM_Start_IT+0x166>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a2c      	ldr	r2, [pc, #176]	@ (8007cf8 <HAL_TIM_PWM_Start_IT+0x214>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d101      	bne.n	8007c4e <HAL_TIM_PWM_Start_IT+0x16a>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e000      	b.n	8007c50 <HAL_TIM_PWM_Start_IT+0x16c>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d007      	beq.n	8007c64 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c62:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a22      	ldr	r2, [pc, #136]	@ (8007cf4 <HAL_TIM_PWM_Start_IT+0x210>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d022      	beq.n	8007cb4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c76:	d01d      	beq.n	8007cb4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a1f      	ldr	r2, [pc, #124]	@ (8007cfc <HAL_TIM_PWM_Start_IT+0x218>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d018      	beq.n	8007cb4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a1e      	ldr	r2, [pc, #120]	@ (8007d00 <HAL_TIM_PWM_Start_IT+0x21c>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d013      	beq.n	8007cb4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a1c      	ldr	r2, [pc, #112]	@ (8007d04 <HAL_TIM_PWM_Start_IT+0x220>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d00e      	beq.n	8007cb4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a17      	ldr	r2, [pc, #92]	@ (8007cf8 <HAL_TIM_PWM_Start_IT+0x214>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d009      	beq.n	8007cb4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a18      	ldr	r2, [pc, #96]	@ (8007d08 <HAL_TIM_PWM_Start_IT+0x224>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d004      	beq.n	8007cb4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a17      	ldr	r2, [pc, #92]	@ (8007d0c <HAL_TIM_PWM_Start_IT+0x228>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d111      	bne.n	8007cd8 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f003 0307 	and.w	r3, r3, #7
 8007cbe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	2b06      	cmp	r3, #6
 8007cc4:	d010      	beq.n	8007ce8 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f042 0201 	orr.w	r2, r2, #1
 8007cd4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cd6:	e007      	b.n	8007ce8 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f042 0201 	orr.w	r2, r2, #1
 8007ce6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	40010000 	.word	0x40010000
 8007cf8:	40010400 	.word	0x40010400
 8007cfc:	40000400 	.word	0x40000400
 8007d00:	40000800 	.word	0x40000800
 8007d04:	40000c00 	.word	0x40000c00
 8007d08:	40014000 	.word	0x40014000
 8007d0c:	40001800 	.word	0x40001800

08007d10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e097      	b.n	8007e54 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d106      	bne.n	8007d3e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7fa fd29 	bl	8002790 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2202      	movs	r2, #2
 8007d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	6812      	ldr	r2, [r2, #0]
 8007d50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d54:	f023 0307 	bic.w	r3, r3, #7
 8007d58:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	3304      	adds	r3, #4
 8007d62:	4619      	mov	r1, r3
 8007d64:	4610      	mov	r0, r2
 8007d66:	f000 fbc9 	bl	80084fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6a1b      	ldr	r3, [r3, #32]
 8007d80:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d92:	f023 0303 	bic.w	r3, r3, #3
 8007d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	689a      	ldr	r2, [r3, #8]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	021b      	lsls	r3, r3, #8
 8007da2:	4313      	orrs	r3, r2
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007db0:	f023 030c 	bic.w	r3, r3, #12
 8007db4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007dbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007dc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	68da      	ldr	r2, [r3, #12]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	021b      	lsls	r3, r3, #8
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	011a      	lsls	r2, r3, #4
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	031b      	lsls	r3, r3, #12
 8007de0:	4313      	orrs	r3, r2
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007dee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007df6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	695b      	ldr	r3, [r3, #20]
 8007e00:	011b      	lsls	r3, r3, #4
 8007e02:	4313      	orrs	r3, r2
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3718      	adds	r7, #24
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e6c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e74:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e7c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007e84:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d110      	bne.n	8007eae <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d102      	bne.n	8007e98 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e92:	7b7b      	ldrb	r3, [r7, #13]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d001      	beq.n	8007e9c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e089      	b.n	8007fb0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007eac:	e031      	b.n	8007f12 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2b04      	cmp	r3, #4
 8007eb2:	d110      	bne.n	8007ed6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007eb4:	7bbb      	ldrb	r3, [r7, #14]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d102      	bne.n	8007ec0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007eba:	7b3b      	ldrb	r3, [r7, #12]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d001      	beq.n	8007ec4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e075      	b.n	8007fb0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2202      	movs	r2, #2
 8007ed0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ed4:	e01d      	b.n	8007f12 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ed6:	7bfb      	ldrb	r3, [r7, #15]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d108      	bne.n	8007eee <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007edc:	7bbb      	ldrb	r3, [r7, #14]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d105      	bne.n	8007eee <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ee2:	7b7b      	ldrb	r3, [r7, #13]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d102      	bne.n	8007eee <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ee8:	7b3b      	ldrb	r3, [r7, #12]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d001      	beq.n	8007ef2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e05e      	b.n	8007fb0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2202      	movs	r2, #2
 8007efe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2202      	movs	r2, #2
 8007f06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2202      	movs	r2, #2
 8007f0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d003      	beq.n	8007f20 <HAL_TIM_Encoder_Start_IT+0xc4>
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	2b04      	cmp	r3, #4
 8007f1c:	d010      	beq.n	8007f40 <HAL_TIM_Encoder_Start_IT+0xe4>
 8007f1e:	e01f      	b.n	8007f60 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2201      	movs	r2, #1
 8007f26:	2100      	movs	r1, #0
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f000 fddd 	bl	8008ae8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68da      	ldr	r2, [r3, #12]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f042 0202 	orr.w	r2, r2, #2
 8007f3c:	60da      	str	r2, [r3, #12]
      break;
 8007f3e:	e02e      	b.n	8007f9e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2201      	movs	r2, #1
 8007f46:	2104      	movs	r1, #4
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 fdcd 	bl	8008ae8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68da      	ldr	r2, [r3, #12]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f042 0204 	orr.w	r2, r2, #4
 8007f5c:	60da      	str	r2, [r3, #12]
      break;
 8007f5e:	e01e      	b.n	8007f9e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2201      	movs	r2, #1
 8007f66:	2100      	movs	r1, #0
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f000 fdbd 	bl	8008ae8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2201      	movs	r2, #1
 8007f74:	2104      	movs	r1, #4
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 fdb6 	bl	8008ae8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68da      	ldr	r2, [r3, #12]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f042 0202 	orr.w	r2, r2, #2
 8007f8a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68da      	ldr	r2, [r3, #12]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f042 0204 	orr.w	r2, r2, #4
 8007f9a:	60da      	str	r2, [r3, #12]
      break;
 8007f9c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f042 0201 	orr.w	r2, r2, #1
 8007fac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f003 0302 	and.w	r3, r3, #2
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d020      	beq.n	800801c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f003 0302 	and.w	r3, r3, #2
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d01b      	beq.n	800801c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f06f 0202 	mvn.w	r2, #2
 8007fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	f003 0303 	and.w	r3, r3, #3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fa5b 	bl	80084be <HAL_TIM_IC_CaptureCallback>
 8008008:	e005      	b.n	8008016 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fa4d 	bl	80084aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fa5e 	bl	80084d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	f003 0304 	and.w	r3, r3, #4
 8008022:	2b00      	cmp	r3, #0
 8008024:	d020      	beq.n	8008068 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f003 0304 	and.w	r3, r3, #4
 800802c:	2b00      	cmp	r3, #0
 800802e:	d01b      	beq.n	8008068 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f06f 0204 	mvn.w	r2, #4
 8008038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2202      	movs	r2, #2
 800803e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800804a:	2b00      	cmp	r3, #0
 800804c:	d003      	beq.n	8008056 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fa35 	bl	80084be <HAL_TIM_IC_CaptureCallback>
 8008054:	e005      	b.n	8008062 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fa27 	bl	80084aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fa38 	bl	80084d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	f003 0308 	and.w	r3, r3, #8
 800806e:	2b00      	cmp	r3, #0
 8008070:	d020      	beq.n	80080b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f003 0308 	and.w	r3, r3, #8
 8008078:	2b00      	cmp	r3, #0
 800807a:	d01b      	beq.n	80080b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f06f 0208 	mvn.w	r2, #8
 8008084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2204      	movs	r2, #4
 800808a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	f003 0303 	and.w	r3, r3, #3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fa0f 	bl	80084be <HAL_TIM_IC_CaptureCallback>
 80080a0:	e005      	b.n	80080ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fa01 	bl	80084aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fa12 	bl	80084d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f003 0310 	and.w	r3, r3, #16
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d020      	beq.n	8008100 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f003 0310 	and.w	r3, r3, #16
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d01b      	beq.n	8008100 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f06f 0210 	mvn.w	r2, #16
 80080d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2208      	movs	r2, #8
 80080d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	69db      	ldr	r3, [r3, #28]
 80080de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f9e9 	bl	80084be <HAL_TIM_IC_CaptureCallback>
 80080ec:	e005      	b.n	80080fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f9db 	bl	80084aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f9ec 	bl	80084d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00c      	beq.n	8008124 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f003 0301 	and.w	r3, r3, #1
 8008110:	2b00      	cmp	r3, #0
 8008112:	d007      	beq.n	8008124 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f06f 0201 	mvn.w	r2, #1
 800811c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7f9 f97a 	bl	8001418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00c      	beq.n	8008148 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008134:	2b00      	cmp	r3, #0
 8008136:	d007      	beq.n	8008148 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fd7c 	bl	8008c40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00c      	beq.n	800816c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008158:	2b00      	cmp	r3, #0
 800815a:	d007      	beq.n	800816c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f9bd 	bl	80084e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f003 0320 	and.w	r3, r3, #32
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00c      	beq.n	8008190 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f003 0320 	and.w	r3, r3, #32
 800817c:	2b00      	cmp	r3, #0
 800817e:	d007      	beq.n	8008190 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f06f 0220 	mvn.w	r2, #32
 8008188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fd4e 	bl	8008c2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008190:	bf00      	nop
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d101      	bne.n	80081b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80081b2:	2302      	movs	r3, #2
 80081b4:	e0ae      	b.n	8008314 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2201      	movs	r2, #1
 80081ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b0c      	cmp	r3, #12
 80081c2:	f200 809f 	bhi.w	8008304 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80081c6:	a201      	add	r2, pc, #4	@ (adr r2, 80081cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80081c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081cc:	08008201 	.word	0x08008201
 80081d0:	08008305 	.word	0x08008305
 80081d4:	08008305 	.word	0x08008305
 80081d8:	08008305 	.word	0x08008305
 80081dc:	08008241 	.word	0x08008241
 80081e0:	08008305 	.word	0x08008305
 80081e4:	08008305 	.word	0x08008305
 80081e8:	08008305 	.word	0x08008305
 80081ec:	08008283 	.word	0x08008283
 80081f0:	08008305 	.word	0x08008305
 80081f4:	08008305 	.word	0x08008305
 80081f8:	08008305 	.word	0x08008305
 80081fc:	080082c3 	.word	0x080082c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68b9      	ldr	r1, [r7, #8]
 8008206:	4618      	mov	r0, r3
 8008208:	f000 fa24 	bl	8008654 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	699a      	ldr	r2, [r3, #24]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f042 0208 	orr.w	r2, r2, #8
 800821a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	699a      	ldr	r2, [r3, #24]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f022 0204 	bic.w	r2, r2, #4
 800822a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6999      	ldr	r1, [r3, #24]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	691a      	ldr	r2, [r3, #16]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	430a      	orrs	r2, r1
 800823c:	619a      	str	r2, [r3, #24]
      break;
 800823e:	e064      	b.n	800830a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68b9      	ldr	r1, [r7, #8]
 8008246:	4618      	mov	r0, r3
 8008248:	f000 fa74 	bl	8008734 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	699a      	ldr	r2, [r3, #24]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800825a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	699a      	ldr	r2, [r3, #24]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800826a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6999      	ldr	r1, [r3, #24]
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	021a      	lsls	r2, r3, #8
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	430a      	orrs	r2, r1
 800827e:	619a      	str	r2, [r3, #24]
      break;
 8008280:	e043      	b.n	800830a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68b9      	ldr	r1, [r7, #8]
 8008288:	4618      	mov	r0, r3
 800828a:	f000 fac9 	bl	8008820 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	69da      	ldr	r2, [r3, #28]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f042 0208 	orr.w	r2, r2, #8
 800829c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	69da      	ldr	r2, [r3, #28]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f022 0204 	bic.w	r2, r2, #4
 80082ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	69d9      	ldr	r1, [r3, #28]
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	691a      	ldr	r2, [r3, #16]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	430a      	orrs	r2, r1
 80082be:	61da      	str	r2, [r3, #28]
      break;
 80082c0:	e023      	b.n	800830a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68b9      	ldr	r1, [r7, #8]
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 fb1d 	bl	8008908 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	69da      	ldr	r2, [r3, #28]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	69da      	ldr	r2, [r3, #28]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	69d9      	ldr	r1, [r3, #28]
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	021a      	lsls	r2, r3, #8
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	430a      	orrs	r2, r1
 8008300:	61da      	str	r2, [r3, #28]
      break;
 8008302:	e002      	b.n	800830a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	75fb      	strb	r3, [r7, #23]
      break;
 8008308:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008312:	7dfb      	ldrb	r3, [r7, #23]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3718      	adds	r7, #24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008330:	2b01      	cmp	r3, #1
 8008332:	d101      	bne.n	8008338 <HAL_TIM_ConfigClockSource+0x1c>
 8008334:	2302      	movs	r3, #2
 8008336:	e0b4      	b.n	80084a2 <HAL_TIM_ConfigClockSource+0x186>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2202      	movs	r2, #2
 8008344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800835e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008370:	d03e      	beq.n	80083f0 <HAL_TIM_ConfigClockSource+0xd4>
 8008372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008376:	f200 8087 	bhi.w	8008488 <HAL_TIM_ConfigClockSource+0x16c>
 800837a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800837e:	f000 8086 	beq.w	800848e <HAL_TIM_ConfigClockSource+0x172>
 8008382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008386:	d87f      	bhi.n	8008488 <HAL_TIM_ConfigClockSource+0x16c>
 8008388:	2b70      	cmp	r3, #112	@ 0x70
 800838a:	d01a      	beq.n	80083c2 <HAL_TIM_ConfigClockSource+0xa6>
 800838c:	2b70      	cmp	r3, #112	@ 0x70
 800838e:	d87b      	bhi.n	8008488 <HAL_TIM_ConfigClockSource+0x16c>
 8008390:	2b60      	cmp	r3, #96	@ 0x60
 8008392:	d050      	beq.n	8008436 <HAL_TIM_ConfigClockSource+0x11a>
 8008394:	2b60      	cmp	r3, #96	@ 0x60
 8008396:	d877      	bhi.n	8008488 <HAL_TIM_ConfigClockSource+0x16c>
 8008398:	2b50      	cmp	r3, #80	@ 0x50
 800839a:	d03c      	beq.n	8008416 <HAL_TIM_ConfigClockSource+0xfa>
 800839c:	2b50      	cmp	r3, #80	@ 0x50
 800839e:	d873      	bhi.n	8008488 <HAL_TIM_ConfigClockSource+0x16c>
 80083a0:	2b40      	cmp	r3, #64	@ 0x40
 80083a2:	d058      	beq.n	8008456 <HAL_TIM_ConfigClockSource+0x13a>
 80083a4:	2b40      	cmp	r3, #64	@ 0x40
 80083a6:	d86f      	bhi.n	8008488 <HAL_TIM_ConfigClockSource+0x16c>
 80083a8:	2b30      	cmp	r3, #48	@ 0x30
 80083aa:	d064      	beq.n	8008476 <HAL_TIM_ConfigClockSource+0x15a>
 80083ac:	2b30      	cmp	r3, #48	@ 0x30
 80083ae:	d86b      	bhi.n	8008488 <HAL_TIM_ConfigClockSource+0x16c>
 80083b0:	2b20      	cmp	r3, #32
 80083b2:	d060      	beq.n	8008476 <HAL_TIM_ConfigClockSource+0x15a>
 80083b4:	2b20      	cmp	r3, #32
 80083b6:	d867      	bhi.n	8008488 <HAL_TIM_ConfigClockSource+0x16c>
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d05c      	beq.n	8008476 <HAL_TIM_ConfigClockSource+0x15a>
 80083bc:	2b10      	cmp	r3, #16
 80083be:	d05a      	beq.n	8008476 <HAL_TIM_ConfigClockSource+0x15a>
 80083c0:	e062      	b.n	8008488 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083d2:	f000 fb69 	bl	8008aa8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80083e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	609a      	str	r2, [r3, #8]
      break;
 80083ee:	e04f      	b.n	8008490 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008400:	f000 fb52 	bl	8008aa8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689a      	ldr	r2, [r3, #8]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008412:	609a      	str	r2, [r3, #8]
      break;
 8008414:	e03c      	b.n	8008490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008422:	461a      	mov	r2, r3
 8008424:	f000 fac6 	bl	80089b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2150      	movs	r1, #80	@ 0x50
 800842e:	4618      	mov	r0, r3
 8008430:	f000 fb1f 	bl	8008a72 <TIM_ITRx_SetConfig>
      break;
 8008434:	e02c      	b.n	8008490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008442:	461a      	mov	r2, r3
 8008444:	f000 fae5 	bl	8008a12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2160      	movs	r1, #96	@ 0x60
 800844e:	4618      	mov	r0, r3
 8008450:	f000 fb0f 	bl	8008a72 <TIM_ITRx_SetConfig>
      break;
 8008454:	e01c      	b.n	8008490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008462:	461a      	mov	r2, r3
 8008464:	f000 faa6 	bl	80089b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2140      	movs	r1, #64	@ 0x40
 800846e:	4618      	mov	r0, r3
 8008470:	f000 faff 	bl	8008a72 <TIM_ITRx_SetConfig>
      break;
 8008474:	e00c      	b.n	8008490 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4619      	mov	r1, r3
 8008480:	4610      	mov	r0, r2
 8008482:	f000 faf6 	bl	8008a72 <TIM_ITRx_SetConfig>
      break;
 8008486:	e003      	b.n	8008490 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	73fb      	strb	r3, [r7, #15]
      break;
 800848c:	e000      	b.n	8008490 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800848e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b083      	sub	sp, #12
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084b2:	bf00      	nop
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084be:	b480      	push	{r7}
 80084c0:	b083      	sub	sp, #12
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084c6:	bf00      	nop
 80084c8:	370c      	adds	r7, #12
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr

080084d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084d2:	b480      	push	{r7}
 80084d4:	b083      	sub	sp, #12
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084da:	bf00      	nop
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b083      	sub	sp, #12
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084ee:	bf00      	nop
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
	...

080084fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a46      	ldr	r2, [pc, #280]	@ (8008628 <TIM_Base_SetConfig+0x12c>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d013      	beq.n	800853c <TIM_Base_SetConfig+0x40>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800851a:	d00f      	beq.n	800853c <TIM_Base_SetConfig+0x40>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a43      	ldr	r2, [pc, #268]	@ (800862c <TIM_Base_SetConfig+0x130>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d00b      	beq.n	800853c <TIM_Base_SetConfig+0x40>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a42      	ldr	r2, [pc, #264]	@ (8008630 <TIM_Base_SetConfig+0x134>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d007      	beq.n	800853c <TIM_Base_SetConfig+0x40>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a41      	ldr	r2, [pc, #260]	@ (8008634 <TIM_Base_SetConfig+0x138>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d003      	beq.n	800853c <TIM_Base_SetConfig+0x40>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a40      	ldr	r2, [pc, #256]	@ (8008638 <TIM_Base_SetConfig+0x13c>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d108      	bne.n	800854e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	4313      	orrs	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a35      	ldr	r2, [pc, #212]	@ (8008628 <TIM_Base_SetConfig+0x12c>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d02b      	beq.n	80085ae <TIM_Base_SetConfig+0xb2>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800855c:	d027      	beq.n	80085ae <TIM_Base_SetConfig+0xb2>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a32      	ldr	r2, [pc, #200]	@ (800862c <TIM_Base_SetConfig+0x130>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d023      	beq.n	80085ae <TIM_Base_SetConfig+0xb2>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a31      	ldr	r2, [pc, #196]	@ (8008630 <TIM_Base_SetConfig+0x134>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d01f      	beq.n	80085ae <TIM_Base_SetConfig+0xb2>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a30      	ldr	r2, [pc, #192]	@ (8008634 <TIM_Base_SetConfig+0x138>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d01b      	beq.n	80085ae <TIM_Base_SetConfig+0xb2>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a2f      	ldr	r2, [pc, #188]	@ (8008638 <TIM_Base_SetConfig+0x13c>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d017      	beq.n	80085ae <TIM_Base_SetConfig+0xb2>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a2e      	ldr	r2, [pc, #184]	@ (800863c <TIM_Base_SetConfig+0x140>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d013      	beq.n	80085ae <TIM_Base_SetConfig+0xb2>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a2d      	ldr	r2, [pc, #180]	@ (8008640 <TIM_Base_SetConfig+0x144>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d00f      	beq.n	80085ae <TIM_Base_SetConfig+0xb2>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a2c      	ldr	r2, [pc, #176]	@ (8008644 <TIM_Base_SetConfig+0x148>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d00b      	beq.n	80085ae <TIM_Base_SetConfig+0xb2>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a2b      	ldr	r2, [pc, #172]	@ (8008648 <TIM_Base_SetConfig+0x14c>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d007      	beq.n	80085ae <TIM_Base_SetConfig+0xb2>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a2a      	ldr	r2, [pc, #168]	@ (800864c <TIM_Base_SetConfig+0x150>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d003      	beq.n	80085ae <TIM_Base_SetConfig+0xb2>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a29      	ldr	r2, [pc, #164]	@ (8008650 <TIM_Base_SetConfig+0x154>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d108      	bne.n	80085c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	4313      	orrs	r3, r2
 80085be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	689a      	ldr	r2, [r3, #8]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a10      	ldr	r2, [pc, #64]	@ (8008628 <TIM_Base_SetConfig+0x12c>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d003      	beq.n	80085f4 <TIM_Base_SetConfig+0xf8>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a12      	ldr	r2, [pc, #72]	@ (8008638 <TIM_Base_SetConfig+0x13c>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d103      	bne.n	80085fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	691a      	ldr	r2, [r3, #16]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b01      	cmp	r3, #1
 800860c:	d105      	bne.n	800861a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	f023 0201 	bic.w	r2, r3, #1
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	611a      	str	r2, [r3, #16]
  }
}
 800861a:	bf00      	nop
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	40010000 	.word	0x40010000
 800862c:	40000400 	.word	0x40000400
 8008630:	40000800 	.word	0x40000800
 8008634:	40000c00 	.word	0x40000c00
 8008638:	40010400 	.word	0x40010400
 800863c:	40014000 	.word	0x40014000
 8008640:	40014400 	.word	0x40014400
 8008644:	40014800 	.word	0x40014800
 8008648:	40001800 	.word	0x40001800
 800864c:	40001c00 	.word	0x40001c00
 8008650:	40002000 	.word	0x40002000

08008654 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008654:	b480      	push	{r7}
 8008656:	b087      	sub	sp, #28
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a1b      	ldr	r3, [r3, #32]
 8008668:	f023 0201 	bic.w	r2, r3, #1
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f023 0303 	bic.w	r3, r3, #3
 800868a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	4313      	orrs	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f023 0302 	bic.w	r3, r3, #2
 800869c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a20      	ldr	r2, [pc, #128]	@ (800872c <TIM_OC1_SetConfig+0xd8>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d003      	beq.n	80086b8 <TIM_OC1_SetConfig+0x64>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a1f      	ldr	r2, [pc, #124]	@ (8008730 <TIM_OC1_SetConfig+0xdc>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d10c      	bne.n	80086d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	f023 0308 	bic.w	r3, r3, #8
 80086be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f023 0304 	bic.w	r3, r3, #4
 80086d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a15      	ldr	r2, [pc, #84]	@ (800872c <TIM_OC1_SetConfig+0xd8>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d003      	beq.n	80086e2 <TIM_OC1_SetConfig+0x8e>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a14      	ldr	r2, [pc, #80]	@ (8008730 <TIM_OC1_SetConfig+0xdc>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d111      	bne.n	8008706 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80086f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	693a      	ldr	r2, [r7, #16]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	4313      	orrs	r3, r2
 8008704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	685a      	ldr	r2, [r3, #4]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	621a      	str	r2, [r3, #32]
}
 8008720:	bf00      	nop
 8008722:	371c      	adds	r7, #28
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	40010000 	.word	0x40010000
 8008730:	40010400 	.word	0x40010400

08008734 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008734:	b480      	push	{r7}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a1b      	ldr	r3, [r3, #32]
 8008742:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a1b      	ldr	r3, [r3, #32]
 8008748:	f023 0210 	bic.w	r2, r3, #16
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800876a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	021b      	lsls	r3, r3, #8
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	4313      	orrs	r3, r2
 8008776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	f023 0320 	bic.w	r3, r3, #32
 800877e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	011b      	lsls	r3, r3, #4
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	4313      	orrs	r3, r2
 800878a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a22      	ldr	r2, [pc, #136]	@ (8008818 <TIM_OC2_SetConfig+0xe4>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d003      	beq.n	800879c <TIM_OC2_SetConfig+0x68>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a21      	ldr	r2, [pc, #132]	@ (800881c <TIM_OC2_SetConfig+0xe8>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d10d      	bne.n	80087b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	011b      	lsls	r3, r3, #4
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a17      	ldr	r2, [pc, #92]	@ (8008818 <TIM_OC2_SetConfig+0xe4>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d003      	beq.n	80087c8 <TIM_OC2_SetConfig+0x94>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a16      	ldr	r2, [pc, #88]	@ (800881c <TIM_OC2_SetConfig+0xe8>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d113      	bne.n	80087f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80087ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80087d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	695b      	ldr	r3, [r3, #20]
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	693a      	ldr	r2, [r7, #16]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	693a      	ldr	r2, [r7, #16]
 80087f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	685a      	ldr	r2, [r3, #4]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	621a      	str	r2, [r3, #32]
}
 800880a:	bf00      	nop
 800880c:	371c      	adds	r7, #28
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	40010000 	.word	0x40010000
 800881c:	40010400 	.word	0x40010400

08008820 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008820:	b480      	push	{r7}
 8008822:	b087      	sub	sp, #28
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a1b      	ldr	r3, [r3, #32]
 8008834:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	69db      	ldr	r3, [r3, #28]
 8008846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800884e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f023 0303 	bic.w	r3, r3, #3
 8008856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	4313      	orrs	r3, r2
 8008860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	021b      	lsls	r3, r3, #8
 8008870:	697a      	ldr	r2, [r7, #20]
 8008872:	4313      	orrs	r3, r2
 8008874:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a21      	ldr	r2, [pc, #132]	@ (8008900 <TIM_OC3_SetConfig+0xe0>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d003      	beq.n	8008886 <TIM_OC3_SetConfig+0x66>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a20      	ldr	r2, [pc, #128]	@ (8008904 <TIM_OC3_SetConfig+0xe4>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d10d      	bne.n	80088a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800888c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	021b      	lsls	r3, r3, #8
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	4313      	orrs	r3, r2
 8008898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80088a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a16      	ldr	r2, [pc, #88]	@ (8008900 <TIM_OC3_SetConfig+0xe0>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d003      	beq.n	80088b2 <TIM_OC3_SetConfig+0x92>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a15      	ldr	r2, [pc, #84]	@ (8008904 <TIM_OC3_SetConfig+0xe4>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d113      	bne.n	80088da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80088c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	011b      	lsls	r3, r3, #4
 80088c8:	693a      	ldr	r2, [r7, #16]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	011b      	lsls	r3, r3, #4
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	685a      	ldr	r2, [r3, #4]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	621a      	str	r2, [r3, #32]
}
 80088f4:	bf00      	nop
 80088f6:	371c      	adds	r7, #28
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr
 8008900:	40010000 	.word	0x40010000
 8008904:	40010400 	.word	0x40010400

08008908 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008908:	b480      	push	{r7}
 800890a:	b087      	sub	sp, #28
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a1b      	ldr	r3, [r3, #32]
 8008916:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a1b      	ldr	r3, [r3, #32]
 800891c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800893e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	021b      	lsls	r3, r3, #8
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	4313      	orrs	r3, r2
 800894a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008952:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	031b      	lsls	r3, r3, #12
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	4313      	orrs	r3, r2
 800895e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a12      	ldr	r2, [pc, #72]	@ (80089ac <TIM_OC4_SetConfig+0xa4>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d003      	beq.n	8008970 <TIM_OC4_SetConfig+0x68>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a11      	ldr	r2, [pc, #68]	@ (80089b0 <TIM_OC4_SetConfig+0xa8>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d109      	bne.n	8008984 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008976:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	695b      	ldr	r3, [r3, #20]
 800897c:	019b      	lsls	r3, r3, #6
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	4313      	orrs	r3, r2
 8008982:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	685a      	ldr	r2, [r3, #4]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	693a      	ldr	r2, [r7, #16]
 800899c:	621a      	str	r2, [r3, #32]
}
 800899e:	bf00      	nop
 80089a0:	371c      	adds	r7, #28
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	40010000 	.word	0x40010000
 80089b0:	40010400 	.word	0x40010400

080089b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b087      	sub	sp, #28
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6a1b      	ldr	r3, [r3, #32]
 80089c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	f023 0201 	bic.w	r2, r3, #1
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	011b      	lsls	r3, r3, #4
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	f023 030a 	bic.w	r3, r3, #10
 80089f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089f2:	697a      	ldr	r2, [r7, #20]
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	697a      	ldr	r2, [r7, #20]
 8008a04:	621a      	str	r2, [r3, #32]
}
 8008a06:	bf00      	nop
 8008a08:	371c      	adds	r7, #28
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b087      	sub	sp, #28
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	60f8      	str	r0, [r7, #12]
 8008a1a:	60b9      	str	r1, [r7, #8]
 8008a1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6a1b      	ldr	r3, [r3, #32]
 8008a22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6a1b      	ldr	r3, [r3, #32]
 8008a28:	f023 0210 	bic.w	r2, r3, #16
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	031b      	lsls	r3, r3, #12
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	011b      	lsls	r3, r3, #4
 8008a54:	697a      	ldr	r2, [r7, #20]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	621a      	str	r2, [r3, #32]
}
 8008a66:	bf00      	nop
 8008a68:	371c      	adds	r7, #28
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a72:	b480      	push	{r7}
 8008a74:	b085      	sub	sp, #20
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a8a:	683a      	ldr	r2, [r7, #0]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	f043 0307 	orr.w	r3, r3, #7
 8008a94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	609a      	str	r2, [r3, #8]
}
 8008a9c:	bf00      	nop
 8008a9e:	3714      	adds	r7, #20
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b087      	sub	sp, #28
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
 8008ab4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ac2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	021a      	lsls	r2, r3, #8
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	431a      	orrs	r2, r3
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	609a      	str	r2, [r3, #8]
}
 8008adc:	bf00      	nop
 8008ade:	371c      	adds	r7, #28
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b087      	sub	sp, #28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	f003 031f 	and.w	r3, r3, #31
 8008afa:	2201      	movs	r2, #1
 8008afc:	fa02 f303 	lsl.w	r3, r2, r3
 8008b00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6a1a      	ldr	r2, [r3, #32]
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	43db      	mvns	r3, r3
 8008b0a:	401a      	ands	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6a1a      	ldr	r2, [r3, #32]
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	f003 031f 	and.w	r3, r3, #31
 8008b1a:	6879      	ldr	r1, [r7, #4]
 8008b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b20:	431a      	orrs	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	621a      	str	r2, [r3, #32]
}
 8008b26:	bf00      	nop
 8008b28:	371c      	adds	r7, #28
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
	...

08008b34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d101      	bne.n	8008b4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b48:	2302      	movs	r3, #2
 8008b4a:	e05a      	b.n	8008c02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2202      	movs	r2, #2
 8008b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a21      	ldr	r2, [pc, #132]	@ (8008c10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d022      	beq.n	8008bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b98:	d01d      	beq.n	8008bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8008c14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d018      	beq.n	8008bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8008c18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d013      	beq.n	8008bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a1a      	ldr	r2, [pc, #104]	@ (8008c1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d00e      	beq.n	8008bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a18      	ldr	r2, [pc, #96]	@ (8008c20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d009      	beq.n	8008bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a17      	ldr	r2, [pc, #92]	@ (8008c24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d004      	beq.n	8008bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a15      	ldr	r2, [pc, #84]	@ (8008c28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d10c      	bne.n	8008bf0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	68ba      	ldr	r2, [r7, #8]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3714      	adds	r7, #20
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	40010000 	.word	0x40010000
 8008c14:	40000400 	.word	0x40000400
 8008c18:	40000800 	.word	0x40000800
 8008c1c:	40000c00 	.word	0x40000c00
 8008c20:	40010400 	.word	0x40010400
 8008c24:	40014000 	.word	0x40014000
 8008c28:	40001800 	.word	0x40001800

08008c2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <memset>:
 8008c54:	4402      	add	r2, r0
 8008c56:	4603      	mov	r3, r0
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d100      	bne.n	8008c5e <memset+0xa>
 8008c5c:	4770      	bx	lr
 8008c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c62:	e7f9      	b.n	8008c58 <memset+0x4>

08008c64 <__errno>:
 8008c64:	4b01      	ldr	r3, [pc, #4]	@ (8008c6c <__errno+0x8>)
 8008c66:	6818      	ldr	r0, [r3, #0]
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	20000038 	.word	0x20000038

08008c70 <__libc_init_array>:
 8008c70:	b570      	push	{r4, r5, r6, lr}
 8008c72:	4d0d      	ldr	r5, [pc, #52]	@ (8008ca8 <__libc_init_array+0x38>)
 8008c74:	4c0d      	ldr	r4, [pc, #52]	@ (8008cac <__libc_init_array+0x3c>)
 8008c76:	1b64      	subs	r4, r4, r5
 8008c78:	10a4      	asrs	r4, r4, #2
 8008c7a:	2600      	movs	r6, #0
 8008c7c:	42a6      	cmp	r6, r4
 8008c7e:	d109      	bne.n	8008c94 <__libc_init_array+0x24>
 8008c80:	4d0b      	ldr	r5, [pc, #44]	@ (8008cb0 <__libc_init_array+0x40>)
 8008c82:	4c0c      	ldr	r4, [pc, #48]	@ (8008cb4 <__libc_init_array+0x44>)
 8008c84:	f001 fdd8 	bl	800a838 <_init>
 8008c88:	1b64      	subs	r4, r4, r5
 8008c8a:	10a4      	asrs	r4, r4, #2
 8008c8c:	2600      	movs	r6, #0
 8008c8e:	42a6      	cmp	r6, r4
 8008c90:	d105      	bne.n	8008c9e <__libc_init_array+0x2e>
 8008c92:	bd70      	pop	{r4, r5, r6, pc}
 8008c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c98:	4798      	blx	r3
 8008c9a:	3601      	adds	r6, #1
 8008c9c:	e7ee      	b.n	8008c7c <__libc_init_array+0xc>
 8008c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ca2:	4798      	blx	r3
 8008ca4:	3601      	adds	r6, #1
 8008ca6:	e7f2      	b.n	8008c8e <__libc_init_array+0x1e>
 8008ca8:	0800aa80 	.word	0x0800aa80
 8008cac:	0800aa80 	.word	0x0800aa80
 8008cb0:	0800aa80 	.word	0x0800aa80
 8008cb4:	0800aa84 	.word	0x0800aa84

08008cb8 <memcpy>:
 8008cb8:	440a      	add	r2, r1
 8008cba:	4291      	cmp	r1, r2
 8008cbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cc0:	d100      	bne.n	8008cc4 <memcpy+0xc>
 8008cc2:	4770      	bx	lr
 8008cc4:	b510      	push	{r4, lr}
 8008cc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cce:	4291      	cmp	r1, r2
 8008cd0:	d1f9      	bne.n	8008cc6 <memcpy+0xe>
 8008cd2:	bd10      	pop	{r4, pc}

08008cd4 <acos>:
 8008cd4:	b538      	push	{r3, r4, r5, lr}
 8008cd6:	ed2d 8b02 	vpush	{d8}
 8008cda:	ec55 4b10 	vmov	r4, r5, d0
 8008cde:	f000 fa6b 	bl	80091b8 <__ieee754_acos>
 8008ce2:	4622      	mov	r2, r4
 8008ce4:	462b      	mov	r3, r5
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	4629      	mov	r1, r5
 8008cea:	eeb0 8a40 	vmov.f32	s16, s0
 8008cee:	eef0 8a60 	vmov.f32	s17, s1
 8008cf2:	f7f7 febf 	bl	8000a74 <__aeabi_dcmpun>
 8008cf6:	b9a8      	cbnz	r0, 8008d24 <acos+0x50>
 8008cf8:	ec45 4b10 	vmov	d0, r4, r5
 8008cfc:	f000 f868 	bl	8008dd0 <fabs>
 8008d00:	4b0c      	ldr	r3, [pc, #48]	@ (8008d34 <acos+0x60>)
 8008d02:	ec51 0b10 	vmov	r0, r1, d0
 8008d06:	2200      	movs	r2, #0
 8008d08:	f7f7 feaa 	bl	8000a60 <__aeabi_dcmpgt>
 8008d0c:	b150      	cbz	r0, 8008d24 <acos+0x50>
 8008d0e:	f7ff ffa9 	bl	8008c64 <__errno>
 8008d12:	ecbd 8b02 	vpop	{d8}
 8008d16:	2321      	movs	r3, #33	@ 0x21
 8008d18:	6003      	str	r3, [r0, #0]
 8008d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d1e:	4806      	ldr	r0, [pc, #24]	@ (8008d38 <acos+0x64>)
 8008d20:	f000 b8be 	b.w	8008ea0 <nan>
 8008d24:	eeb0 0a48 	vmov.f32	s0, s16
 8008d28:	eef0 0a68 	vmov.f32	s1, s17
 8008d2c:	ecbd 8b02 	vpop	{d8}
 8008d30:	bd38      	pop	{r3, r4, r5, pc}
 8008d32:	bf00      	nop
 8008d34:	3ff00000 	.word	0x3ff00000
 8008d38:	0800a868 	.word	0x0800a868
 8008d3c:	00000000 	.word	0x00000000

08008d40 <exp>:
 8008d40:	b538      	push	{r3, r4, r5, lr}
 8008d42:	ed2d 8b02 	vpush	{d8}
 8008d46:	ec55 4b10 	vmov	r4, r5, d0
 8008d4a:	f000 fc91 	bl	8009670 <__ieee754_exp>
 8008d4e:	eeb0 8a40 	vmov.f32	s16, s0
 8008d52:	eef0 8a60 	vmov.f32	s17, s1
 8008d56:	ec45 4b10 	vmov	d0, r4, r5
 8008d5a:	f000 f895 	bl	8008e88 <finite>
 8008d5e:	b168      	cbz	r0, 8008d7c <exp+0x3c>
 8008d60:	a317      	add	r3, pc, #92	@ (adr r3, 8008dc0 <exp+0x80>)
 8008d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d66:	4620      	mov	r0, r4
 8008d68:	4629      	mov	r1, r5
 8008d6a:	f7f7 fe79 	bl	8000a60 <__aeabi_dcmpgt>
 8008d6e:	b160      	cbz	r0, 8008d8a <exp+0x4a>
 8008d70:	f7ff ff78 	bl	8008c64 <__errno>
 8008d74:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 8008db0 <exp+0x70>
 8008d78:	2322      	movs	r3, #34	@ 0x22
 8008d7a:	6003      	str	r3, [r0, #0]
 8008d7c:	eeb0 0a48 	vmov.f32	s0, s16
 8008d80:	eef0 0a68 	vmov.f32	s1, s17
 8008d84:	ecbd 8b02 	vpop	{d8}
 8008d88:	bd38      	pop	{r3, r4, r5, pc}
 8008d8a:	a30f      	add	r3, pc, #60	@ (adr r3, 8008dc8 <exp+0x88>)
 8008d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d90:	4620      	mov	r0, r4
 8008d92:	4629      	mov	r1, r5
 8008d94:	f7f7 fe46 	bl	8000a24 <__aeabi_dcmplt>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d0ef      	beq.n	8008d7c <exp+0x3c>
 8008d9c:	f7ff ff62 	bl	8008c64 <__errno>
 8008da0:	2322      	movs	r3, #34	@ 0x22
 8008da2:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 8008db8 <exp+0x78>
 8008da6:	6003      	str	r3, [r0, #0]
 8008da8:	e7e8      	b.n	8008d7c <exp+0x3c>
 8008daa:	bf00      	nop
 8008dac:	f3af 8000 	nop.w
 8008db0:	00000000 	.word	0x00000000
 8008db4:	7ff00000 	.word	0x7ff00000
	...
 8008dc0:	fefa39ef 	.word	0xfefa39ef
 8008dc4:	40862e42 	.word	0x40862e42
 8008dc8:	d52d3051 	.word	0xd52d3051
 8008dcc:	c0874910 	.word	0xc0874910

08008dd0 <fabs>:
 8008dd0:	ec51 0b10 	vmov	r0, r1, d0
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008dda:	ec43 2b10 	vmov	d0, r2, r3
 8008dde:	4770      	bx	lr

08008de0 <sin>:
 8008de0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008de2:	ec53 2b10 	vmov	r2, r3, d0
 8008de6:	4826      	ldr	r0, [pc, #152]	@ (8008e80 <sin+0xa0>)
 8008de8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008dec:	4281      	cmp	r1, r0
 8008dee:	d807      	bhi.n	8008e00 <sin+0x20>
 8008df0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008e78 <sin+0x98>
 8008df4:	2000      	movs	r0, #0
 8008df6:	b005      	add	sp, #20
 8008df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dfc:	f000 b920 	b.w	8009040 <__kernel_sin>
 8008e00:	4820      	ldr	r0, [pc, #128]	@ (8008e84 <sin+0xa4>)
 8008e02:	4281      	cmp	r1, r0
 8008e04:	d908      	bls.n	8008e18 <sin+0x38>
 8008e06:	4610      	mov	r0, r2
 8008e08:	4619      	mov	r1, r3
 8008e0a:	f7f7 f9e1 	bl	80001d0 <__aeabi_dsub>
 8008e0e:	ec41 0b10 	vmov	d0, r0, r1
 8008e12:	b005      	add	sp, #20
 8008e14:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e18:	4668      	mov	r0, sp
 8008e1a:	f000 fda5 	bl	8009968 <__ieee754_rem_pio2>
 8008e1e:	f000 0003 	and.w	r0, r0, #3
 8008e22:	2801      	cmp	r0, #1
 8008e24:	d00c      	beq.n	8008e40 <sin+0x60>
 8008e26:	2802      	cmp	r0, #2
 8008e28:	d011      	beq.n	8008e4e <sin+0x6e>
 8008e2a:	b9e8      	cbnz	r0, 8008e68 <sin+0x88>
 8008e2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008e30:	ed9d 0b00 	vldr	d0, [sp]
 8008e34:	2001      	movs	r0, #1
 8008e36:	f000 f903 	bl	8009040 <__kernel_sin>
 8008e3a:	ec51 0b10 	vmov	r0, r1, d0
 8008e3e:	e7e6      	b.n	8008e0e <sin+0x2e>
 8008e40:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008e44:	ed9d 0b00 	vldr	d0, [sp]
 8008e48:	f000 f832 	bl	8008eb0 <__kernel_cos>
 8008e4c:	e7f5      	b.n	8008e3a <sin+0x5a>
 8008e4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008e52:	ed9d 0b00 	vldr	d0, [sp]
 8008e56:	2001      	movs	r0, #1
 8008e58:	f000 f8f2 	bl	8009040 <__kernel_sin>
 8008e5c:	ec53 2b10 	vmov	r2, r3, d0
 8008e60:	4610      	mov	r0, r2
 8008e62:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008e66:	e7d2      	b.n	8008e0e <sin+0x2e>
 8008e68:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008e6c:	ed9d 0b00 	vldr	d0, [sp]
 8008e70:	f000 f81e 	bl	8008eb0 <__kernel_cos>
 8008e74:	e7f2      	b.n	8008e5c <sin+0x7c>
 8008e76:	bf00      	nop
	...
 8008e80:	3fe921fb 	.word	0x3fe921fb
 8008e84:	7fefffff 	.word	0x7fefffff

08008e88 <finite>:
 8008e88:	b082      	sub	sp, #8
 8008e8a:	ed8d 0b00 	vstr	d0, [sp]
 8008e8e:	9801      	ldr	r0, [sp, #4]
 8008e90:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8008e94:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008e98:	0fc0      	lsrs	r0, r0, #31
 8008e9a:	b002      	add	sp, #8
 8008e9c:	4770      	bx	lr
	...

08008ea0 <nan>:
 8008ea0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008ea8 <nan+0x8>
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	00000000 	.word	0x00000000
 8008eac:	7ff80000 	.word	0x7ff80000

08008eb0 <__kernel_cos>:
 8008eb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb4:	ec57 6b10 	vmov	r6, r7, d0
 8008eb8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008ebc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8008ec0:	ed8d 1b00 	vstr	d1, [sp]
 8008ec4:	d206      	bcs.n	8008ed4 <__kernel_cos+0x24>
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	4639      	mov	r1, r7
 8008eca:	f7f7 fde9 	bl	8000aa0 <__aeabi_d2iz>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	f000 8088 	beq.w	8008fe4 <__kernel_cos+0x134>
 8008ed4:	4632      	mov	r2, r6
 8008ed6:	463b      	mov	r3, r7
 8008ed8:	4630      	mov	r0, r6
 8008eda:	4639      	mov	r1, r7
 8008edc:	f7f7 fb30 	bl	8000540 <__aeabi_dmul>
 8008ee0:	4b51      	ldr	r3, [pc, #324]	@ (8009028 <__kernel_cos+0x178>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	460d      	mov	r5, r1
 8008ee8:	f7f7 fb2a 	bl	8000540 <__aeabi_dmul>
 8008eec:	a340      	add	r3, pc, #256	@ (adr r3, 8008ff0 <__kernel_cos+0x140>)
 8008eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef2:	4682      	mov	sl, r0
 8008ef4:	468b      	mov	fp, r1
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	4629      	mov	r1, r5
 8008efa:	f7f7 fb21 	bl	8000540 <__aeabi_dmul>
 8008efe:	a33e      	add	r3, pc, #248	@ (adr r3, 8008ff8 <__kernel_cos+0x148>)
 8008f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f04:	f7f7 f966 	bl	80001d4 <__adddf3>
 8008f08:	4622      	mov	r2, r4
 8008f0a:	462b      	mov	r3, r5
 8008f0c:	f7f7 fb18 	bl	8000540 <__aeabi_dmul>
 8008f10:	a33b      	add	r3, pc, #236	@ (adr r3, 8009000 <__kernel_cos+0x150>)
 8008f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f16:	f7f7 f95b 	bl	80001d0 <__aeabi_dsub>
 8008f1a:	4622      	mov	r2, r4
 8008f1c:	462b      	mov	r3, r5
 8008f1e:	f7f7 fb0f 	bl	8000540 <__aeabi_dmul>
 8008f22:	a339      	add	r3, pc, #228	@ (adr r3, 8009008 <__kernel_cos+0x158>)
 8008f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f28:	f7f7 f954 	bl	80001d4 <__adddf3>
 8008f2c:	4622      	mov	r2, r4
 8008f2e:	462b      	mov	r3, r5
 8008f30:	f7f7 fb06 	bl	8000540 <__aeabi_dmul>
 8008f34:	a336      	add	r3, pc, #216	@ (adr r3, 8009010 <__kernel_cos+0x160>)
 8008f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3a:	f7f7 f949 	bl	80001d0 <__aeabi_dsub>
 8008f3e:	4622      	mov	r2, r4
 8008f40:	462b      	mov	r3, r5
 8008f42:	f7f7 fafd 	bl	8000540 <__aeabi_dmul>
 8008f46:	a334      	add	r3, pc, #208	@ (adr r3, 8009018 <__kernel_cos+0x168>)
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	f7f7 f942 	bl	80001d4 <__adddf3>
 8008f50:	4622      	mov	r2, r4
 8008f52:	462b      	mov	r3, r5
 8008f54:	f7f7 faf4 	bl	8000540 <__aeabi_dmul>
 8008f58:	4622      	mov	r2, r4
 8008f5a:	462b      	mov	r3, r5
 8008f5c:	f7f7 faf0 	bl	8000540 <__aeabi_dmul>
 8008f60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f64:	4604      	mov	r4, r0
 8008f66:	460d      	mov	r5, r1
 8008f68:	4630      	mov	r0, r6
 8008f6a:	4639      	mov	r1, r7
 8008f6c:	f7f7 fae8 	bl	8000540 <__aeabi_dmul>
 8008f70:	460b      	mov	r3, r1
 8008f72:	4602      	mov	r2, r0
 8008f74:	4629      	mov	r1, r5
 8008f76:	4620      	mov	r0, r4
 8008f78:	f7f7 f92a 	bl	80001d0 <__aeabi_dsub>
 8008f7c:	4b2b      	ldr	r3, [pc, #172]	@ (800902c <__kernel_cos+0x17c>)
 8008f7e:	4598      	cmp	r8, r3
 8008f80:	4606      	mov	r6, r0
 8008f82:	460f      	mov	r7, r1
 8008f84:	d810      	bhi.n	8008fa8 <__kernel_cos+0xf8>
 8008f86:	4602      	mov	r2, r0
 8008f88:	460b      	mov	r3, r1
 8008f8a:	4650      	mov	r0, sl
 8008f8c:	4659      	mov	r1, fp
 8008f8e:	f7f7 f91f 	bl	80001d0 <__aeabi_dsub>
 8008f92:	460b      	mov	r3, r1
 8008f94:	4926      	ldr	r1, [pc, #152]	@ (8009030 <__kernel_cos+0x180>)
 8008f96:	4602      	mov	r2, r0
 8008f98:	2000      	movs	r0, #0
 8008f9a:	f7f7 f919 	bl	80001d0 <__aeabi_dsub>
 8008f9e:	ec41 0b10 	vmov	d0, r0, r1
 8008fa2:	b003      	add	sp, #12
 8008fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa8:	4b22      	ldr	r3, [pc, #136]	@ (8009034 <__kernel_cos+0x184>)
 8008faa:	4921      	ldr	r1, [pc, #132]	@ (8009030 <__kernel_cos+0x180>)
 8008fac:	4598      	cmp	r8, r3
 8008fae:	bf8c      	ite	hi
 8008fb0:	4d21      	ldrhi	r5, [pc, #132]	@ (8009038 <__kernel_cos+0x188>)
 8008fb2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8008fb6:	2400      	movs	r4, #0
 8008fb8:	4622      	mov	r2, r4
 8008fba:	462b      	mov	r3, r5
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	f7f7 f907 	bl	80001d0 <__aeabi_dsub>
 8008fc2:	4622      	mov	r2, r4
 8008fc4:	4680      	mov	r8, r0
 8008fc6:	4689      	mov	r9, r1
 8008fc8:	462b      	mov	r3, r5
 8008fca:	4650      	mov	r0, sl
 8008fcc:	4659      	mov	r1, fp
 8008fce:	f7f7 f8ff 	bl	80001d0 <__aeabi_dsub>
 8008fd2:	4632      	mov	r2, r6
 8008fd4:	463b      	mov	r3, r7
 8008fd6:	f7f7 f8fb 	bl	80001d0 <__aeabi_dsub>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	4640      	mov	r0, r8
 8008fe0:	4649      	mov	r1, r9
 8008fe2:	e7da      	b.n	8008f9a <__kernel_cos+0xea>
 8008fe4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8009020 <__kernel_cos+0x170>
 8008fe8:	e7db      	b.n	8008fa2 <__kernel_cos+0xf2>
 8008fea:	bf00      	nop
 8008fec:	f3af 8000 	nop.w
 8008ff0:	be8838d4 	.word	0xbe8838d4
 8008ff4:	bda8fae9 	.word	0xbda8fae9
 8008ff8:	bdb4b1c4 	.word	0xbdb4b1c4
 8008ffc:	3e21ee9e 	.word	0x3e21ee9e
 8009000:	809c52ad 	.word	0x809c52ad
 8009004:	3e927e4f 	.word	0x3e927e4f
 8009008:	19cb1590 	.word	0x19cb1590
 800900c:	3efa01a0 	.word	0x3efa01a0
 8009010:	16c15177 	.word	0x16c15177
 8009014:	3f56c16c 	.word	0x3f56c16c
 8009018:	5555554c 	.word	0x5555554c
 800901c:	3fa55555 	.word	0x3fa55555
 8009020:	00000000 	.word	0x00000000
 8009024:	3ff00000 	.word	0x3ff00000
 8009028:	3fe00000 	.word	0x3fe00000
 800902c:	3fd33332 	.word	0x3fd33332
 8009030:	3ff00000 	.word	0x3ff00000
 8009034:	3fe90000 	.word	0x3fe90000
 8009038:	3fd20000 	.word	0x3fd20000
 800903c:	00000000 	.word	0x00000000

08009040 <__kernel_sin>:
 8009040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	ec55 4b10 	vmov	r4, r5, d0
 8009048:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800904c:	b085      	sub	sp, #20
 800904e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8009052:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009056:	4680      	mov	r8, r0
 8009058:	d205      	bcs.n	8009066 <__kernel_sin+0x26>
 800905a:	4620      	mov	r0, r4
 800905c:	4629      	mov	r1, r5
 800905e:	f7f7 fd1f 	bl	8000aa0 <__aeabi_d2iz>
 8009062:	2800      	cmp	r0, #0
 8009064:	d052      	beq.n	800910c <__kernel_sin+0xcc>
 8009066:	4622      	mov	r2, r4
 8009068:	462b      	mov	r3, r5
 800906a:	4620      	mov	r0, r4
 800906c:	4629      	mov	r1, r5
 800906e:	f7f7 fa67 	bl	8000540 <__aeabi_dmul>
 8009072:	4682      	mov	sl, r0
 8009074:	468b      	mov	fp, r1
 8009076:	4602      	mov	r2, r0
 8009078:	460b      	mov	r3, r1
 800907a:	4620      	mov	r0, r4
 800907c:	4629      	mov	r1, r5
 800907e:	f7f7 fa5f 	bl	8000540 <__aeabi_dmul>
 8009082:	a342      	add	r3, pc, #264	@ (adr r3, 800918c <__kernel_sin+0x14c>)
 8009084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009088:	e9cd 0100 	strd	r0, r1, [sp]
 800908c:	4650      	mov	r0, sl
 800908e:	4659      	mov	r1, fp
 8009090:	f7f7 fa56 	bl	8000540 <__aeabi_dmul>
 8009094:	a33f      	add	r3, pc, #252	@ (adr r3, 8009194 <__kernel_sin+0x154>)
 8009096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909a:	f7f7 f899 	bl	80001d0 <__aeabi_dsub>
 800909e:	4652      	mov	r2, sl
 80090a0:	465b      	mov	r3, fp
 80090a2:	f7f7 fa4d 	bl	8000540 <__aeabi_dmul>
 80090a6:	a33d      	add	r3, pc, #244	@ (adr r3, 800919c <__kernel_sin+0x15c>)
 80090a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ac:	f7f7 f892 	bl	80001d4 <__adddf3>
 80090b0:	4652      	mov	r2, sl
 80090b2:	465b      	mov	r3, fp
 80090b4:	f7f7 fa44 	bl	8000540 <__aeabi_dmul>
 80090b8:	a33a      	add	r3, pc, #232	@ (adr r3, 80091a4 <__kernel_sin+0x164>)
 80090ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090be:	f7f7 f887 	bl	80001d0 <__aeabi_dsub>
 80090c2:	4652      	mov	r2, sl
 80090c4:	465b      	mov	r3, fp
 80090c6:	f7f7 fa3b 	bl	8000540 <__aeabi_dmul>
 80090ca:	a338      	add	r3, pc, #224	@ (adr r3, 80091ac <__kernel_sin+0x16c>)
 80090cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d0:	f7f7 f880 	bl	80001d4 <__adddf3>
 80090d4:	4606      	mov	r6, r0
 80090d6:	460f      	mov	r7, r1
 80090d8:	f1b8 0f00 	cmp.w	r8, #0
 80090dc:	d11b      	bne.n	8009116 <__kernel_sin+0xd6>
 80090de:	4602      	mov	r2, r0
 80090e0:	460b      	mov	r3, r1
 80090e2:	4650      	mov	r0, sl
 80090e4:	4659      	mov	r1, fp
 80090e6:	f7f7 fa2b 	bl	8000540 <__aeabi_dmul>
 80090ea:	a325      	add	r3, pc, #148	@ (adr r3, 8009180 <__kernel_sin+0x140>)
 80090ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f0:	f7f7 f86e 	bl	80001d0 <__aeabi_dsub>
 80090f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090f8:	f7f7 fa22 	bl	8000540 <__aeabi_dmul>
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	4620      	mov	r0, r4
 8009102:	4629      	mov	r1, r5
 8009104:	f7f7 f866 	bl	80001d4 <__adddf3>
 8009108:	4604      	mov	r4, r0
 800910a:	460d      	mov	r5, r1
 800910c:	ec45 4b10 	vmov	d0, r4, r5
 8009110:	b005      	add	sp, #20
 8009112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800911a:	4b1b      	ldr	r3, [pc, #108]	@ (8009188 <__kernel_sin+0x148>)
 800911c:	2200      	movs	r2, #0
 800911e:	f7f7 fa0f 	bl	8000540 <__aeabi_dmul>
 8009122:	4632      	mov	r2, r6
 8009124:	4680      	mov	r8, r0
 8009126:	4689      	mov	r9, r1
 8009128:	463b      	mov	r3, r7
 800912a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800912e:	f7f7 fa07 	bl	8000540 <__aeabi_dmul>
 8009132:	4602      	mov	r2, r0
 8009134:	460b      	mov	r3, r1
 8009136:	4640      	mov	r0, r8
 8009138:	4649      	mov	r1, r9
 800913a:	f7f7 f849 	bl	80001d0 <__aeabi_dsub>
 800913e:	4652      	mov	r2, sl
 8009140:	465b      	mov	r3, fp
 8009142:	f7f7 f9fd 	bl	8000540 <__aeabi_dmul>
 8009146:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800914a:	f7f7 f841 	bl	80001d0 <__aeabi_dsub>
 800914e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009180 <__kernel_sin+0x140>)
 8009150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009154:	4606      	mov	r6, r0
 8009156:	460f      	mov	r7, r1
 8009158:	e9dd 0100 	ldrd	r0, r1, [sp]
 800915c:	f7f7 f9f0 	bl	8000540 <__aeabi_dmul>
 8009160:	4602      	mov	r2, r0
 8009162:	460b      	mov	r3, r1
 8009164:	4630      	mov	r0, r6
 8009166:	4639      	mov	r1, r7
 8009168:	f7f7 f834 	bl	80001d4 <__adddf3>
 800916c:	4602      	mov	r2, r0
 800916e:	460b      	mov	r3, r1
 8009170:	4620      	mov	r0, r4
 8009172:	4629      	mov	r1, r5
 8009174:	f7f7 f82c 	bl	80001d0 <__aeabi_dsub>
 8009178:	e7c6      	b.n	8009108 <__kernel_sin+0xc8>
 800917a:	bf00      	nop
 800917c:	f3af 8000 	nop.w
 8009180:	55555549 	.word	0x55555549
 8009184:	3fc55555 	.word	0x3fc55555
 8009188:	3fe00000 	.word	0x3fe00000
 800918c:	5acfd57c 	.word	0x5acfd57c
 8009190:	3de5d93a 	.word	0x3de5d93a
 8009194:	8a2b9ceb 	.word	0x8a2b9ceb
 8009198:	3e5ae5e6 	.word	0x3e5ae5e6
 800919c:	57b1fe7d 	.word	0x57b1fe7d
 80091a0:	3ec71de3 	.word	0x3ec71de3
 80091a4:	19c161d5 	.word	0x19c161d5
 80091a8:	3f2a01a0 	.word	0x3f2a01a0
 80091ac:	1110f8a6 	.word	0x1110f8a6
 80091b0:	3f811111 	.word	0x3f811111
 80091b4:	00000000 	.word	0x00000000

080091b8 <__ieee754_acos>:
 80091b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091bc:	ec55 4b10 	vmov	r4, r5, d0
 80091c0:	49b7      	ldr	r1, [pc, #732]	@ (80094a0 <__ieee754_acos+0x2e8>)
 80091c2:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80091c6:	428b      	cmp	r3, r1
 80091c8:	d919      	bls.n	80091fe <__ieee754_acos+0x46>
 80091ca:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 80091ce:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80091d2:	4323      	orrs	r3, r4
 80091d4:	d106      	bne.n	80091e4 <__ieee754_acos+0x2c>
 80091d6:	2d00      	cmp	r5, #0
 80091d8:	f340 8210 	ble.w	80095fc <__ieee754_acos+0x444>
 80091dc:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8009430 <__ieee754_acos+0x278>
 80091e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091e4:	4622      	mov	r2, r4
 80091e6:	462b      	mov	r3, r5
 80091e8:	4620      	mov	r0, r4
 80091ea:	4629      	mov	r1, r5
 80091ec:	f7f6 fff0 	bl	80001d0 <__aeabi_dsub>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	f7f7 face 	bl	8000794 <__aeabi_ddiv>
 80091f8:	ec41 0b10 	vmov	d0, r0, r1
 80091fc:	e7f0      	b.n	80091e0 <__ieee754_acos+0x28>
 80091fe:	49a9      	ldr	r1, [pc, #676]	@ (80094a4 <__ieee754_acos+0x2ec>)
 8009200:	428b      	cmp	r3, r1
 8009202:	f200 8085 	bhi.w	8009310 <__ieee754_acos+0x158>
 8009206:	4aa8      	ldr	r2, [pc, #672]	@ (80094a8 <__ieee754_acos+0x2f0>)
 8009208:	4293      	cmp	r3, r2
 800920a:	f240 81fa 	bls.w	8009602 <__ieee754_acos+0x44a>
 800920e:	4622      	mov	r2, r4
 8009210:	462b      	mov	r3, r5
 8009212:	4620      	mov	r0, r4
 8009214:	4629      	mov	r1, r5
 8009216:	f7f7 f993 	bl	8000540 <__aeabi_dmul>
 800921a:	a387      	add	r3, pc, #540	@ (adr r3, 8009438 <__ieee754_acos+0x280>)
 800921c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009220:	4606      	mov	r6, r0
 8009222:	460f      	mov	r7, r1
 8009224:	f7f7 f98c 	bl	8000540 <__aeabi_dmul>
 8009228:	a385      	add	r3, pc, #532	@ (adr r3, 8009440 <__ieee754_acos+0x288>)
 800922a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922e:	f7f6 ffd1 	bl	80001d4 <__adddf3>
 8009232:	4632      	mov	r2, r6
 8009234:	463b      	mov	r3, r7
 8009236:	f7f7 f983 	bl	8000540 <__aeabi_dmul>
 800923a:	a383      	add	r3, pc, #524	@ (adr r3, 8009448 <__ieee754_acos+0x290>)
 800923c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009240:	f7f6 ffc6 	bl	80001d0 <__aeabi_dsub>
 8009244:	4632      	mov	r2, r6
 8009246:	463b      	mov	r3, r7
 8009248:	f7f7 f97a 	bl	8000540 <__aeabi_dmul>
 800924c:	a380      	add	r3, pc, #512	@ (adr r3, 8009450 <__ieee754_acos+0x298>)
 800924e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009252:	f7f6 ffbf 	bl	80001d4 <__adddf3>
 8009256:	4632      	mov	r2, r6
 8009258:	463b      	mov	r3, r7
 800925a:	f7f7 f971 	bl	8000540 <__aeabi_dmul>
 800925e:	a37e      	add	r3, pc, #504	@ (adr r3, 8009458 <__ieee754_acos+0x2a0>)
 8009260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009264:	f7f6 ffb4 	bl	80001d0 <__aeabi_dsub>
 8009268:	4632      	mov	r2, r6
 800926a:	463b      	mov	r3, r7
 800926c:	f7f7 f968 	bl	8000540 <__aeabi_dmul>
 8009270:	a37b      	add	r3, pc, #492	@ (adr r3, 8009460 <__ieee754_acos+0x2a8>)
 8009272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009276:	f7f6 ffad 	bl	80001d4 <__adddf3>
 800927a:	4632      	mov	r2, r6
 800927c:	463b      	mov	r3, r7
 800927e:	f7f7 f95f 	bl	8000540 <__aeabi_dmul>
 8009282:	a379      	add	r3, pc, #484	@ (adr r3, 8009468 <__ieee754_acos+0x2b0>)
 8009284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009288:	4680      	mov	r8, r0
 800928a:	4689      	mov	r9, r1
 800928c:	4630      	mov	r0, r6
 800928e:	4639      	mov	r1, r7
 8009290:	f7f7 f956 	bl	8000540 <__aeabi_dmul>
 8009294:	a376      	add	r3, pc, #472	@ (adr r3, 8009470 <__ieee754_acos+0x2b8>)
 8009296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929a:	f7f6 ff99 	bl	80001d0 <__aeabi_dsub>
 800929e:	4632      	mov	r2, r6
 80092a0:	463b      	mov	r3, r7
 80092a2:	f7f7 f94d 	bl	8000540 <__aeabi_dmul>
 80092a6:	a374      	add	r3, pc, #464	@ (adr r3, 8009478 <__ieee754_acos+0x2c0>)
 80092a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ac:	f7f6 ff92 	bl	80001d4 <__adddf3>
 80092b0:	4632      	mov	r2, r6
 80092b2:	463b      	mov	r3, r7
 80092b4:	f7f7 f944 	bl	8000540 <__aeabi_dmul>
 80092b8:	a371      	add	r3, pc, #452	@ (adr r3, 8009480 <__ieee754_acos+0x2c8>)
 80092ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092be:	f7f6 ff87 	bl	80001d0 <__aeabi_dsub>
 80092c2:	4632      	mov	r2, r6
 80092c4:	463b      	mov	r3, r7
 80092c6:	f7f7 f93b 	bl	8000540 <__aeabi_dmul>
 80092ca:	4b78      	ldr	r3, [pc, #480]	@ (80094ac <__ieee754_acos+0x2f4>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	f7f6 ff81 	bl	80001d4 <__adddf3>
 80092d2:	4602      	mov	r2, r0
 80092d4:	460b      	mov	r3, r1
 80092d6:	4640      	mov	r0, r8
 80092d8:	4649      	mov	r1, r9
 80092da:	f7f7 fa5b 	bl	8000794 <__aeabi_ddiv>
 80092de:	4622      	mov	r2, r4
 80092e0:	462b      	mov	r3, r5
 80092e2:	f7f7 f92d 	bl	8000540 <__aeabi_dmul>
 80092e6:	4602      	mov	r2, r0
 80092e8:	460b      	mov	r3, r1
 80092ea:	a167      	add	r1, pc, #412	@ (adr r1, 8009488 <__ieee754_acos+0x2d0>)
 80092ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092f0:	f7f6 ff6e 	bl	80001d0 <__aeabi_dsub>
 80092f4:	4602      	mov	r2, r0
 80092f6:	460b      	mov	r3, r1
 80092f8:	4620      	mov	r0, r4
 80092fa:	4629      	mov	r1, r5
 80092fc:	f7f6 ff68 	bl	80001d0 <__aeabi_dsub>
 8009300:	4602      	mov	r2, r0
 8009302:	460b      	mov	r3, r1
 8009304:	a162      	add	r1, pc, #392	@ (adr r1, 8009490 <__ieee754_acos+0x2d8>)
 8009306:	e9d1 0100 	ldrd	r0, r1, [r1]
 800930a:	f7f6 ff61 	bl	80001d0 <__aeabi_dsub>
 800930e:	e773      	b.n	80091f8 <__ieee754_acos+0x40>
 8009310:	2d00      	cmp	r5, #0
 8009312:	f280 80cf 	bge.w	80094b4 <__ieee754_acos+0x2fc>
 8009316:	4b65      	ldr	r3, [pc, #404]	@ (80094ac <__ieee754_acos+0x2f4>)
 8009318:	2200      	movs	r2, #0
 800931a:	4620      	mov	r0, r4
 800931c:	4629      	mov	r1, r5
 800931e:	f7f6 ff59 	bl	80001d4 <__adddf3>
 8009322:	4b63      	ldr	r3, [pc, #396]	@ (80094b0 <__ieee754_acos+0x2f8>)
 8009324:	2200      	movs	r2, #0
 8009326:	f7f7 f90b 	bl	8000540 <__aeabi_dmul>
 800932a:	a343      	add	r3, pc, #268	@ (adr r3, 8009438 <__ieee754_acos+0x280>)
 800932c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009330:	4604      	mov	r4, r0
 8009332:	460d      	mov	r5, r1
 8009334:	f7f7 f904 	bl	8000540 <__aeabi_dmul>
 8009338:	a341      	add	r3, pc, #260	@ (adr r3, 8009440 <__ieee754_acos+0x288>)
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	f7f6 ff49 	bl	80001d4 <__adddf3>
 8009342:	4622      	mov	r2, r4
 8009344:	462b      	mov	r3, r5
 8009346:	f7f7 f8fb 	bl	8000540 <__aeabi_dmul>
 800934a:	a33f      	add	r3, pc, #252	@ (adr r3, 8009448 <__ieee754_acos+0x290>)
 800934c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009350:	f7f6 ff3e 	bl	80001d0 <__aeabi_dsub>
 8009354:	4622      	mov	r2, r4
 8009356:	462b      	mov	r3, r5
 8009358:	f7f7 f8f2 	bl	8000540 <__aeabi_dmul>
 800935c:	a33c      	add	r3, pc, #240	@ (adr r3, 8009450 <__ieee754_acos+0x298>)
 800935e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009362:	f7f6 ff37 	bl	80001d4 <__adddf3>
 8009366:	4622      	mov	r2, r4
 8009368:	462b      	mov	r3, r5
 800936a:	f7f7 f8e9 	bl	8000540 <__aeabi_dmul>
 800936e:	a33a      	add	r3, pc, #232	@ (adr r3, 8009458 <__ieee754_acos+0x2a0>)
 8009370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009374:	f7f6 ff2c 	bl	80001d0 <__aeabi_dsub>
 8009378:	4622      	mov	r2, r4
 800937a:	462b      	mov	r3, r5
 800937c:	f7f7 f8e0 	bl	8000540 <__aeabi_dmul>
 8009380:	a337      	add	r3, pc, #220	@ (adr r3, 8009460 <__ieee754_acos+0x2a8>)
 8009382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009386:	f7f6 ff25 	bl	80001d4 <__adddf3>
 800938a:	4622      	mov	r2, r4
 800938c:	462b      	mov	r3, r5
 800938e:	f7f7 f8d7 	bl	8000540 <__aeabi_dmul>
 8009392:	a335      	add	r3, pc, #212	@ (adr r3, 8009468 <__ieee754_acos+0x2b0>)
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	4606      	mov	r6, r0
 800939a:	460f      	mov	r7, r1
 800939c:	4620      	mov	r0, r4
 800939e:	4629      	mov	r1, r5
 80093a0:	f7f7 f8ce 	bl	8000540 <__aeabi_dmul>
 80093a4:	a332      	add	r3, pc, #200	@ (adr r3, 8009470 <__ieee754_acos+0x2b8>)
 80093a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093aa:	f7f6 ff11 	bl	80001d0 <__aeabi_dsub>
 80093ae:	4622      	mov	r2, r4
 80093b0:	462b      	mov	r3, r5
 80093b2:	f7f7 f8c5 	bl	8000540 <__aeabi_dmul>
 80093b6:	a330      	add	r3, pc, #192	@ (adr r3, 8009478 <__ieee754_acos+0x2c0>)
 80093b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093bc:	f7f6 ff0a 	bl	80001d4 <__adddf3>
 80093c0:	4622      	mov	r2, r4
 80093c2:	462b      	mov	r3, r5
 80093c4:	f7f7 f8bc 	bl	8000540 <__aeabi_dmul>
 80093c8:	a32d      	add	r3, pc, #180	@ (adr r3, 8009480 <__ieee754_acos+0x2c8>)
 80093ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ce:	f7f6 feff 	bl	80001d0 <__aeabi_dsub>
 80093d2:	4622      	mov	r2, r4
 80093d4:	462b      	mov	r3, r5
 80093d6:	f7f7 f8b3 	bl	8000540 <__aeabi_dmul>
 80093da:	4b34      	ldr	r3, [pc, #208]	@ (80094ac <__ieee754_acos+0x2f4>)
 80093dc:	2200      	movs	r2, #0
 80093de:	f7f6 fef9 	bl	80001d4 <__adddf3>
 80093e2:	ec45 4b10 	vmov	d0, r4, r5
 80093e6:	4680      	mov	r8, r0
 80093e8:	4689      	mov	r9, r1
 80093ea:	f000 fcf5 	bl	8009dd8 <__ieee754_sqrt>
 80093ee:	ec55 4b10 	vmov	r4, r5, d0
 80093f2:	4642      	mov	r2, r8
 80093f4:	464b      	mov	r3, r9
 80093f6:	4630      	mov	r0, r6
 80093f8:	4639      	mov	r1, r7
 80093fa:	f7f7 f9cb 	bl	8000794 <__aeabi_ddiv>
 80093fe:	4622      	mov	r2, r4
 8009400:	462b      	mov	r3, r5
 8009402:	f7f7 f89d 	bl	8000540 <__aeabi_dmul>
 8009406:	a320      	add	r3, pc, #128	@ (adr r3, 8009488 <__ieee754_acos+0x2d0>)
 8009408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940c:	f7f6 fee0 	bl	80001d0 <__aeabi_dsub>
 8009410:	4622      	mov	r2, r4
 8009412:	462b      	mov	r3, r5
 8009414:	f7f6 fede 	bl	80001d4 <__adddf3>
 8009418:	4602      	mov	r2, r0
 800941a:	460b      	mov	r3, r1
 800941c:	f7f6 feda 	bl	80001d4 <__adddf3>
 8009420:	4602      	mov	r2, r0
 8009422:	460b      	mov	r3, r1
 8009424:	a11c      	add	r1, pc, #112	@ (adr r1, 8009498 <__ieee754_acos+0x2e0>)
 8009426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800942a:	e76e      	b.n	800930a <__ieee754_acos+0x152>
 800942c:	f3af 8000 	nop.w
	...
 8009438:	0dfdf709 	.word	0x0dfdf709
 800943c:	3f023de1 	.word	0x3f023de1
 8009440:	7501b288 	.word	0x7501b288
 8009444:	3f49efe0 	.word	0x3f49efe0
 8009448:	b5688f3b 	.word	0xb5688f3b
 800944c:	3fa48228 	.word	0x3fa48228
 8009450:	0e884455 	.word	0x0e884455
 8009454:	3fc9c155 	.word	0x3fc9c155
 8009458:	03eb6f7d 	.word	0x03eb6f7d
 800945c:	3fd4d612 	.word	0x3fd4d612
 8009460:	55555555 	.word	0x55555555
 8009464:	3fc55555 	.word	0x3fc55555
 8009468:	b12e9282 	.word	0xb12e9282
 800946c:	3fb3b8c5 	.word	0x3fb3b8c5
 8009470:	1b8d0159 	.word	0x1b8d0159
 8009474:	3fe6066c 	.word	0x3fe6066c
 8009478:	9c598ac8 	.word	0x9c598ac8
 800947c:	40002ae5 	.word	0x40002ae5
 8009480:	1c8a2d4b 	.word	0x1c8a2d4b
 8009484:	40033a27 	.word	0x40033a27
 8009488:	33145c07 	.word	0x33145c07
 800948c:	3c91a626 	.word	0x3c91a626
 8009490:	54442d18 	.word	0x54442d18
 8009494:	3ff921fb 	.word	0x3ff921fb
 8009498:	54442d18 	.word	0x54442d18
 800949c:	400921fb 	.word	0x400921fb
 80094a0:	3fefffff 	.word	0x3fefffff
 80094a4:	3fdfffff 	.word	0x3fdfffff
 80094a8:	3c600000 	.word	0x3c600000
 80094ac:	3ff00000 	.word	0x3ff00000
 80094b0:	3fe00000 	.word	0x3fe00000
 80094b4:	4622      	mov	r2, r4
 80094b6:	462b      	mov	r3, r5
 80094b8:	496b      	ldr	r1, [pc, #428]	@ (8009668 <__ieee754_acos+0x4b0>)
 80094ba:	2000      	movs	r0, #0
 80094bc:	f7f6 fe88 	bl	80001d0 <__aeabi_dsub>
 80094c0:	4b6a      	ldr	r3, [pc, #424]	@ (800966c <__ieee754_acos+0x4b4>)
 80094c2:	2200      	movs	r2, #0
 80094c4:	f7f7 f83c 	bl	8000540 <__aeabi_dmul>
 80094c8:	4604      	mov	r4, r0
 80094ca:	460d      	mov	r5, r1
 80094cc:	ec45 4b10 	vmov	d0, r4, r5
 80094d0:	f000 fc82 	bl	8009dd8 <__ieee754_sqrt>
 80094d4:	a34c      	add	r3, pc, #304	@ (adr r3, 8009608 <__ieee754_acos+0x450>)
 80094d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094da:	4620      	mov	r0, r4
 80094dc:	4629      	mov	r1, r5
 80094de:	ec59 8b10 	vmov	r8, r9, d0
 80094e2:	f7f7 f82d 	bl	8000540 <__aeabi_dmul>
 80094e6:	a34a      	add	r3, pc, #296	@ (adr r3, 8009610 <__ieee754_acos+0x458>)
 80094e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ec:	f7f6 fe72 	bl	80001d4 <__adddf3>
 80094f0:	4622      	mov	r2, r4
 80094f2:	462b      	mov	r3, r5
 80094f4:	f7f7 f824 	bl	8000540 <__aeabi_dmul>
 80094f8:	a347      	add	r3, pc, #284	@ (adr r3, 8009618 <__ieee754_acos+0x460>)
 80094fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fe:	f7f6 fe67 	bl	80001d0 <__aeabi_dsub>
 8009502:	4622      	mov	r2, r4
 8009504:	462b      	mov	r3, r5
 8009506:	f7f7 f81b 	bl	8000540 <__aeabi_dmul>
 800950a:	a345      	add	r3, pc, #276	@ (adr r3, 8009620 <__ieee754_acos+0x468>)
 800950c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009510:	f7f6 fe60 	bl	80001d4 <__adddf3>
 8009514:	4622      	mov	r2, r4
 8009516:	462b      	mov	r3, r5
 8009518:	f7f7 f812 	bl	8000540 <__aeabi_dmul>
 800951c:	a342      	add	r3, pc, #264	@ (adr r3, 8009628 <__ieee754_acos+0x470>)
 800951e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009522:	f7f6 fe55 	bl	80001d0 <__aeabi_dsub>
 8009526:	4622      	mov	r2, r4
 8009528:	462b      	mov	r3, r5
 800952a:	f7f7 f809 	bl	8000540 <__aeabi_dmul>
 800952e:	a340      	add	r3, pc, #256	@ (adr r3, 8009630 <__ieee754_acos+0x478>)
 8009530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009534:	f7f6 fe4e 	bl	80001d4 <__adddf3>
 8009538:	4622      	mov	r2, r4
 800953a:	462b      	mov	r3, r5
 800953c:	f7f7 f800 	bl	8000540 <__aeabi_dmul>
 8009540:	a33d      	add	r3, pc, #244	@ (adr r3, 8009638 <__ieee754_acos+0x480>)
 8009542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009546:	4682      	mov	sl, r0
 8009548:	468b      	mov	fp, r1
 800954a:	4620      	mov	r0, r4
 800954c:	4629      	mov	r1, r5
 800954e:	f7f6 fff7 	bl	8000540 <__aeabi_dmul>
 8009552:	a33b      	add	r3, pc, #236	@ (adr r3, 8009640 <__ieee754_acos+0x488>)
 8009554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009558:	f7f6 fe3a 	bl	80001d0 <__aeabi_dsub>
 800955c:	4622      	mov	r2, r4
 800955e:	462b      	mov	r3, r5
 8009560:	f7f6 ffee 	bl	8000540 <__aeabi_dmul>
 8009564:	a338      	add	r3, pc, #224	@ (adr r3, 8009648 <__ieee754_acos+0x490>)
 8009566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956a:	f7f6 fe33 	bl	80001d4 <__adddf3>
 800956e:	4622      	mov	r2, r4
 8009570:	462b      	mov	r3, r5
 8009572:	f7f6 ffe5 	bl	8000540 <__aeabi_dmul>
 8009576:	a336      	add	r3, pc, #216	@ (adr r3, 8009650 <__ieee754_acos+0x498>)
 8009578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957c:	f7f6 fe28 	bl	80001d0 <__aeabi_dsub>
 8009580:	4622      	mov	r2, r4
 8009582:	462b      	mov	r3, r5
 8009584:	f7f6 ffdc 	bl	8000540 <__aeabi_dmul>
 8009588:	4b37      	ldr	r3, [pc, #220]	@ (8009668 <__ieee754_acos+0x4b0>)
 800958a:	2200      	movs	r2, #0
 800958c:	f7f6 fe22 	bl	80001d4 <__adddf3>
 8009590:	4602      	mov	r2, r0
 8009592:	460b      	mov	r3, r1
 8009594:	4650      	mov	r0, sl
 8009596:	4659      	mov	r1, fp
 8009598:	f7f7 f8fc 	bl	8000794 <__aeabi_ddiv>
 800959c:	4642      	mov	r2, r8
 800959e:	464b      	mov	r3, r9
 80095a0:	f7f6 ffce 	bl	8000540 <__aeabi_dmul>
 80095a4:	2600      	movs	r6, #0
 80095a6:	4682      	mov	sl, r0
 80095a8:	468b      	mov	fp, r1
 80095aa:	4632      	mov	r2, r6
 80095ac:	464b      	mov	r3, r9
 80095ae:	4630      	mov	r0, r6
 80095b0:	4649      	mov	r1, r9
 80095b2:	f7f6 ffc5 	bl	8000540 <__aeabi_dmul>
 80095b6:	4602      	mov	r2, r0
 80095b8:	460b      	mov	r3, r1
 80095ba:	4620      	mov	r0, r4
 80095bc:	4629      	mov	r1, r5
 80095be:	f7f6 fe07 	bl	80001d0 <__aeabi_dsub>
 80095c2:	4632      	mov	r2, r6
 80095c4:	4604      	mov	r4, r0
 80095c6:	460d      	mov	r5, r1
 80095c8:	464b      	mov	r3, r9
 80095ca:	4640      	mov	r0, r8
 80095cc:	4649      	mov	r1, r9
 80095ce:	f7f6 fe01 	bl	80001d4 <__adddf3>
 80095d2:	4602      	mov	r2, r0
 80095d4:	460b      	mov	r3, r1
 80095d6:	4620      	mov	r0, r4
 80095d8:	4629      	mov	r1, r5
 80095da:	f7f7 f8db 	bl	8000794 <__aeabi_ddiv>
 80095de:	4602      	mov	r2, r0
 80095e0:	460b      	mov	r3, r1
 80095e2:	4650      	mov	r0, sl
 80095e4:	4659      	mov	r1, fp
 80095e6:	f7f6 fdf5 	bl	80001d4 <__adddf3>
 80095ea:	4632      	mov	r2, r6
 80095ec:	464b      	mov	r3, r9
 80095ee:	f7f6 fdf1 	bl	80001d4 <__adddf3>
 80095f2:	4602      	mov	r2, r0
 80095f4:	460b      	mov	r3, r1
 80095f6:	f7f6 fded 	bl	80001d4 <__adddf3>
 80095fa:	e5fd      	b.n	80091f8 <__ieee754_acos+0x40>
 80095fc:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8009658 <__ieee754_acos+0x4a0>
 8009600:	e5ee      	b.n	80091e0 <__ieee754_acos+0x28>
 8009602:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8009660 <__ieee754_acos+0x4a8>
 8009606:	e5eb      	b.n	80091e0 <__ieee754_acos+0x28>
 8009608:	0dfdf709 	.word	0x0dfdf709
 800960c:	3f023de1 	.word	0x3f023de1
 8009610:	7501b288 	.word	0x7501b288
 8009614:	3f49efe0 	.word	0x3f49efe0
 8009618:	b5688f3b 	.word	0xb5688f3b
 800961c:	3fa48228 	.word	0x3fa48228
 8009620:	0e884455 	.word	0x0e884455
 8009624:	3fc9c155 	.word	0x3fc9c155
 8009628:	03eb6f7d 	.word	0x03eb6f7d
 800962c:	3fd4d612 	.word	0x3fd4d612
 8009630:	55555555 	.word	0x55555555
 8009634:	3fc55555 	.word	0x3fc55555
 8009638:	b12e9282 	.word	0xb12e9282
 800963c:	3fb3b8c5 	.word	0x3fb3b8c5
 8009640:	1b8d0159 	.word	0x1b8d0159
 8009644:	3fe6066c 	.word	0x3fe6066c
 8009648:	9c598ac8 	.word	0x9c598ac8
 800964c:	40002ae5 	.word	0x40002ae5
 8009650:	1c8a2d4b 	.word	0x1c8a2d4b
 8009654:	40033a27 	.word	0x40033a27
 8009658:	54442d18 	.word	0x54442d18
 800965c:	400921fb 	.word	0x400921fb
 8009660:	54442d18 	.word	0x54442d18
 8009664:	3ff921fb 	.word	0x3ff921fb
 8009668:	3ff00000 	.word	0x3ff00000
 800966c:	3fe00000 	.word	0x3fe00000

08009670 <__ieee754_exp>:
 8009670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009674:	ec55 4b10 	vmov	r4, r5, d0
 8009678:	49b1      	ldr	r1, [pc, #708]	@ (8009940 <__ieee754_exp+0x2d0>)
 800967a:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800967e:	428a      	cmp	r2, r1
 8009680:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8009684:	d936      	bls.n	80096f4 <__ieee754_exp+0x84>
 8009686:	49af      	ldr	r1, [pc, #700]	@ (8009944 <__ieee754_exp+0x2d4>)
 8009688:	428a      	cmp	r2, r1
 800968a:	d914      	bls.n	80096b6 <__ieee754_exp+0x46>
 800968c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009690:	4323      	orrs	r3, r4
 8009692:	4622      	mov	r2, r4
 8009694:	d007      	beq.n	80096a6 <__ieee754_exp+0x36>
 8009696:	462b      	mov	r3, r5
 8009698:	4620      	mov	r0, r4
 800969a:	4629      	mov	r1, r5
 800969c:	f7f6 fd9a 	bl	80001d4 <__adddf3>
 80096a0:	4604      	mov	r4, r0
 80096a2:	460d      	mov	r5, r1
 80096a4:	e002      	b.n	80096ac <__ieee754_exp+0x3c>
 80096a6:	2e00      	cmp	r6, #0
 80096a8:	f040 8118 	bne.w	80098dc <__ieee754_exp+0x26c>
 80096ac:	ec45 4b10 	vmov	d0, r4, r5
 80096b0:	b004      	add	sp, #16
 80096b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096b6:	a38c      	add	r3, pc, #560	@ (adr r3, 80098e8 <__ieee754_exp+0x278>)
 80096b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096bc:	4620      	mov	r0, r4
 80096be:	4629      	mov	r1, r5
 80096c0:	f7f7 f9ce 	bl	8000a60 <__aeabi_dcmpgt>
 80096c4:	4607      	mov	r7, r0
 80096c6:	b128      	cbz	r0, 80096d4 <__ieee754_exp+0x64>
 80096c8:	2000      	movs	r0, #0
 80096ca:	b004      	add	sp, #16
 80096cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096d0:	f000 bb7a 	b.w	8009dc8 <__math_oflow>
 80096d4:	a386      	add	r3, pc, #536	@ (adr r3, 80098f0 <__ieee754_exp+0x280>)
 80096d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096da:	4620      	mov	r0, r4
 80096dc:	4629      	mov	r1, r5
 80096de:	f7f7 f9a1 	bl	8000a24 <__aeabi_dcmplt>
 80096e2:	2800      	cmp	r0, #0
 80096e4:	f000 8087 	beq.w	80097f6 <__ieee754_exp+0x186>
 80096e8:	4638      	mov	r0, r7
 80096ea:	b004      	add	sp, #16
 80096ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096f0:	f000 bb62 	b.w	8009db8 <__math_uflow>
 80096f4:	4b94      	ldr	r3, [pc, #592]	@ (8009948 <__ieee754_exp+0x2d8>)
 80096f6:	429a      	cmp	r2, r3
 80096f8:	f240 80a9 	bls.w	800984e <__ieee754_exp+0x1de>
 80096fc:	4b93      	ldr	r3, [pc, #588]	@ (800994c <__ieee754_exp+0x2dc>)
 80096fe:	429a      	cmp	r2, r3
 8009700:	d879      	bhi.n	80097f6 <__ieee754_exp+0x186>
 8009702:	4b93      	ldr	r3, [pc, #588]	@ (8009950 <__ieee754_exp+0x2e0>)
 8009704:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970c:	4620      	mov	r0, r4
 800970e:	4629      	mov	r1, r5
 8009710:	f7f6 fd5e 	bl	80001d0 <__aeabi_dsub>
 8009714:	4b8f      	ldr	r3, [pc, #572]	@ (8009954 <__ieee754_exp+0x2e4>)
 8009716:	00f7      	lsls	r7, r6, #3
 8009718:	443b      	add	r3, r7
 800971a:	ed93 7b00 	vldr	d7, [r3]
 800971e:	ed8d 7b00 	vstr	d7, [sp]
 8009722:	f1c6 0a01 	rsb	sl, r6, #1
 8009726:	4680      	mov	r8, r0
 8009728:	4689      	mov	r9, r1
 800972a:	ebaa 0a06 	sub.w	sl, sl, r6
 800972e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009732:	4640      	mov	r0, r8
 8009734:	4649      	mov	r1, r9
 8009736:	f7f6 fd4b 	bl	80001d0 <__aeabi_dsub>
 800973a:	4604      	mov	r4, r0
 800973c:	460d      	mov	r5, r1
 800973e:	4622      	mov	r2, r4
 8009740:	462b      	mov	r3, r5
 8009742:	4620      	mov	r0, r4
 8009744:	4629      	mov	r1, r5
 8009746:	f7f6 fefb 	bl	8000540 <__aeabi_dmul>
 800974a:	a36b      	add	r3, pc, #428	@ (adr r3, 80098f8 <__ieee754_exp+0x288>)
 800974c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009750:	4606      	mov	r6, r0
 8009752:	460f      	mov	r7, r1
 8009754:	f7f6 fef4 	bl	8000540 <__aeabi_dmul>
 8009758:	a369      	add	r3, pc, #420	@ (adr r3, 8009900 <__ieee754_exp+0x290>)
 800975a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975e:	f7f6 fd37 	bl	80001d0 <__aeabi_dsub>
 8009762:	4632      	mov	r2, r6
 8009764:	463b      	mov	r3, r7
 8009766:	f7f6 feeb 	bl	8000540 <__aeabi_dmul>
 800976a:	a367      	add	r3, pc, #412	@ (adr r3, 8009908 <__ieee754_exp+0x298>)
 800976c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009770:	f7f6 fd30 	bl	80001d4 <__adddf3>
 8009774:	4632      	mov	r2, r6
 8009776:	463b      	mov	r3, r7
 8009778:	f7f6 fee2 	bl	8000540 <__aeabi_dmul>
 800977c:	a364      	add	r3, pc, #400	@ (adr r3, 8009910 <__ieee754_exp+0x2a0>)
 800977e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009782:	f7f6 fd25 	bl	80001d0 <__aeabi_dsub>
 8009786:	4632      	mov	r2, r6
 8009788:	463b      	mov	r3, r7
 800978a:	f7f6 fed9 	bl	8000540 <__aeabi_dmul>
 800978e:	a362      	add	r3, pc, #392	@ (adr r3, 8009918 <__ieee754_exp+0x2a8>)
 8009790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009794:	f7f6 fd1e 	bl	80001d4 <__adddf3>
 8009798:	4632      	mov	r2, r6
 800979a:	463b      	mov	r3, r7
 800979c:	f7f6 fed0 	bl	8000540 <__aeabi_dmul>
 80097a0:	4602      	mov	r2, r0
 80097a2:	460b      	mov	r3, r1
 80097a4:	4620      	mov	r0, r4
 80097a6:	4629      	mov	r1, r5
 80097a8:	f7f6 fd12 	bl	80001d0 <__aeabi_dsub>
 80097ac:	4602      	mov	r2, r0
 80097ae:	460b      	mov	r3, r1
 80097b0:	4606      	mov	r6, r0
 80097b2:	460f      	mov	r7, r1
 80097b4:	4620      	mov	r0, r4
 80097b6:	4629      	mov	r1, r5
 80097b8:	f7f6 fec2 	bl	8000540 <__aeabi_dmul>
 80097bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097c0:	f1ba 0f00 	cmp.w	sl, #0
 80097c4:	d15c      	bne.n	8009880 <__ieee754_exp+0x210>
 80097c6:	2200      	movs	r2, #0
 80097c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80097cc:	4630      	mov	r0, r6
 80097ce:	4639      	mov	r1, r7
 80097d0:	f7f6 fcfe 	bl	80001d0 <__aeabi_dsub>
 80097d4:	4602      	mov	r2, r0
 80097d6:	460b      	mov	r3, r1
 80097d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097dc:	f7f6 ffda 	bl	8000794 <__aeabi_ddiv>
 80097e0:	4622      	mov	r2, r4
 80097e2:	462b      	mov	r3, r5
 80097e4:	f7f6 fcf4 	bl	80001d0 <__aeabi_dsub>
 80097e8:	4602      	mov	r2, r0
 80097ea:	460b      	mov	r3, r1
 80097ec:	2000      	movs	r0, #0
 80097ee:	495a      	ldr	r1, [pc, #360]	@ (8009958 <__ieee754_exp+0x2e8>)
 80097f0:	f7f6 fcee 	bl	80001d0 <__aeabi_dsub>
 80097f4:	e754      	b.n	80096a0 <__ieee754_exp+0x30>
 80097f6:	4b59      	ldr	r3, [pc, #356]	@ (800995c <__ieee754_exp+0x2ec>)
 80097f8:	4620      	mov	r0, r4
 80097fa:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80097fe:	4629      	mov	r1, r5
 8009800:	a347      	add	r3, pc, #284	@ (adr r3, 8009920 <__ieee754_exp+0x2b0>)
 8009802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009806:	f7f6 fe9b 	bl	8000540 <__aeabi_dmul>
 800980a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800980e:	f7f6 fce1 	bl	80001d4 <__adddf3>
 8009812:	f7f7 f945 	bl	8000aa0 <__aeabi_d2iz>
 8009816:	4682      	mov	sl, r0
 8009818:	f7f6 fe28 	bl	800046c <__aeabi_i2d>
 800981c:	a342      	add	r3, pc, #264	@ (adr r3, 8009928 <__ieee754_exp+0x2b8>)
 800981e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009822:	4606      	mov	r6, r0
 8009824:	460f      	mov	r7, r1
 8009826:	f7f6 fe8b 	bl	8000540 <__aeabi_dmul>
 800982a:	4602      	mov	r2, r0
 800982c:	460b      	mov	r3, r1
 800982e:	4620      	mov	r0, r4
 8009830:	4629      	mov	r1, r5
 8009832:	f7f6 fccd 	bl	80001d0 <__aeabi_dsub>
 8009836:	a33e      	add	r3, pc, #248	@ (adr r3, 8009930 <__ieee754_exp+0x2c0>)
 8009838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983c:	4680      	mov	r8, r0
 800983e:	4689      	mov	r9, r1
 8009840:	4630      	mov	r0, r6
 8009842:	4639      	mov	r1, r7
 8009844:	f7f6 fe7c 	bl	8000540 <__aeabi_dmul>
 8009848:	e9cd 0100 	strd	r0, r1, [sp]
 800984c:	e76f      	b.n	800972e <__ieee754_exp+0xbe>
 800984e:	4b44      	ldr	r3, [pc, #272]	@ (8009960 <__ieee754_exp+0x2f0>)
 8009850:	429a      	cmp	r2, r3
 8009852:	d810      	bhi.n	8009876 <__ieee754_exp+0x206>
 8009854:	a338      	add	r3, pc, #224	@ (adr r3, 8009938 <__ieee754_exp+0x2c8>)
 8009856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985a:	4620      	mov	r0, r4
 800985c:	4629      	mov	r1, r5
 800985e:	f7f6 fcb9 	bl	80001d4 <__adddf3>
 8009862:	4b3d      	ldr	r3, [pc, #244]	@ (8009958 <__ieee754_exp+0x2e8>)
 8009864:	2200      	movs	r2, #0
 8009866:	f7f7 f8fb 	bl	8000a60 <__aeabi_dcmpgt>
 800986a:	b138      	cbz	r0, 800987c <__ieee754_exp+0x20c>
 800986c:	4b3a      	ldr	r3, [pc, #232]	@ (8009958 <__ieee754_exp+0x2e8>)
 800986e:	2200      	movs	r2, #0
 8009870:	4620      	mov	r0, r4
 8009872:	4629      	mov	r1, r5
 8009874:	e712      	b.n	800969c <__ieee754_exp+0x2c>
 8009876:	f04f 0a00 	mov.w	sl, #0
 800987a:	e760      	b.n	800973e <__ieee754_exp+0xce>
 800987c:	4682      	mov	sl, r0
 800987e:	e75e      	b.n	800973e <__ieee754_exp+0xce>
 8009880:	4632      	mov	r2, r6
 8009882:	463b      	mov	r3, r7
 8009884:	2000      	movs	r0, #0
 8009886:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800988a:	f7f6 fca1 	bl	80001d0 <__aeabi_dsub>
 800988e:	4602      	mov	r2, r0
 8009890:	460b      	mov	r3, r1
 8009892:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009896:	f7f6 ff7d 	bl	8000794 <__aeabi_ddiv>
 800989a:	4602      	mov	r2, r0
 800989c:	460b      	mov	r3, r1
 800989e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098a2:	f7f6 fc95 	bl	80001d0 <__aeabi_dsub>
 80098a6:	4642      	mov	r2, r8
 80098a8:	464b      	mov	r3, r9
 80098aa:	f7f6 fc91 	bl	80001d0 <__aeabi_dsub>
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	2000      	movs	r0, #0
 80098b4:	4928      	ldr	r1, [pc, #160]	@ (8009958 <__ieee754_exp+0x2e8>)
 80098b6:	f7f6 fc8b 	bl	80001d0 <__aeabi_dsub>
 80098ba:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 80098be:	4592      	cmp	sl, r2
 80098c0:	db02      	blt.n	80098c8 <__ieee754_exp+0x258>
 80098c2:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80098c6:	e6eb      	b.n	80096a0 <__ieee754_exp+0x30>
 80098c8:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 80098cc:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80098d0:	2200      	movs	r2, #0
 80098d2:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 80098d6:	f7f6 fe33 	bl	8000540 <__aeabi_dmul>
 80098da:	e6e1      	b.n	80096a0 <__ieee754_exp+0x30>
 80098dc:	2400      	movs	r4, #0
 80098de:	2500      	movs	r5, #0
 80098e0:	e6e4      	b.n	80096ac <__ieee754_exp+0x3c>
 80098e2:	bf00      	nop
 80098e4:	f3af 8000 	nop.w
 80098e8:	fefa39ef 	.word	0xfefa39ef
 80098ec:	40862e42 	.word	0x40862e42
 80098f0:	d52d3051 	.word	0xd52d3051
 80098f4:	c0874910 	.word	0xc0874910
 80098f8:	72bea4d0 	.word	0x72bea4d0
 80098fc:	3e663769 	.word	0x3e663769
 8009900:	c5d26bf1 	.word	0xc5d26bf1
 8009904:	3ebbbd41 	.word	0x3ebbbd41
 8009908:	af25de2c 	.word	0xaf25de2c
 800990c:	3f11566a 	.word	0x3f11566a
 8009910:	16bebd93 	.word	0x16bebd93
 8009914:	3f66c16c 	.word	0x3f66c16c
 8009918:	5555553e 	.word	0x5555553e
 800991c:	3fc55555 	.word	0x3fc55555
 8009920:	652b82fe 	.word	0x652b82fe
 8009924:	3ff71547 	.word	0x3ff71547
 8009928:	fee00000 	.word	0xfee00000
 800992c:	3fe62e42 	.word	0x3fe62e42
 8009930:	35793c76 	.word	0x35793c76
 8009934:	3dea39ef 	.word	0x3dea39ef
 8009938:	8800759c 	.word	0x8800759c
 800993c:	7e37e43c 	.word	0x7e37e43c
 8009940:	40862e41 	.word	0x40862e41
 8009944:	7fefffff 	.word	0x7fefffff
 8009948:	3fd62e42 	.word	0x3fd62e42
 800994c:	3ff0a2b1 	.word	0x3ff0a2b1
 8009950:	0800a880 	.word	0x0800a880
 8009954:	0800a870 	.word	0x0800a870
 8009958:	3ff00000 	.word	0x3ff00000
 800995c:	0800a890 	.word	0x0800a890
 8009960:	3defffff 	.word	0x3defffff
 8009964:	00000000 	.word	0x00000000

08009968 <__ieee754_rem_pio2>:
 8009968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996c:	ec57 6b10 	vmov	r6, r7, d0
 8009970:	4bc5      	ldr	r3, [pc, #788]	@ (8009c88 <__ieee754_rem_pio2+0x320>)
 8009972:	b08d      	sub	sp, #52	@ 0x34
 8009974:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009978:	4598      	cmp	r8, r3
 800997a:	4604      	mov	r4, r0
 800997c:	9704      	str	r7, [sp, #16]
 800997e:	d807      	bhi.n	8009990 <__ieee754_rem_pio2+0x28>
 8009980:	2200      	movs	r2, #0
 8009982:	2300      	movs	r3, #0
 8009984:	ed80 0b00 	vstr	d0, [r0]
 8009988:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800998c:	2500      	movs	r5, #0
 800998e:	e028      	b.n	80099e2 <__ieee754_rem_pio2+0x7a>
 8009990:	4bbe      	ldr	r3, [pc, #760]	@ (8009c8c <__ieee754_rem_pio2+0x324>)
 8009992:	4598      	cmp	r8, r3
 8009994:	d878      	bhi.n	8009a88 <__ieee754_rem_pio2+0x120>
 8009996:	9b04      	ldr	r3, [sp, #16]
 8009998:	4dbd      	ldr	r5, [pc, #756]	@ (8009c90 <__ieee754_rem_pio2+0x328>)
 800999a:	2b00      	cmp	r3, #0
 800999c:	4630      	mov	r0, r6
 800999e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8009c50 <__ieee754_rem_pio2+0x2e8>)
 80099a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a4:	4639      	mov	r1, r7
 80099a6:	dd38      	ble.n	8009a1a <__ieee754_rem_pio2+0xb2>
 80099a8:	f7f6 fc12 	bl	80001d0 <__aeabi_dsub>
 80099ac:	45a8      	cmp	r8, r5
 80099ae:	4606      	mov	r6, r0
 80099b0:	460f      	mov	r7, r1
 80099b2:	d01a      	beq.n	80099ea <__ieee754_rem_pio2+0x82>
 80099b4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8009c58 <__ieee754_rem_pio2+0x2f0>)
 80099b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ba:	f7f6 fc09 	bl	80001d0 <__aeabi_dsub>
 80099be:	4602      	mov	r2, r0
 80099c0:	460b      	mov	r3, r1
 80099c2:	4680      	mov	r8, r0
 80099c4:	4689      	mov	r9, r1
 80099c6:	4630      	mov	r0, r6
 80099c8:	4639      	mov	r1, r7
 80099ca:	f7f6 fc01 	bl	80001d0 <__aeabi_dsub>
 80099ce:	a3a2      	add	r3, pc, #648	@ (adr r3, 8009c58 <__ieee754_rem_pio2+0x2f0>)
 80099d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d4:	f7f6 fbfc 	bl	80001d0 <__aeabi_dsub>
 80099d8:	e9c4 8900 	strd	r8, r9, [r4]
 80099dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80099e0:	2501      	movs	r5, #1
 80099e2:	4628      	mov	r0, r5
 80099e4:	b00d      	add	sp, #52	@ 0x34
 80099e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ea:	a39d      	add	r3, pc, #628	@ (adr r3, 8009c60 <__ieee754_rem_pio2+0x2f8>)
 80099ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f0:	f7f6 fbee 	bl	80001d0 <__aeabi_dsub>
 80099f4:	a39c      	add	r3, pc, #624	@ (adr r3, 8009c68 <__ieee754_rem_pio2+0x300>)
 80099f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fa:	4606      	mov	r6, r0
 80099fc:	460f      	mov	r7, r1
 80099fe:	f7f6 fbe7 	bl	80001d0 <__aeabi_dsub>
 8009a02:	4602      	mov	r2, r0
 8009a04:	460b      	mov	r3, r1
 8009a06:	4680      	mov	r8, r0
 8009a08:	4689      	mov	r9, r1
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	4639      	mov	r1, r7
 8009a0e:	f7f6 fbdf 	bl	80001d0 <__aeabi_dsub>
 8009a12:	a395      	add	r3, pc, #596	@ (adr r3, 8009c68 <__ieee754_rem_pio2+0x300>)
 8009a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a18:	e7dc      	b.n	80099d4 <__ieee754_rem_pio2+0x6c>
 8009a1a:	f7f6 fbdb 	bl	80001d4 <__adddf3>
 8009a1e:	45a8      	cmp	r8, r5
 8009a20:	4606      	mov	r6, r0
 8009a22:	460f      	mov	r7, r1
 8009a24:	d018      	beq.n	8009a58 <__ieee754_rem_pio2+0xf0>
 8009a26:	a38c      	add	r3, pc, #560	@ (adr r3, 8009c58 <__ieee754_rem_pio2+0x2f0>)
 8009a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2c:	f7f6 fbd2 	bl	80001d4 <__adddf3>
 8009a30:	4602      	mov	r2, r0
 8009a32:	460b      	mov	r3, r1
 8009a34:	4680      	mov	r8, r0
 8009a36:	4689      	mov	r9, r1
 8009a38:	4630      	mov	r0, r6
 8009a3a:	4639      	mov	r1, r7
 8009a3c:	f7f6 fbc8 	bl	80001d0 <__aeabi_dsub>
 8009a40:	a385      	add	r3, pc, #532	@ (adr r3, 8009c58 <__ieee754_rem_pio2+0x2f0>)
 8009a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a46:	f7f6 fbc5 	bl	80001d4 <__adddf3>
 8009a4a:	f04f 35ff 	mov.w	r5, #4294967295
 8009a4e:	e9c4 8900 	strd	r8, r9, [r4]
 8009a52:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009a56:	e7c4      	b.n	80099e2 <__ieee754_rem_pio2+0x7a>
 8009a58:	a381      	add	r3, pc, #516	@ (adr r3, 8009c60 <__ieee754_rem_pio2+0x2f8>)
 8009a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5e:	f7f6 fbb9 	bl	80001d4 <__adddf3>
 8009a62:	a381      	add	r3, pc, #516	@ (adr r3, 8009c68 <__ieee754_rem_pio2+0x300>)
 8009a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a68:	4606      	mov	r6, r0
 8009a6a:	460f      	mov	r7, r1
 8009a6c:	f7f6 fbb2 	bl	80001d4 <__adddf3>
 8009a70:	4602      	mov	r2, r0
 8009a72:	460b      	mov	r3, r1
 8009a74:	4680      	mov	r8, r0
 8009a76:	4689      	mov	r9, r1
 8009a78:	4630      	mov	r0, r6
 8009a7a:	4639      	mov	r1, r7
 8009a7c:	f7f6 fba8 	bl	80001d0 <__aeabi_dsub>
 8009a80:	a379      	add	r3, pc, #484	@ (adr r3, 8009c68 <__ieee754_rem_pio2+0x300>)
 8009a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a86:	e7de      	b.n	8009a46 <__ieee754_rem_pio2+0xde>
 8009a88:	4b82      	ldr	r3, [pc, #520]	@ (8009c94 <__ieee754_rem_pio2+0x32c>)
 8009a8a:	4598      	cmp	r8, r3
 8009a8c:	f200 80d1 	bhi.w	8009c32 <__ieee754_rem_pio2+0x2ca>
 8009a90:	f7ff f99e 	bl	8008dd0 <fabs>
 8009a94:	ec57 6b10 	vmov	r6, r7, d0
 8009a98:	a375      	add	r3, pc, #468	@ (adr r3, 8009c70 <__ieee754_rem_pio2+0x308>)
 8009a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	4639      	mov	r1, r7
 8009aa2:	f7f6 fd4d 	bl	8000540 <__aeabi_dmul>
 8009aa6:	4b7c      	ldr	r3, [pc, #496]	@ (8009c98 <__ieee754_rem_pio2+0x330>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f7f6 fb93 	bl	80001d4 <__adddf3>
 8009aae:	f7f6 fff7 	bl	8000aa0 <__aeabi_d2iz>
 8009ab2:	4605      	mov	r5, r0
 8009ab4:	f7f6 fcda 	bl	800046c <__aeabi_i2d>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	460b      	mov	r3, r1
 8009abc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ac0:	a363      	add	r3, pc, #396	@ (adr r3, 8009c50 <__ieee754_rem_pio2+0x2e8>)
 8009ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac6:	f7f6 fd3b 	bl	8000540 <__aeabi_dmul>
 8009aca:	4602      	mov	r2, r0
 8009acc:	460b      	mov	r3, r1
 8009ace:	4630      	mov	r0, r6
 8009ad0:	4639      	mov	r1, r7
 8009ad2:	f7f6 fb7d 	bl	80001d0 <__aeabi_dsub>
 8009ad6:	a360      	add	r3, pc, #384	@ (adr r3, 8009c58 <__ieee754_rem_pio2+0x2f0>)
 8009ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009adc:	4682      	mov	sl, r0
 8009ade:	468b      	mov	fp, r1
 8009ae0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ae4:	f7f6 fd2c 	bl	8000540 <__aeabi_dmul>
 8009ae8:	2d1f      	cmp	r5, #31
 8009aea:	4606      	mov	r6, r0
 8009aec:	460f      	mov	r7, r1
 8009aee:	dc0c      	bgt.n	8009b0a <__ieee754_rem_pio2+0x1a2>
 8009af0:	4b6a      	ldr	r3, [pc, #424]	@ (8009c9c <__ieee754_rem_pio2+0x334>)
 8009af2:	1e6a      	subs	r2, r5, #1
 8009af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af8:	4543      	cmp	r3, r8
 8009afa:	d006      	beq.n	8009b0a <__ieee754_rem_pio2+0x1a2>
 8009afc:	4632      	mov	r2, r6
 8009afe:	463b      	mov	r3, r7
 8009b00:	4650      	mov	r0, sl
 8009b02:	4659      	mov	r1, fp
 8009b04:	f7f6 fb64 	bl	80001d0 <__aeabi_dsub>
 8009b08:	e00e      	b.n	8009b28 <__ieee754_rem_pio2+0x1c0>
 8009b0a:	463b      	mov	r3, r7
 8009b0c:	4632      	mov	r2, r6
 8009b0e:	4650      	mov	r0, sl
 8009b10:	4659      	mov	r1, fp
 8009b12:	f7f6 fb5d 	bl	80001d0 <__aeabi_dsub>
 8009b16:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009b1a:	9305      	str	r3, [sp, #20]
 8009b1c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009b20:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009b24:	2b10      	cmp	r3, #16
 8009b26:	dc02      	bgt.n	8009b2e <__ieee754_rem_pio2+0x1c6>
 8009b28:	e9c4 0100 	strd	r0, r1, [r4]
 8009b2c:	e039      	b.n	8009ba2 <__ieee754_rem_pio2+0x23a>
 8009b2e:	a34c      	add	r3, pc, #304	@ (adr r3, 8009c60 <__ieee754_rem_pio2+0x2f8>)
 8009b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b38:	f7f6 fd02 	bl	8000540 <__aeabi_dmul>
 8009b3c:	4606      	mov	r6, r0
 8009b3e:	460f      	mov	r7, r1
 8009b40:	4602      	mov	r2, r0
 8009b42:	460b      	mov	r3, r1
 8009b44:	4650      	mov	r0, sl
 8009b46:	4659      	mov	r1, fp
 8009b48:	f7f6 fb42 	bl	80001d0 <__aeabi_dsub>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	460b      	mov	r3, r1
 8009b50:	4680      	mov	r8, r0
 8009b52:	4689      	mov	r9, r1
 8009b54:	4650      	mov	r0, sl
 8009b56:	4659      	mov	r1, fp
 8009b58:	f7f6 fb3a 	bl	80001d0 <__aeabi_dsub>
 8009b5c:	4632      	mov	r2, r6
 8009b5e:	463b      	mov	r3, r7
 8009b60:	f7f6 fb36 	bl	80001d0 <__aeabi_dsub>
 8009b64:	a340      	add	r3, pc, #256	@ (adr r3, 8009c68 <__ieee754_rem_pio2+0x300>)
 8009b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	460f      	mov	r7, r1
 8009b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b72:	f7f6 fce5 	bl	8000540 <__aeabi_dmul>
 8009b76:	4632      	mov	r2, r6
 8009b78:	463b      	mov	r3, r7
 8009b7a:	f7f6 fb29 	bl	80001d0 <__aeabi_dsub>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	460b      	mov	r3, r1
 8009b82:	4606      	mov	r6, r0
 8009b84:	460f      	mov	r7, r1
 8009b86:	4640      	mov	r0, r8
 8009b88:	4649      	mov	r1, r9
 8009b8a:	f7f6 fb21 	bl	80001d0 <__aeabi_dsub>
 8009b8e:	9a05      	ldr	r2, [sp, #20]
 8009b90:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	2b31      	cmp	r3, #49	@ 0x31
 8009b98:	dc20      	bgt.n	8009bdc <__ieee754_rem_pio2+0x274>
 8009b9a:	e9c4 0100 	strd	r0, r1, [r4]
 8009b9e:	46c2      	mov	sl, r8
 8009ba0:	46cb      	mov	fp, r9
 8009ba2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009ba6:	4650      	mov	r0, sl
 8009ba8:	4642      	mov	r2, r8
 8009baa:	464b      	mov	r3, r9
 8009bac:	4659      	mov	r1, fp
 8009bae:	f7f6 fb0f 	bl	80001d0 <__aeabi_dsub>
 8009bb2:	463b      	mov	r3, r7
 8009bb4:	4632      	mov	r2, r6
 8009bb6:	f7f6 fb0b 	bl	80001d0 <__aeabi_dsub>
 8009bba:	9b04      	ldr	r3, [sp, #16]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009bc2:	f6bf af0e 	bge.w	80099e2 <__ieee754_rem_pio2+0x7a>
 8009bc6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8009bca:	6063      	str	r3, [r4, #4]
 8009bcc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009bd0:	f8c4 8000 	str.w	r8, [r4]
 8009bd4:	60a0      	str	r0, [r4, #8]
 8009bd6:	60e3      	str	r3, [r4, #12]
 8009bd8:	426d      	negs	r5, r5
 8009bda:	e702      	b.n	80099e2 <__ieee754_rem_pio2+0x7a>
 8009bdc:	a326      	add	r3, pc, #152	@ (adr r3, 8009c78 <__ieee754_rem_pio2+0x310>)
 8009bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009be6:	f7f6 fcab 	bl	8000540 <__aeabi_dmul>
 8009bea:	4606      	mov	r6, r0
 8009bec:	460f      	mov	r7, r1
 8009bee:	4602      	mov	r2, r0
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	4640      	mov	r0, r8
 8009bf4:	4649      	mov	r1, r9
 8009bf6:	f7f6 faeb 	bl	80001d0 <__aeabi_dsub>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	4682      	mov	sl, r0
 8009c00:	468b      	mov	fp, r1
 8009c02:	4640      	mov	r0, r8
 8009c04:	4649      	mov	r1, r9
 8009c06:	f7f6 fae3 	bl	80001d0 <__aeabi_dsub>
 8009c0a:	4632      	mov	r2, r6
 8009c0c:	463b      	mov	r3, r7
 8009c0e:	f7f6 fadf 	bl	80001d0 <__aeabi_dsub>
 8009c12:	a31b      	add	r3, pc, #108	@ (adr r3, 8009c80 <__ieee754_rem_pio2+0x318>)
 8009c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c18:	4606      	mov	r6, r0
 8009c1a:	460f      	mov	r7, r1
 8009c1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c20:	f7f6 fc8e 	bl	8000540 <__aeabi_dmul>
 8009c24:	4632      	mov	r2, r6
 8009c26:	463b      	mov	r3, r7
 8009c28:	f7f6 fad2 	bl	80001d0 <__aeabi_dsub>
 8009c2c:	4606      	mov	r6, r0
 8009c2e:	460f      	mov	r7, r1
 8009c30:	e764      	b.n	8009afc <__ieee754_rem_pio2+0x194>
 8009c32:	4b1b      	ldr	r3, [pc, #108]	@ (8009ca0 <__ieee754_rem_pio2+0x338>)
 8009c34:	4598      	cmp	r8, r3
 8009c36:	d935      	bls.n	8009ca4 <__ieee754_rem_pio2+0x33c>
 8009c38:	4632      	mov	r2, r6
 8009c3a:	463b      	mov	r3, r7
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	4639      	mov	r1, r7
 8009c40:	f7f6 fac6 	bl	80001d0 <__aeabi_dsub>
 8009c44:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009c48:	e9c4 0100 	strd	r0, r1, [r4]
 8009c4c:	e69e      	b.n	800998c <__ieee754_rem_pio2+0x24>
 8009c4e:	bf00      	nop
 8009c50:	54400000 	.word	0x54400000
 8009c54:	3ff921fb 	.word	0x3ff921fb
 8009c58:	1a626331 	.word	0x1a626331
 8009c5c:	3dd0b461 	.word	0x3dd0b461
 8009c60:	1a600000 	.word	0x1a600000
 8009c64:	3dd0b461 	.word	0x3dd0b461
 8009c68:	2e037073 	.word	0x2e037073
 8009c6c:	3ba3198a 	.word	0x3ba3198a
 8009c70:	6dc9c883 	.word	0x6dc9c883
 8009c74:	3fe45f30 	.word	0x3fe45f30
 8009c78:	2e000000 	.word	0x2e000000
 8009c7c:	3ba3198a 	.word	0x3ba3198a
 8009c80:	252049c1 	.word	0x252049c1
 8009c84:	397b839a 	.word	0x397b839a
 8009c88:	3fe921fb 	.word	0x3fe921fb
 8009c8c:	4002d97b 	.word	0x4002d97b
 8009c90:	3ff921fb 	.word	0x3ff921fb
 8009c94:	413921fb 	.word	0x413921fb
 8009c98:	3fe00000 	.word	0x3fe00000
 8009c9c:	0800a8a0 	.word	0x0800a8a0
 8009ca0:	7fefffff 	.word	0x7fefffff
 8009ca4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009ca8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8009cac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	460f      	mov	r7, r1
 8009cb4:	f7f6 fef4 	bl	8000aa0 <__aeabi_d2iz>
 8009cb8:	f7f6 fbd8 	bl	800046c <__aeabi_i2d>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	4639      	mov	r1, r7
 8009cc4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009cc8:	f7f6 fa82 	bl	80001d0 <__aeabi_dsub>
 8009ccc:	4b22      	ldr	r3, [pc, #136]	@ (8009d58 <__ieee754_rem_pio2+0x3f0>)
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f7f6 fc36 	bl	8000540 <__aeabi_dmul>
 8009cd4:	460f      	mov	r7, r1
 8009cd6:	4606      	mov	r6, r0
 8009cd8:	f7f6 fee2 	bl	8000aa0 <__aeabi_d2iz>
 8009cdc:	f7f6 fbc6 	bl	800046c <__aeabi_i2d>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	4639      	mov	r1, r7
 8009ce8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009cec:	f7f6 fa70 	bl	80001d0 <__aeabi_dsub>
 8009cf0:	4b19      	ldr	r3, [pc, #100]	@ (8009d58 <__ieee754_rem_pio2+0x3f0>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f7f6 fc24 	bl	8000540 <__aeabi_dmul>
 8009cf8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009cfc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009d00:	f04f 0803 	mov.w	r8, #3
 8009d04:	2600      	movs	r6, #0
 8009d06:	2700      	movs	r7, #0
 8009d08:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009d0c:	4632      	mov	r2, r6
 8009d0e:	463b      	mov	r3, r7
 8009d10:	46c2      	mov	sl, r8
 8009d12:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d16:	f7f6 fe7b 	bl	8000a10 <__aeabi_dcmpeq>
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	d1f4      	bne.n	8009d08 <__ieee754_rem_pio2+0x3a0>
 8009d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8009d5c <__ieee754_rem_pio2+0x3f4>)
 8009d20:	9301      	str	r3, [sp, #4]
 8009d22:	2302      	movs	r3, #2
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	462a      	mov	r2, r5
 8009d28:	4653      	mov	r3, sl
 8009d2a:	4621      	mov	r1, r4
 8009d2c:	a806      	add	r0, sp, #24
 8009d2e:	f000 f92f 	bl	8009f90 <__kernel_rem_pio2>
 8009d32:	9b04      	ldr	r3, [sp, #16]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	4605      	mov	r5, r0
 8009d38:	f6bf ae53 	bge.w	80099e2 <__ieee754_rem_pio2+0x7a>
 8009d3c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009d40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009d44:	e9c4 2300 	strd	r2, r3, [r4]
 8009d48:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8009d4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009d50:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009d54:	e740      	b.n	8009bd8 <__ieee754_rem_pio2+0x270>
 8009d56:	bf00      	nop
 8009d58:	41700000 	.word	0x41700000
 8009d5c:	0800a920 	.word	0x0800a920

08009d60 <with_errno>:
 8009d60:	b510      	push	{r4, lr}
 8009d62:	ed2d 8b02 	vpush	{d8}
 8009d66:	eeb0 8a40 	vmov.f32	s16, s0
 8009d6a:	eef0 8a60 	vmov.f32	s17, s1
 8009d6e:	4604      	mov	r4, r0
 8009d70:	f7fe ff78 	bl	8008c64 <__errno>
 8009d74:	eeb0 0a48 	vmov.f32	s0, s16
 8009d78:	eef0 0a68 	vmov.f32	s1, s17
 8009d7c:	ecbd 8b02 	vpop	{d8}
 8009d80:	6004      	str	r4, [r0, #0]
 8009d82:	bd10      	pop	{r4, pc}

08009d84 <xflow>:
 8009d84:	4603      	mov	r3, r0
 8009d86:	b507      	push	{r0, r1, r2, lr}
 8009d88:	ec51 0b10 	vmov	r0, r1, d0
 8009d8c:	b183      	cbz	r3, 8009db0 <xflow+0x2c>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009d94:	e9cd 2300 	strd	r2, r3, [sp]
 8009d98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d9c:	f7f6 fbd0 	bl	8000540 <__aeabi_dmul>
 8009da0:	ec41 0b10 	vmov	d0, r0, r1
 8009da4:	2022      	movs	r0, #34	@ 0x22
 8009da6:	b003      	add	sp, #12
 8009da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dac:	f7ff bfd8 	b.w	8009d60 <with_errno>
 8009db0:	4602      	mov	r2, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	e7ee      	b.n	8009d94 <xflow+0x10>
	...

08009db8 <__math_uflow>:
 8009db8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009dc0 <__math_uflow+0x8>
 8009dbc:	f7ff bfe2 	b.w	8009d84 <xflow>
 8009dc0:	00000000 	.word	0x00000000
 8009dc4:	10000000 	.word	0x10000000

08009dc8 <__math_oflow>:
 8009dc8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009dd0 <__math_oflow+0x8>
 8009dcc:	f7ff bfda 	b.w	8009d84 <xflow>
 8009dd0:	00000000 	.word	0x00000000
 8009dd4:	70000000 	.word	0x70000000

08009dd8 <__ieee754_sqrt>:
 8009dd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ddc:	4a68      	ldr	r2, [pc, #416]	@ (8009f80 <__ieee754_sqrt+0x1a8>)
 8009dde:	ec55 4b10 	vmov	r4, r5, d0
 8009de2:	43aa      	bics	r2, r5
 8009de4:	462b      	mov	r3, r5
 8009de6:	4621      	mov	r1, r4
 8009de8:	d110      	bne.n	8009e0c <__ieee754_sqrt+0x34>
 8009dea:	4622      	mov	r2, r4
 8009dec:	4620      	mov	r0, r4
 8009dee:	4629      	mov	r1, r5
 8009df0:	f7f6 fba6 	bl	8000540 <__aeabi_dmul>
 8009df4:	4602      	mov	r2, r0
 8009df6:	460b      	mov	r3, r1
 8009df8:	4620      	mov	r0, r4
 8009dfa:	4629      	mov	r1, r5
 8009dfc:	f7f6 f9ea 	bl	80001d4 <__adddf3>
 8009e00:	4604      	mov	r4, r0
 8009e02:	460d      	mov	r5, r1
 8009e04:	ec45 4b10 	vmov	d0, r4, r5
 8009e08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e0c:	2d00      	cmp	r5, #0
 8009e0e:	dc0e      	bgt.n	8009e2e <__ieee754_sqrt+0x56>
 8009e10:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009e14:	4322      	orrs	r2, r4
 8009e16:	d0f5      	beq.n	8009e04 <__ieee754_sqrt+0x2c>
 8009e18:	b19d      	cbz	r5, 8009e42 <__ieee754_sqrt+0x6a>
 8009e1a:	4622      	mov	r2, r4
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	4629      	mov	r1, r5
 8009e20:	f7f6 f9d6 	bl	80001d0 <__aeabi_dsub>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	f7f6 fcb4 	bl	8000794 <__aeabi_ddiv>
 8009e2c:	e7e8      	b.n	8009e00 <__ieee754_sqrt+0x28>
 8009e2e:	152a      	asrs	r2, r5, #20
 8009e30:	d115      	bne.n	8009e5e <__ieee754_sqrt+0x86>
 8009e32:	2000      	movs	r0, #0
 8009e34:	e009      	b.n	8009e4a <__ieee754_sqrt+0x72>
 8009e36:	0acb      	lsrs	r3, r1, #11
 8009e38:	3a15      	subs	r2, #21
 8009e3a:	0549      	lsls	r1, r1, #21
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d0fa      	beq.n	8009e36 <__ieee754_sqrt+0x5e>
 8009e40:	e7f7      	b.n	8009e32 <__ieee754_sqrt+0x5a>
 8009e42:	462a      	mov	r2, r5
 8009e44:	e7fa      	b.n	8009e3c <__ieee754_sqrt+0x64>
 8009e46:	005b      	lsls	r3, r3, #1
 8009e48:	3001      	adds	r0, #1
 8009e4a:	02dc      	lsls	r4, r3, #11
 8009e4c:	d5fb      	bpl.n	8009e46 <__ieee754_sqrt+0x6e>
 8009e4e:	1e44      	subs	r4, r0, #1
 8009e50:	1b12      	subs	r2, r2, r4
 8009e52:	f1c0 0420 	rsb	r4, r0, #32
 8009e56:	fa21 f404 	lsr.w	r4, r1, r4
 8009e5a:	4323      	orrs	r3, r4
 8009e5c:	4081      	lsls	r1, r0
 8009e5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e62:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009e66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e6a:	07d2      	lsls	r2, r2, #31
 8009e6c:	bf5c      	itt	pl
 8009e6e:	005b      	lslpl	r3, r3, #1
 8009e70:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009e74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009e78:	bf58      	it	pl
 8009e7a:	0049      	lslpl	r1, r1, #1
 8009e7c:	2600      	movs	r6, #0
 8009e7e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009e82:	106d      	asrs	r5, r5, #1
 8009e84:	0049      	lsls	r1, r1, #1
 8009e86:	2016      	movs	r0, #22
 8009e88:	4632      	mov	r2, r6
 8009e8a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009e8e:	1917      	adds	r7, r2, r4
 8009e90:	429f      	cmp	r7, r3
 8009e92:	bfde      	ittt	le
 8009e94:	193a      	addle	r2, r7, r4
 8009e96:	1bdb      	suble	r3, r3, r7
 8009e98:	1936      	addle	r6, r6, r4
 8009e9a:	0fcf      	lsrs	r7, r1, #31
 8009e9c:	3801      	subs	r0, #1
 8009e9e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009ea2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009ea6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009eaa:	d1f0      	bne.n	8009e8e <__ieee754_sqrt+0xb6>
 8009eac:	4604      	mov	r4, r0
 8009eae:	2720      	movs	r7, #32
 8009eb0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	eb00 0e0c 	add.w	lr, r0, ip
 8009eba:	db02      	blt.n	8009ec2 <__ieee754_sqrt+0xea>
 8009ebc:	d113      	bne.n	8009ee6 <__ieee754_sqrt+0x10e>
 8009ebe:	458e      	cmp	lr, r1
 8009ec0:	d811      	bhi.n	8009ee6 <__ieee754_sqrt+0x10e>
 8009ec2:	f1be 0f00 	cmp.w	lr, #0
 8009ec6:	eb0e 000c 	add.w	r0, lr, ip
 8009eca:	da42      	bge.n	8009f52 <__ieee754_sqrt+0x17a>
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	db40      	blt.n	8009f52 <__ieee754_sqrt+0x17a>
 8009ed0:	f102 0801 	add.w	r8, r2, #1
 8009ed4:	1a9b      	subs	r3, r3, r2
 8009ed6:	458e      	cmp	lr, r1
 8009ed8:	bf88      	it	hi
 8009eda:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009ede:	eba1 010e 	sub.w	r1, r1, lr
 8009ee2:	4464      	add	r4, ip
 8009ee4:	4642      	mov	r2, r8
 8009ee6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009eea:	3f01      	subs	r7, #1
 8009eec:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009ef0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009ef4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009ef8:	d1dc      	bne.n	8009eb4 <__ieee754_sqrt+0xdc>
 8009efa:	4319      	orrs	r1, r3
 8009efc:	d01b      	beq.n	8009f36 <__ieee754_sqrt+0x15e>
 8009efe:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009f84 <__ieee754_sqrt+0x1ac>
 8009f02:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009f88 <__ieee754_sqrt+0x1b0>
 8009f06:	e9da 0100 	ldrd	r0, r1, [sl]
 8009f0a:	e9db 2300 	ldrd	r2, r3, [fp]
 8009f0e:	f7f6 f95f 	bl	80001d0 <__aeabi_dsub>
 8009f12:	e9da 8900 	ldrd	r8, r9, [sl]
 8009f16:	4602      	mov	r2, r0
 8009f18:	460b      	mov	r3, r1
 8009f1a:	4640      	mov	r0, r8
 8009f1c:	4649      	mov	r1, r9
 8009f1e:	f7f6 fd8b 	bl	8000a38 <__aeabi_dcmple>
 8009f22:	b140      	cbz	r0, 8009f36 <__ieee754_sqrt+0x15e>
 8009f24:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009f28:	e9da 0100 	ldrd	r0, r1, [sl]
 8009f2c:	e9db 2300 	ldrd	r2, r3, [fp]
 8009f30:	d111      	bne.n	8009f56 <__ieee754_sqrt+0x17e>
 8009f32:	3601      	adds	r6, #1
 8009f34:	463c      	mov	r4, r7
 8009f36:	1072      	asrs	r2, r6, #1
 8009f38:	0863      	lsrs	r3, r4, #1
 8009f3a:	07f1      	lsls	r1, r6, #31
 8009f3c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009f40:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009f44:	bf48      	it	mi
 8009f46:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009f4a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8009f4e:	4618      	mov	r0, r3
 8009f50:	e756      	b.n	8009e00 <__ieee754_sqrt+0x28>
 8009f52:	4690      	mov	r8, r2
 8009f54:	e7be      	b.n	8009ed4 <__ieee754_sqrt+0xfc>
 8009f56:	f7f6 f93d 	bl	80001d4 <__adddf3>
 8009f5a:	e9da 8900 	ldrd	r8, r9, [sl]
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	4640      	mov	r0, r8
 8009f64:	4649      	mov	r1, r9
 8009f66:	f7f6 fd5d 	bl	8000a24 <__aeabi_dcmplt>
 8009f6a:	b120      	cbz	r0, 8009f76 <__ieee754_sqrt+0x19e>
 8009f6c:	1ca0      	adds	r0, r4, #2
 8009f6e:	bf08      	it	eq
 8009f70:	3601      	addeq	r6, #1
 8009f72:	3402      	adds	r4, #2
 8009f74:	e7df      	b.n	8009f36 <__ieee754_sqrt+0x15e>
 8009f76:	1c63      	adds	r3, r4, #1
 8009f78:	f023 0401 	bic.w	r4, r3, #1
 8009f7c:	e7db      	b.n	8009f36 <__ieee754_sqrt+0x15e>
 8009f7e:	bf00      	nop
 8009f80:	7ff00000 	.word	0x7ff00000
 8009f84:	20000090 	.word	0x20000090
 8009f88:	20000088 	.word	0x20000088
 8009f8c:	00000000 	.word	0x00000000

08009f90 <__kernel_rem_pio2>:
 8009f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f94:	ed2d 8b02 	vpush	{d8}
 8009f98:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8009f9c:	f112 0f14 	cmn.w	r2, #20
 8009fa0:	9306      	str	r3, [sp, #24]
 8009fa2:	9104      	str	r1, [sp, #16]
 8009fa4:	4bbe      	ldr	r3, [pc, #760]	@ (800a2a0 <__kernel_rem_pio2+0x310>)
 8009fa6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8009fa8:	9008      	str	r0, [sp, #32]
 8009faa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009fae:	9300      	str	r3, [sp, #0]
 8009fb0:	9b06      	ldr	r3, [sp, #24]
 8009fb2:	f103 33ff 	add.w	r3, r3, #4294967295
 8009fb6:	bfa8      	it	ge
 8009fb8:	1ed4      	subge	r4, r2, #3
 8009fba:	9305      	str	r3, [sp, #20]
 8009fbc:	bfb2      	itee	lt
 8009fbe:	2400      	movlt	r4, #0
 8009fc0:	2318      	movge	r3, #24
 8009fc2:	fb94 f4f3 	sdivge	r4, r4, r3
 8009fc6:	f06f 0317 	mvn.w	r3, #23
 8009fca:	fb04 3303 	mla	r3, r4, r3, r3
 8009fce:	eb03 0b02 	add.w	fp, r3, r2
 8009fd2:	9b00      	ldr	r3, [sp, #0]
 8009fd4:	9a05      	ldr	r2, [sp, #20]
 8009fd6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800a290 <__kernel_rem_pio2+0x300>
 8009fda:	eb03 0802 	add.w	r8, r3, r2
 8009fde:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009fe0:	1aa7      	subs	r7, r4, r2
 8009fe2:	ae20      	add	r6, sp, #128	@ 0x80
 8009fe4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009fe8:	2500      	movs	r5, #0
 8009fea:	4545      	cmp	r5, r8
 8009fec:	dd13      	ble.n	800a016 <__kernel_rem_pio2+0x86>
 8009fee:	9b06      	ldr	r3, [sp, #24]
 8009ff0:	aa20      	add	r2, sp, #128	@ 0x80
 8009ff2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009ff6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8009ffa:	f04f 0800 	mov.w	r8, #0
 8009ffe:	9b00      	ldr	r3, [sp, #0]
 800a000:	4598      	cmp	r8, r3
 800a002:	dc31      	bgt.n	800a068 <__kernel_rem_pio2+0xd8>
 800a004:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800a290 <__kernel_rem_pio2+0x300>
 800a008:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a00c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a010:	462f      	mov	r7, r5
 800a012:	2600      	movs	r6, #0
 800a014:	e01b      	b.n	800a04e <__kernel_rem_pio2+0xbe>
 800a016:	42ef      	cmn	r7, r5
 800a018:	d407      	bmi.n	800a02a <__kernel_rem_pio2+0x9a>
 800a01a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a01e:	f7f6 fa25 	bl	800046c <__aeabi_i2d>
 800a022:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a026:	3501      	adds	r5, #1
 800a028:	e7df      	b.n	8009fea <__kernel_rem_pio2+0x5a>
 800a02a:	ec51 0b18 	vmov	r0, r1, d8
 800a02e:	e7f8      	b.n	800a022 <__kernel_rem_pio2+0x92>
 800a030:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a034:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a038:	f7f6 fa82 	bl	8000540 <__aeabi_dmul>
 800a03c:	4602      	mov	r2, r0
 800a03e:	460b      	mov	r3, r1
 800a040:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a044:	f7f6 f8c6 	bl	80001d4 <__adddf3>
 800a048:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a04c:	3601      	adds	r6, #1
 800a04e:	9b05      	ldr	r3, [sp, #20]
 800a050:	429e      	cmp	r6, r3
 800a052:	f1a7 0708 	sub.w	r7, r7, #8
 800a056:	ddeb      	ble.n	800a030 <__kernel_rem_pio2+0xa0>
 800a058:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a05c:	f108 0801 	add.w	r8, r8, #1
 800a060:	ecaa 7b02 	vstmia	sl!, {d7}
 800a064:	3508      	adds	r5, #8
 800a066:	e7ca      	b.n	8009ffe <__kernel_rem_pio2+0x6e>
 800a068:	9b00      	ldr	r3, [sp, #0]
 800a06a:	f8dd 8000 	ldr.w	r8, [sp]
 800a06e:	aa0c      	add	r2, sp, #48	@ 0x30
 800a070:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a074:	930a      	str	r3, [sp, #40]	@ 0x28
 800a076:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a078:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a07c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a07e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800a082:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a084:	ab98      	add	r3, sp, #608	@ 0x260
 800a086:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a08a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800a08e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a092:	ac0c      	add	r4, sp, #48	@ 0x30
 800a094:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a096:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800a09a:	46a1      	mov	r9, r4
 800a09c:	46c2      	mov	sl, r8
 800a09e:	f1ba 0f00 	cmp.w	sl, #0
 800a0a2:	f1a5 0508 	sub.w	r5, r5, #8
 800a0a6:	dc77      	bgt.n	800a198 <__kernel_rem_pio2+0x208>
 800a0a8:	4658      	mov	r0, fp
 800a0aa:	ed9d 0b02 	vldr	d0, [sp, #8]
 800a0ae:	f000 fac7 	bl	800a640 <scalbn>
 800a0b2:	ec57 6b10 	vmov	r6, r7, d0
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800a0bc:	4630      	mov	r0, r6
 800a0be:	4639      	mov	r1, r7
 800a0c0:	f7f6 fa3e 	bl	8000540 <__aeabi_dmul>
 800a0c4:	ec41 0b10 	vmov	d0, r0, r1
 800a0c8:	f000 fb3a 	bl	800a740 <floor>
 800a0cc:	4b75      	ldr	r3, [pc, #468]	@ (800a2a4 <__kernel_rem_pio2+0x314>)
 800a0ce:	ec51 0b10 	vmov	r0, r1, d0
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f7f6 fa34 	bl	8000540 <__aeabi_dmul>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	4630      	mov	r0, r6
 800a0de:	4639      	mov	r1, r7
 800a0e0:	f7f6 f876 	bl	80001d0 <__aeabi_dsub>
 800a0e4:	460f      	mov	r7, r1
 800a0e6:	4606      	mov	r6, r0
 800a0e8:	f7f6 fcda 	bl	8000aa0 <__aeabi_d2iz>
 800a0ec:	9002      	str	r0, [sp, #8]
 800a0ee:	f7f6 f9bd 	bl	800046c <__aeabi_i2d>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	4630      	mov	r0, r6
 800a0f8:	4639      	mov	r1, r7
 800a0fa:	f7f6 f869 	bl	80001d0 <__aeabi_dsub>
 800a0fe:	f1bb 0f00 	cmp.w	fp, #0
 800a102:	4606      	mov	r6, r0
 800a104:	460f      	mov	r7, r1
 800a106:	dd6c      	ble.n	800a1e2 <__kernel_rem_pio2+0x252>
 800a108:	f108 31ff 	add.w	r1, r8, #4294967295
 800a10c:	ab0c      	add	r3, sp, #48	@ 0x30
 800a10e:	9d02      	ldr	r5, [sp, #8]
 800a110:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a114:	f1cb 0018 	rsb	r0, fp, #24
 800a118:	fa43 f200 	asr.w	r2, r3, r0
 800a11c:	4415      	add	r5, r2
 800a11e:	4082      	lsls	r2, r0
 800a120:	1a9b      	subs	r3, r3, r2
 800a122:	aa0c      	add	r2, sp, #48	@ 0x30
 800a124:	9502      	str	r5, [sp, #8]
 800a126:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a12a:	f1cb 0217 	rsb	r2, fp, #23
 800a12e:	fa43 f902 	asr.w	r9, r3, r2
 800a132:	f1b9 0f00 	cmp.w	r9, #0
 800a136:	dd64      	ble.n	800a202 <__kernel_rem_pio2+0x272>
 800a138:	9b02      	ldr	r3, [sp, #8]
 800a13a:	2200      	movs	r2, #0
 800a13c:	3301      	adds	r3, #1
 800a13e:	9302      	str	r3, [sp, #8]
 800a140:	4615      	mov	r5, r2
 800a142:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800a146:	4590      	cmp	r8, r2
 800a148:	f300 80b8 	bgt.w	800a2bc <__kernel_rem_pio2+0x32c>
 800a14c:	f1bb 0f00 	cmp.w	fp, #0
 800a150:	dd07      	ble.n	800a162 <__kernel_rem_pio2+0x1d2>
 800a152:	f1bb 0f01 	cmp.w	fp, #1
 800a156:	f000 80bf 	beq.w	800a2d8 <__kernel_rem_pio2+0x348>
 800a15a:	f1bb 0f02 	cmp.w	fp, #2
 800a15e:	f000 80c6 	beq.w	800a2ee <__kernel_rem_pio2+0x35e>
 800a162:	f1b9 0f02 	cmp.w	r9, #2
 800a166:	d14c      	bne.n	800a202 <__kernel_rem_pio2+0x272>
 800a168:	4632      	mov	r2, r6
 800a16a:	463b      	mov	r3, r7
 800a16c:	494e      	ldr	r1, [pc, #312]	@ (800a2a8 <__kernel_rem_pio2+0x318>)
 800a16e:	2000      	movs	r0, #0
 800a170:	f7f6 f82e 	bl	80001d0 <__aeabi_dsub>
 800a174:	4606      	mov	r6, r0
 800a176:	460f      	mov	r7, r1
 800a178:	2d00      	cmp	r5, #0
 800a17a:	d042      	beq.n	800a202 <__kernel_rem_pio2+0x272>
 800a17c:	4658      	mov	r0, fp
 800a17e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800a298 <__kernel_rem_pio2+0x308>
 800a182:	f000 fa5d 	bl	800a640 <scalbn>
 800a186:	4630      	mov	r0, r6
 800a188:	4639      	mov	r1, r7
 800a18a:	ec53 2b10 	vmov	r2, r3, d0
 800a18e:	f7f6 f81f 	bl	80001d0 <__aeabi_dsub>
 800a192:	4606      	mov	r6, r0
 800a194:	460f      	mov	r7, r1
 800a196:	e034      	b.n	800a202 <__kernel_rem_pio2+0x272>
 800a198:	4b44      	ldr	r3, [pc, #272]	@ (800a2ac <__kernel_rem_pio2+0x31c>)
 800a19a:	2200      	movs	r2, #0
 800a19c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1a0:	f7f6 f9ce 	bl	8000540 <__aeabi_dmul>
 800a1a4:	f7f6 fc7c 	bl	8000aa0 <__aeabi_d2iz>
 800a1a8:	f7f6 f960 	bl	800046c <__aeabi_i2d>
 800a1ac:	4b40      	ldr	r3, [pc, #256]	@ (800a2b0 <__kernel_rem_pio2+0x320>)
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	4606      	mov	r6, r0
 800a1b2:	460f      	mov	r7, r1
 800a1b4:	f7f6 f9c4 	bl	8000540 <__aeabi_dmul>
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1c0:	f7f6 f806 	bl	80001d0 <__aeabi_dsub>
 800a1c4:	f7f6 fc6c 	bl	8000aa0 <__aeabi_d2iz>
 800a1c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a1cc:	f849 0b04 	str.w	r0, [r9], #4
 800a1d0:	4639      	mov	r1, r7
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	f7f5 fffe 	bl	80001d4 <__adddf3>
 800a1d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1e0:	e75d      	b.n	800a09e <__kernel_rem_pio2+0x10e>
 800a1e2:	d107      	bne.n	800a1f4 <__kernel_rem_pio2+0x264>
 800a1e4:	f108 33ff 	add.w	r3, r8, #4294967295
 800a1e8:	aa0c      	add	r2, sp, #48	@ 0x30
 800a1ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1ee:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800a1f2:	e79e      	b.n	800a132 <__kernel_rem_pio2+0x1a2>
 800a1f4:	4b2f      	ldr	r3, [pc, #188]	@ (800a2b4 <__kernel_rem_pio2+0x324>)
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f7f6 fc28 	bl	8000a4c <__aeabi_dcmpge>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d143      	bne.n	800a288 <__kernel_rem_pio2+0x2f8>
 800a200:	4681      	mov	r9, r0
 800a202:	2200      	movs	r2, #0
 800a204:	2300      	movs	r3, #0
 800a206:	4630      	mov	r0, r6
 800a208:	4639      	mov	r1, r7
 800a20a:	f7f6 fc01 	bl	8000a10 <__aeabi_dcmpeq>
 800a20e:	2800      	cmp	r0, #0
 800a210:	f000 80bf 	beq.w	800a392 <__kernel_rem_pio2+0x402>
 800a214:	f108 33ff 	add.w	r3, r8, #4294967295
 800a218:	2200      	movs	r2, #0
 800a21a:	9900      	ldr	r1, [sp, #0]
 800a21c:	428b      	cmp	r3, r1
 800a21e:	da6e      	bge.n	800a2fe <__kernel_rem_pio2+0x36e>
 800a220:	2a00      	cmp	r2, #0
 800a222:	f000 8089 	beq.w	800a338 <__kernel_rem_pio2+0x3a8>
 800a226:	f108 38ff 	add.w	r8, r8, #4294967295
 800a22a:	ab0c      	add	r3, sp, #48	@ 0x30
 800a22c:	f1ab 0b18 	sub.w	fp, fp, #24
 800a230:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d0f6      	beq.n	800a226 <__kernel_rem_pio2+0x296>
 800a238:	4658      	mov	r0, fp
 800a23a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800a298 <__kernel_rem_pio2+0x308>
 800a23e:	f000 f9ff 	bl	800a640 <scalbn>
 800a242:	f108 0301 	add.w	r3, r8, #1
 800a246:	00da      	lsls	r2, r3, #3
 800a248:	9205      	str	r2, [sp, #20]
 800a24a:	ec55 4b10 	vmov	r4, r5, d0
 800a24e:	aa70      	add	r2, sp, #448	@ 0x1c0
 800a250:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800a2ac <__kernel_rem_pio2+0x31c>
 800a254:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800a258:	4646      	mov	r6, r8
 800a25a:	f04f 0a00 	mov.w	sl, #0
 800a25e:	2e00      	cmp	r6, #0
 800a260:	f280 80cf 	bge.w	800a402 <__kernel_rem_pio2+0x472>
 800a264:	4644      	mov	r4, r8
 800a266:	2c00      	cmp	r4, #0
 800a268:	f2c0 80fd 	blt.w	800a466 <__kernel_rem_pio2+0x4d6>
 800a26c:	4b12      	ldr	r3, [pc, #72]	@ (800a2b8 <__kernel_rem_pio2+0x328>)
 800a26e:	461f      	mov	r7, r3
 800a270:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a272:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a276:	9306      	str	r3, [sp, #24]
 800a278:	f04f 0a00 	mov.w	sl, #0
 800a27c:	f04f 0b00 	mov.w	fp, #0
 800a280:	2600      	movs	r6, #0
 800a282:	eba8 0504 	sub.w	r5, r8, r4
 800a286:	e0e2      	b.n	800a44e <__kernel_rem_pio2+0x4be>
 800a288:	f04f 0902 	mov.w	r9, #2
 800a28c:	e754      	b.n	800a138 <__kernel_rem_pio2+0x1a8>
 800a28e:	bf00      	nop
	...
 800a29c:	3ff00000 	.word	0x3ff00000
 800a2a0:	0800aa68 	.word	0x0800aa68
 800a2a4:	40200000 	.word	0x40200000
 800a2a8:	3ff00000 	.word	0x3ff00000
 800a2ac:	3e700000 	.word	0x3e700000
 800a2b0:	41700000 	.word	0x41700000
 800a2b4:	3fe00000 	.word	0x3fe00000
 800a2b8:	0800aa28 	.word	0x0800aa28
 800a2bc:	f854 3b04 	ldr.w	r3, [r4], #4
 800a2c0:	b945      	cbnz	r5, 800a2d4 <__kernel_rem_pio2+0x344>
 800a2c2:	b123      	cbz	r3, 800a2ce <__kernel_rem_pio2+0x33e>
 800a2c4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800a2c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	3201      	adds	r2, #1
 800a2d0:	461d      	mov	r5, r3
 800a2d2:	e738      	b.n	800a146 <__kernel_rem_pio2+0x1b6>
 800a2d4:	1acb      	subs	r3, r1, r3
 800a2d6:	e7f7      	b.n	800a2c8 <__kernel_rem_pio2+0x338>
 800a2d8:	f108 32ff 	add.w	r2, r8, #4294967295
 800a2dc:	ab0c      	add	r3, sp, #48	@ 0x30
 800a2de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2e2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a2e6:	a90c      	add	r1, sp, #48	@ 0x30
 800a2e8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a2ec:	e739      	b.n	800a162 <__kernel_rem_pio2+0x1d2>
 800a2ee:	f108 32ff 	add.w	r2, r8, #4294967295
 800a2f2:	ab0c      	add	r3, sp, #48	@ 0x30
 800a2f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a2fc:	e7f3      	b.n	800a2e6 <__kernel_rem_pio2+0x356>
 800a2fe:	a90c      	add	r1, sp, #48	@ 0x30
 800a300:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a304:	3b01      	subs	r3, #1
 800a306:	430a      	orrs	r2, r1
 800a308:	e787      	b.n	800a21a <__kernel_rem_pio2+0x28a>
 800a30a:	3401      	adds	r4, #1
 800a30c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a310:	2a00      	cmp	r2, #0
 800a312:	d0fa      	beq.n	800a30a <__kernel_rem_pio2+0x37a>
 800a314:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a316:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a31a:	eb0d 0503 	add.w	r5, sp, r3
 800a31e:	9b06      	ldr	r3, [sp, #24]
 800a320:	aa20      	add	r2, sp, #128	@ 0x80
 800a322:	4443      	add	r3, r8
 800a324:	f108 0701 	add.w	r7, r8, #1
 800a328:	3d98      	subs	r5, #152	@ 0x98
 800a32a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800a32e:	4444      	add	r4, r8
 800a330:	42bc      	cmp	r4, r7
 800a332:	da04      	bge.n	800a33e <__kernel_rem_pio2+0x3ae>
 800a334:	46a0      	mov	r8, r4
 800a336:	e6a2      	b.n	800a07e <__kernel_rem_pio2+0xee>
 800a338:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a33a:	2401      	movs	r4, #1
 800a33c:	e7e6      	b.n	800a30c <__kernel_rem_pio2+0x37c>
 800a33e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a340:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a344:	f7f6 f892 	bl	800046c <__aeabi_i2d>
 800a348:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800a610 <__kernel_rem_pio2+0x680>
 800a34c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a350:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a354:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a358:	46b2      	mov	sl, r6
 800a35a:	f04f 0800 	mov.w	r8, #0
 800a35e:	9b05      	ldr	r3, [sp, #20]
 800a360:	4598      	cmp	r8, r3
 800a362:	dd05      	ble.n	800a370 <__kernel_rem_pio2+0x3e0>
 800a364:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a368:	3701      	adds	r7, #1
 800a36a:	eca5 7b02 	vstmia	r5!, {d7}
 800a36e:	e7df      	b.n	800a330 <__kernel_rem_pio2+0x3a0>
 800a370:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800a374:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a378:	f7f6 f8e2 	bl	8000540 <__aeabi_dmul>
 800a37c:	4602      	mov	r2, r0
 800a37e:	460b      	mov	r3, r1
 800a380:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a384:	f7f5 ff26 	bl	80001d4 <__adddf3>
 800a388:	f108 0801 	add.w	r8, r8, #1
 800a38c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a390:	e7e5      	b.n	800a35e <__kernel_rem_pio2+0x3ce>
 800a392:	f1cb 0000 	rsb	r0, fp, #0
 800a396:	ec47 6b10 	vmov	d0, r6, r7
 800a39a:	f000 f951 	bl	800a640 <scalbn>
 800a39e:	ec55 4b10 	vmov	r4, r5, d0
 800a3a2:	4b9d      	ldr	r3, [pc, #628]	@ (800a618 <__kernel_rem_pio2+0x688>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	f7f6 fb4f 	bl	8000a4c <__aeabi_dcmpge>
 800a3ae:	b300      	cbz	r0, 800a3f2 <__kernel_rem_pio2+0x462>
 800a3b0:	4b9a      	ldr	r3, [pc, #616]	@ (800a61c <__kernel_rem_pio2+0x68c>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	f7f6 f8c2 	bl	8000540 <__aeabi_dmul>
 800a3bc:	f7f6 fb70 	bl	8000aa0 <__aeabi_d2iz>
 800a3c0:	4606      	mov	r6, r0
 800a3c2:	f7f6 f853 	bl	800046c <__aeabi_i2d>
 800a3c6:	4b94      	ldr	r3, [pc, #592]	@ (800a618 <__kernel_rem_pio2+0x688>)
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f7f6 f8b9 	bl	8000540 <__aeabi_dmul>
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	4629      	mov	r1, r5
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	f7f5 fefb 	bl	80001d0 <__aeabi_dsub>
 800a3da:	f7f6 fb61 	bl	8000aa0 <__aeabi_d2iz>
 800a3de:	ab0c      	add	r3, sp, #48	@ 0x30
 800a3e0:	f10b 0b18 	add.w	fp, fp, #24
 800a3e4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a3e8:	f108 0801 	add.w	r8, r8, #1
 800a3ec:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800a3f0:	e722      	b.n	800a238 <__kernel_rem_pio2+0x2a8>
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	4629      	mov	r1, r5
 800a3f6:	f7f6 fb53 	bl	8000aa0 <__aeabi_d2iz>
 800a3fa:	ab0c      	add	r3, sp, #48	@ 0x30
 800a3fc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a400:	e71a      	b.n	800a238 <__kernel_rem_pio2+0x2a8>
 800a402:	ab0c      	add	r3, sp, #48	@ 0x30
 800a404:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a408:	f7f6 f830 	bl	800046c <__aeabi_i2d>
 800a40c:	4622      	mov	r2, r4
 800a40e:	462b      	mov	r3, r5
 800a410:	f7f6 f896 	bl	8000540 <__aeabi_dmul>
 800a414:	4652      	mov	r2, sl
 800a416:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800a41a:	465b      	mov	r3, fp
 800a41c:	4620      	mov	r0, r4
 800a41e:	4629      	mov	r1, r5
 800a420:	f7f6 f88e 	bl	8000540 <__aeabi_dmul>
 800a424:	3e01      	subs	r6, #1
 800a426:	4604      	mov	r4, r0
 800a428:	460d      	mov	r5, r1
 800a42a:	e718      	b.n	800a25e <__kernel_rem_pio2+0x2ce>
 800a42c:	9906      	ldr	r1, [sp, #24]
 800a42e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800a432:	9106      	str	r1, [sp, #24]
 800a434:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800a438:	f7f6 f882 	bl	8000540 <__aeabi_dmul>
 800a43c:	4602      	mov	r2, r0
 800a43e:	460b      	mov	r3, r1
 800a440:	4650      	mov	r0, sl
 800a442:	4659      	mov	r1, fp
 800a444:	f7f5 fec6 	bl	80001d4 <__adddf3>
 800a448:	3601      	adds	r6, #1
 800a44a:	4682      	mov	sl, r0
 800a44c:	468b      	mov	fp, r1
 800a44e:	9b00      	ldr	r3, [sp, #0]
 800a450:	429e      	cmp	r6, r3
 800a452:	dc01      	bgt.n	800a458 <__kernel_rem_pio2+0x4c8>
 800a454:	42b5      	cmp	r5, r6
 800a456:	dae9      	bge.n	800a42c <__kernel_rem_pio2+0x49c>
 800a458:	ab48      	add	r3, sp, #288	@ 0x120
 800a45a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a45e:	e9c5 ab00 	strd	sl, fp, [r5]
 800a462:	3c01      	subs	r4, #1
 800a464:	e6ff      	b.n	800a266 <__kernel_rem_pio2+0x2d6>
 800a466:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a468:	2b02      	cmp	r3, #2
 800a46a:	dc0b      	bgt.n	800a484 <__kernel_rem_pio2+0x4f4>
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	dc39      	bgt.n	800a4e4 <__kernel_rem_pio2+0x554>
 800a470:	d05d      	beq.n	800a52e <__kernel_rem_pio2+0x59e>
 800a472:	9b02      	ldr	r3, [sp, #8]
 800a474:	f003 0007 	and.w	r0, r3, #7
 800a478:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800a47c:	ecbd 8b02 	vpop	{d8}
 800a480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a484:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a486:	2b03      	cmp	r3, #3
 800a488:	d1f3      	bne.n	800a472 <__kernel_rem_pio2+0x4e2>
 800a48a:	9b05      	ldr	r3, [sp, #20]
 800a48c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a490:	eb0d 0403 	add.w	r4, sp, r3
 800a494:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800a498:	4625      	mov	r5, r4
 800a49a:	46c2      	mov	sl, r8
 800a49c:	f1ba 0f00 	cmp.w	sl, #0
 800a4a0:	f1a5 0508 	sub.w	r5, r5, #8
 800a4a4:	dc6b      	bgt.n	800a57e <__kernel_rem_pio2+0x5ee>
 800a4a6:	4645      	mov	r5, r8
 800a4a8:	2d01      	cmp	r5, #1
 800a4aa:	f1a4 0408 	sub.w	r4, r4, #8
 800a4ae:	f300 8087 	bgt.w	800a5c0 <__kernel_rem_pio2+0x630>
 800a4b2:	9c05      	ldr	r4, [sp, #20]
 800a4b4:	ab48      	add	r3, sp, #288	@ 0x120
 800a4b6:	441c      	add	r4, r3
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	f1b8 0f01 	cmp.w	r8, #1
 800a4c0:	f300 809c 	bgt.w	800a5fc <__kernel_rem_pio2+0x66c>
 800a4c4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800a4c8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800a4cc:	f1b9 0f00 	cmp.w	r9, #0
 800a4d0:	f040 80a6 	bne.w	800a620 <__kernel_rem_pio2+0x690>
 800a4d4:	9b04      	ldr	r3, [sp, #16]
 800a4d6:	e9c3 7800 	strd	r7, r8, [r3]
 800a4da:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a4de:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a4e2:	e7c6      	b.n	800a472 <__kernel_rem_pio2+0x4e2>
 800a4e4:	9d05      	ldr	r5, [sp, #20]
 800a4e6:	ab48      	add	r3, sp, #288	@ 0x120
 800a4e8:	441d      	add	r5, r3
 800a4ea:	4644      	mov	r4, r8
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	2100      	movs	r1, #0
 800a4f0:	2c00      	cmp	r4, #0
 800a4f2:	da35      	bge.n	800a560 <__kernel_rem_pio2+0x5d0>
 800a4f4:	f1b9 0f00 	cmp.w	r9, #0
 800a4f8:	d038      	beq.n	800a56c <__kernel_rem_pio2+0x5dc>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a500:	9c04      	ldr	r4, [sp, #16]
 800a502:	e9c4 2300 	strd	r2, r3, [r4]
 800a506:	4602      	mov	r2, r0
 800a508:	460b      	mov	r3, r1
 800a50a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800a50e:	f7f5 fe5f 	bl	80001d0 <__aeabi_dsub>
 800a512:	ad4a      	add	r5, sp, #296	@ 0x128
 800a514:	2401      	movs	r4, #1
 800a516:	45a0      	cmp	r8, r4
 800a518:	da2b      	bge.n	800a572 <__kernel_rem_pio2+0x5e2>
 800a51a:	f1b9 0f00 	cmp.w	r9, #0
 800a51e:	d002      	beq.n	800a526 <__kernel_rem_pio2+0x596>
 800a520:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a524:	4619      	mov	r1, r3
 800a526:	9b04      	ldr	r3, [sp, #16]
 800a528:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a52c:	e7a1      	b.n	800a472 <__kernel_rem_pio2+0x4e2>
 800a52e:	9c05      	ldr	r4, [sp, #20]
 800a530:	ab48      	add	r3, sp, #288	@ 0x120
 800a532:	441c      	add	r4, r3
 800a534:	2000      	movs	r0, #0
 800a536:	2100      	movs	r1, #0
 800a538:	f1b8 0f00 	cmp.w	r8, #0
 800a53c:	da09      	bge.n	800a552 <__kernel_rem_pio2+0x5c2>
 800a53e:	f1b9 0f00 	cmp.w	r9, #0
 800a542:	d002      	beq.n	800a54a <__kernel_rem_pio2+0x5ba>
 800a544:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a548:	4619      	mov	r1, r3
 800a54a:	9b04      	ldr	r3, [sp, #16]
 800a54c:	e9c3 0100 	strd	r0, r1, [r3]
 800a550:	e78f      	b.n	800a472 <__kernel_rem_pio2+0x4e2>
 800a552:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a556:	f7f5 fe3d 	bl	80001d4 <__adddf3>
 800a55a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a55e:	e7eb      	b.n	800a538 <__kernel_rem_pio2+0x5a8>
 800a560:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a564:	f7f5 fe36 	bl	80001d4 <__adddf3>
 800a568:	3c01      	subs	r4, #1
 800a56a:	e7c1      	b.n	800a4f0 <__kernel_rem_pio2+0x560>
 800a56c:	4602      	mov	r2, r0
 800a56e:	460b      	mov	r3, r1
 800a570:	e7c6      	b.n	800a500 <__kernel_rem_pio2+0x570>
 800a572:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800a576:	f7f5 fe2d 	bl	80001d4 <__adddf3>
 800a57a:	3401      	adds	r4, #1
 800a57c:	e7cb      	b.n	800a516 <__kernel_rem_pio2+0x586>
 800a57e:	ed95 7b00 	vldr	d7, [r5]
 800a582:	ed8d 7b00 	vstr	d7, [sp]
 800a586:	ed95 7b02 	vldr	d7, [r5, #8]
 800a58a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a58e:	ec53 2b17 	vmov	r2, r3, d7
 800a592:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a596:	f7f5 fe1d 	bl	80001d4 <__adddf3>
 800a59a:	4602      	mov	r2, r0
 800a59c:	460b      	mov	r3, r1
 800a59e:	4606      	mov	r6, r0
 800a5a0:	460f      	mov	r7, r1
 800a5a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5a6:	f7f5 fe13 	bl	80001d0 <__aeabi_dsub>
 800a5aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a5ae:	f7f5 fe11 	bl	80001d4 <__adddf3>
 800a5b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5b6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a5ba:	e9c5 6700 	strd	r6, r7, [r5]
 800a5be:	e76d      	b.n	800a49c <__kernel_rem_pio2+0x50c>
 800a5c0:	ed94 7b00 	vldr	d7, [r4]
 800a5c4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800a5c8:	ec51 0b17 	vmov	r0, r1, d7
 800a5cc:	4652      	mov	r2, sl
 800a5ce:	465b      	mov	r3, fp
 800a5d0:	ed8d 7b00 	vstr	d7, [sp]
 800a5d4:	f7f5 fdfe 	bl	80001d4 <__adddf3>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	460b      	mov	r3, r1
 800a5dc:	4606      	mov	r6, r0
 800a5de:	460f      	mov	r7, r1
 800a5e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5e4:	f7f5 fdf4 	bl	80001d0 <__aeabi_dsub>
 800a5e8:	4652      	mov	r2, sl
 800a5ea:	465b      	mov	r3, fp
 800a5ec:	f7f5 fdf2 	bl	80001d4 <__adddf3>
 800a5f0:	3d01      	subs	r5, #1
 800a5f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a5f6:	e9c4 6700 	strd	r6, r7, [r4]
 800a5fa:	e755      	b.n	800a4a8 <__kernel_rem_pio2+0x518>
 800a5fc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a600:	f7f5 fde8 	bl	80001d4 <__adddf3>
 800a604:	f108 38ff 	add.w	r8, r8, #4294967295
 800a608:	e758      	b.n	800a4bc <__kernel_rem_pio2+0x52c>
 800a60a:	bf00      	nop
 800a60c:	f3af 8000 	nop.w
	...
 800a618:	41700000 	.word	0x41700000
 800a61c:	3e700000 	.word	0x3e700000
 800a620:	9b04      	ldr	r3, [sp, #16]
 800a622:	9a04      	ldr	r2, [sp, #16]
 800a624:	601f      	str	r7, [r3, #0]
 800a626:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800a62a:	605c      	str	r4, [r3, #4]
 800a62c:	609d      	str	r5, [r3, #8]
 800a62e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a632:	60d3      	str	r3, [r2, #12]
 800a634:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a638:	6110      	str	r0, [r2, #16]
 800a63a:	6153      	str	r3, [r2, #20]
 800a63c:	e719      	b.n	800a472 <__kernel_rem_pio2+0x4e2>
 800a63e:	bf00      	nop

0800a640 <scalbn>:
 800a640:	b570      	push	{r4, r5, r6, lr}
 800a642:	ec55 4b10 	vmov	r4, r5, d0
 800a646:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a64a:	4606      	mov	r6, r0
 800a64c:	462b      	mov	r3, r5
 800a64e:	b991      	cbnz	r1, 800a676 <scalbn+0x36>
 800a650:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a654:	4323      	orrs	r3, r4
 800a656:	d03d      	beq.n	800a6d4 <scalbn+0x94>
 800a658:	4b35      	ldr	r3, [pc, #212]	@ (800a730 <scalbn+0xf0>)
 800a65a:	4620      	mov	r0, r4
 800a65c:	4629      	mov	r1, r5
 800a65e:	2200      	movs	r2, #0
 800a660:	f7f5 ff6e 	bl	8000540 <__aeabi_dmul>
 800a664:	4b33      	ldr	r3, [pc, #204]	@ (800a734 <scalbn+0xf4>)
 800a666:	429e      	cmp	r6, r3
 800a668:	4604      	mov	r4, r0
 800a66a:	460d      	mov	r5, r1
 800a66c:	da0f      	bge.n	800a68e <scalbn+0x4e>
 800a66e:	a328      	add	r3, pc, #160	@ (adr r3, 800a710 <scalbn+0xd0>)
 800a670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a674:	e01e      	b.n	800a6b4 <scalbn+0x74>
 800a676:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a67a:	4291      	cmp	r1, r2
 800a67c:	d10b      	bne.n	800a696 <scalbn+0x56>
 800a67e:	4622      	mov	r2, r4
 800a680:	4620      	mov	r0, r4
 800a682:	4629      	mov	r1, r5
 800a684:	f7f5 fda6 	bl	80001d4 <__adddf3>
 800a688:	4604      	mov	r4, r0
 800a68a:	460d      	mov	r5, r1
 800a68c:	e022      	b.n	800a6d4 <scalbn+0x94>
 800a68e:	460b      	mov	r3, r1
 800a690:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a694:	3936      	subs	r1, #54	@ 0x36
 800a696:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a69a:	4296      	cmp	r6, r2
 800a69c:	dd0d      	ble.n	800a6ba <scalbn+0x7a>
 800a69e:	2d00      	cmp	r5, #0
 800a6a0:	a11d      	add	r1, pc, #116	@ (adr r1, 800a718 <scalbn+0xd8>)
 800a6a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6a6:	da02      	bge.n	800a6ae <scalbn+0x6e>
 800a6a8:	a11d      	add	r1, pc, #116	@ (adr r1, 800a720 <scalbn+0xe0>)
 800a6aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6ae:	a31a      	add	r3, pc, #104	@ (adr r3, 800a718 <scalbn+0xd8>)
 800a6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b4:	f7f5 ff44 	bl	8000540 <__aeabi_dmul>
 800a6b8:	e7e6      	b.n	800a688 <scalbn+0x48>
 800a6ba:	1872      	adds	r2, r6, r1
 800a6bc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a6c0:	428a      	cmp	r2, r1
 800a6c2:	dcec      	bgt.n	800a69e <scalbn+0x5e>
 800a6c4:	2a00      	cmp	r2, #0
 800a6c6:	dd08      	ble.n	800a6da <scalbn+0x9a>
 800a6c8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a6cc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a6d0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a6d4:	ec45 4b10 	vmov	d0, r4, r5
 800a6d8:	bd70      	pop	{r4, r5, r6, pc}
 800a6da:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a6de:	da08      	bge.n	800a6f2 <scalbn+0xb2>
 800a6e0:	2d00      	cmp	r5, #0
 800a6e2:	a10b      	add	r1, pc, #44	@ (adr r1, 800a710 <scalbn+0xd0>)
 800a6e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6e8:	dac1      	bge.n	800a66e <scalbn+0x2e>
 800a6ea:	a10f      	add	r1, pc, #60	@ (adr r1, 800a728 <scalbn+0xe8>)
 800a6ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6f0:	e7bd      	b.n	800a66e <scalbn+0x2e>
 800a6f2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a6f6:	3236      	adds	r2, #54	@ 0x36
 800a6f8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a6fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a700:	4620      	mov	r0, r4
 800a702:	4b0d      	ldr	r3, [pc, #52]	@ (800a738 <scalbn+0xf8>)
 800a704:	4629      	mov	r1, r5
 800a706:	2200      	movs	r2, #0
 800a708:	e7d4      	b.n	800a6b4 <scalbn+0x74>
 800a70a:	bf00      	nop
 800a70c:	f3af 8000 	nop.w
 800a710:	c2f8f359 	.word	0xc2f8f359
 800a714:	01a56e1f 	.word	0x01a56e1f
 800a718:	8800759c 	.word	0x8800759c
 800a71c:	7e37e43c 	.word	0x7e37e43c
 800a720:	8800759c 	.word	0x8800759c
 800a724:	fe37e43c 	.word	0xfe37e43c
 800a728:	c2f8f359 	.word	0xc2f8f359
 800a72c:	81a56e1f 	.word	0x81a56e1f
 800a730:	43500000 	.word	0x43500000
 800a734:	ffff3cb0 	.word	0xffff3cb0
 800a738:	3c900000 	.word	0x3c900000
 800a73c:	00000000 	.word	0x00000000

0800a740 <floor>:
 800a740:	ec51 0b10 	vmov	r0, r1, d0
 800a744:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a74c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800a750:	2e13      	cmp	r6, #19
 800a752:	460c      	mov	r4, r1
 800a754:	4605      	mov	r5, r0
 800a756:	4680      	mov	r8, r0
 800a758:	dc34      	bgt.n	800a7c4 <floor+0x84>
 800a75a:	2e00      	cmp	r6, #0
 800a75c:	da17      	bge.n	800a78e <floor+0x4e>
 800a75e:	a332      	add	r3, pc, #200	@ (adr r3, 800a828 <floor+0xe8>)
 800a760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a764:	f7f5 fd36 	bl	80001d4 <__adddf3>
 800a768:	2200      	movs	r2, #0
 800a76a:	2300      	movs	r3, #0
 800a76c:	f7f6 f978 	bl	8000a60 <__aeabi_dcmpgt>
 800a770:	b150      	cbz	r0, 800a788 <floor+0x48>
 800a772:	2c00      	cmp	r4, #0
 800a774:	da55      	bge.n	800a822 <floor+0xe2>
 800a776:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a77a:	432c      	orrs	r4, r5
 800a77c:	2500      	movs	r5, #0
 800a77e:	42ac      	cmp	r4, r5
 800a780:	4c2b      	ldr	r4, [pc, #172]	@ (800a830 <floor+0xf0>)
 800a782:	bf08      	it	eq
 800a784:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a788:	4621      	mov	r1, r4
 800a78a:	4628      	mov	r0, r5
 800a78c:	e023      	b.n	800a7d6 <floor+0x96>
 800a78e:	4f29      	ldr	r7, [pc, #164]	@ (800a834 <floor+0xf4>)
 800a790:	4137      	asrs	r7, r6
 800a792:	ea01 0307 	and.w	r3, r1, r7
 800a796:	4303      	orrs	r3, r0
 800a798:	d01d      	beq.n	800a7d6 <floor+0x96>
 800a79a:	a323      	add	r3, pc, #140	@ (adr r3, 800a828 <floor+0xe8>)
 800a79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a0:	f7f5 fd18 	bl	80001d4 <__adddf3>
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	f7f6 f95a 	bl	8000a60 <__aeabi_dcmpgt>
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	d0eb      	beq.n	800a788 <floor+0x48>
 800a7b0:	2c00      	cmp	r4, #0
 800a7b2:	bfbe      	ittt	lt
 800a7b4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a7b8:	4133      	asrlt	r3, r6
 800a7ba:	18e4      	addlt	r4, r4, r3
 800a7bc:	ea24 0407 	bic.w	r4, r4, r7
 800a7c0:	2500      	movs	r5, #0
 800a7c2:	e7e1      	b.n	800a788 <floor+0x48>
 800a7c4:	2e33      	cmp	r6, #51	@ 0x33
 800a7c6:	dd0a      	ble.n	800a7de <floor+0x9e>
 800a7c8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a7cc:	d103      	bne.n	800a7d6 <floor+0x96>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	f7f5 fcff 	bl	80001d4 <__adddf3>
 800a7d6:	ec41 0b10 	vmov	d0, r0, r1
 800a7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7de:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800a7e2:	f04f 37ff 	mov.w	r7, #4294967295
 800a7e6:	40df      	lsrs	r7, r3
 800a7e8:	4207      	tst	r7, r0
 800a7ea:	d0f4      	beq.n	800a7d6 <floor+0x96>
 800a7ec:	a30e      	add	r3, pc, #56	@ (adr r3, 800a828 <floor+0xe8>)
 800a7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f2:	f7f5 fcef 	bl	80001d4 <__adddf3>
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	f7f6 f931 	bl	8000a60 <__aeabi_dcmpgt>
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d0c2      	beq.n	800a788 <floor+0x48>
 800a802:	2c00      	cmp	r4, #0
 800a804:	da0a      	bge.n	800a81c <floor+0xdc>
 800a806:	2e14      	cmp	r6, #20
 800a808:	d101      	bne.n	800a80e <floor+0xce>
 800a80a:	3401      	adds	r4, #1
 800a80c:	e006      	b.n	800a81c <floor+0xdc>
 800a80e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a812:	2301      	movs	r3, #1
 800a814:	40b3      	lsls	r3, r6
 800a816:	441d      	add	r5, r3
 800a818:	4545      	cmp	r5, r8
 800a81a:	d3f6      	bcc.n	800a80a <floor+0xca>
 800a81c:	ea25 0507 	bic.w	r5, r5, r7
 800a820:	e7b2      	b.n	800a788 <floor+0x48>
 800a822:	2500      	movs	r5, #0
 800a824:	462c      	mov	r4, r5
 800a826:	e7af      	b.n	800a788 <floor+0x48>
 800a828:	8800759c 	.word	0x8800759c
 800a82c:	7e37e43c 	.word	0x7e37e43c
 800a830:	bff00000 	.word	0xbff00000
 800a834:	000fffff 	.word	0x000fffff

0800a838 <_init>:
 800a838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a83a:	bf00      	nop
 800a83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a83e:	bc08      	pop	{r3}
 800a840:	469e      	mov	lr, r3
 800a842:	4770      	bx	lr

0800a844 <_fini>:
 800a844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a846:	bf00      	nop
 800a848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a84a:	bc08      	pop	{r3}
 800a84c:	469e      	mov	lr, r3
 800a84e:	4770      	bx	lr
